
robomas_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c488  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800c610  0800c610  0001c610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6a8  0800c6a8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c6a8  0800c6a8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c6a8  0800c6a8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c6a8  0800c6a8  0001c6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6b0  0800c6b0  0001c6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c6b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c0  200001dc  0800c890  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000169c  0800c890  0002169c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a137  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000459b  00000000  00000000  0003a386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  0003e928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e08  00000000  00000000  0003fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f2d  00000000  00000000  000409c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ac4e  00000000  00000000  000638ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2aa2  00000000  00000000  0007e53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cac  00000000  00000000  00130fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00135c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c5f8 	.word	0x0800c5f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	0800c5f8 	.word	0x0800c5f8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	0000      	movs	r0, r0
	...

08000a08 <_ZN9MotorCtrl6setAngEtm>:
 *      Author: ykc
 */

#include "MotorCtrl.hpp"

void MotorCtrl::setAng(uint16_t data, uint32_t receiveID){
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	460b      	mov	r3, r1
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	817b      	strh	r3, [r7, #10]
	param.mechanical_angle[receiveID-0x201] = 360.0*data/8191 - 180.0f;
 8000a16:	897b      	ldrh	r3, [r7, #10]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fd27 	bl	800046c <__aeabi_i2d>
 8000a1e:	f04f 0200 	mov.w	r2, #0
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <_ZN9MotorCtrl6setAngEtm+0x78>)
 8000a24:	f7ff fd8c 	bl	8000540 <__aeabi_dmul>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	4619      	mov	r1, r3
 8000a30:	a311      	add	r3, pc, #68	; (adr r3, 8000a78 <_ZN9MotorCtrl6setAngEtm+0x70>)
 8000a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a36:	f7ff fead 	bl	8000794 <__aeabi_ddiv>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 0200 	mov.w	r2, #0
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <_ZN9MotorCtrl6setAngEtm+0x7c>)
 8000a48:	f7ff fbc2 	bl	80001d0 <__aeabi_dsub>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	460b      	mov	r3, r1
 8000a50:	4610      	mov	r0, r2
 8000a52:	4619      	mov	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f2a3 2401 	subw	r4, r3, #513	; 0x201
 8000a5a:	f7ff ff83 	bl	8000964 <__aeabi_d2f>
 8000a5e:	4601      	mov	r1, r0
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	6019      	str	r1, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	f3af 8000 	nop.w
 8000a78:	00000000 	.word	0x00000000
 8000a7c:	40bfff00 	.word	0x40bfff00
 8000a80:	40768000 	.word	0x40768000
 8000a84:	40668000 	.word	0x40668000

08000a88 <_ZN9MotorCtrl6setVelEtm>:

void MotorCtrl::setVel(uint16_t data, uint32_t receiveID){
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	460b      	mov	r3, r1
 8000a92:	607a      	str	r2, [r7, #4]
 8000a94:	817b      	strh	r3, [r7, #10]
	if(data < 0x8000){
 8000a96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	db22      	blt.n	8000ae4 <_ZN9MotorCtrl6setVelEtm+0x5c>
		param.velocity[receiveID-0x201] = data*3.141592/60.0;
 8000a9e:	897b      	ldrh	r3, [r7, #10]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fce3 	bl	800046c <__aeabi_i2d>
 8000aa6:	a324      	add	r3, pc, #144	; (adr r3, 8000b38 <_ZN9MotorCtrl6setVelEtm+0xb0>)
 8000aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aac:	f7ff fd48 	bl	8000540 <__aeabi_dmul>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	4610      	mov	r0, r2
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <_ZN9MotorCtrl6setVelEtm+0xb8>)
 8000abe:	f7ff fe69 	bl	8000794 <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4619      	mov	r1, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f2a3 2401 	subw	r4, r3, #513	; 0x201
 8000ad0:	f7ff ff48 	bl	8000964 <__aeabi_d2f>
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	6019      	str	r1, [r3, #0]
	}else{
		data =~ data;
		param.velocity[receiveID-0x201] = -1*data*3.141592/60.0;
	}
}
 8000ae2:	e025      	b.n	8000b30 <_ZN9MotorCtrl6setVelEtm+0xa8>
		data =~ data;
 8000ae4:	897b      	ldrh	r3, [r7, #10]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	817b      	strh	r3, [r7, #10]
		param.velocity[receiveID-0x201] = -1*data*3.141592/60.0;
 8000aea:	897b      	ldrh	r3, [r7, #10]
 8000aec:	425b      	negs	r3, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fcbc 	bl	800046c <__aeabi_i2d>
 8000af4:	a310      	add	r3, pc, #64	; (adr r3, 8000b38 <_ZN9MotorCtrl6setVelEtm+0xb0>)
 8000af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afa:	f7ff fd21 	bl	8000540 <__aeabi_dmul>
 8000afe:	4602      	mov	r2, r0
 8000b00:	460b      	mov	r3, r1
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	f04f 0200 	mov.w	r2, #0
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <_ZN9MotorCtrl6setVelEtm+0xb8>)
 8000b0c:	f7ff fe42 	bl	8000794 <__aeabi_ddiv>
 8000b10:	4602      	mov	r2, r0
 8000b12:	460b      	mov	r3, r1
 8000b14:	4610      	mov	r0, r2
 8000b16:	4619      	mov	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f2a3 2401 	subw	r4, r3, #513	; 0x201
 8000b1e:	f7ff ff21 	bl	8000964 <__aeabi_d2f>
 8000b22:	4601      	mov	r1, r0
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	6019      	str	r1, [r3, #0]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	fc8b007a 	.word	0xfc8b007a
 8000b3c:	400921fa 	.word	0x400921fa
 8000b40:	404e0000 	.word	0x404e0000

08000b44 <_ZN9MotorCtrl6setCurEtm>:

void MotorCtrl::setCur(uint16_t data, uint32_t receiveID){
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	817b      	strh	r3, [r7, #10]
	if((data & 0x8000) == 0x8000){
 8000b52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	da1b      	bge.n	8000b92 <_ZN9MotorCtrl6setCurEtm+0x4e>
		data =~ data;
 8000b5a:	897b      	ldrh	r3, [r7, #10]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	817b      	strh	r3, [r7, #10]
		param.current[receiveID-0x201] = -20*data/16384;
 8000b60:	897b      	ldrh	r3, [r7, #10]
 8000b62:	f06f 0213 	mvn.w	r2, #19
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	da02      	bge.n	8000b74 <_ZN9MotorCtrl6setCurEtm+0x30>
 8000b6e:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000b72:	333f      	adds	r3, #63	; 0x3f
 8000b74:	139b      	asrs	r3, r3, #14
 8000b76:	ee07 3a90 	vmov	s15, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8000b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	3340      	adds	r3, #64	; 0x40
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	edc3 7a00 	vstr	s15, [r3]
	}else{
		param.current[receiveID-0x201] = 20*data/16384;
	}
}
 8000b90:	e017      	b.n	8000bc2 <_ZN9MotorCtrl6setCurEtm+0x7e>
		param.current[receiveID-0x201] = 20*data/16384;
 8000b92:	897a      	ldrh	r2, [r7, #10]
 8000b94:	4613      	mov	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da02      	bge.n	8000ba6 <_ZN9MotorCtrl6setCurEtm+0x62>
 8000ba0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000ba4:	333f      	adds	r3, #63	; 0x3f
 8000ba6:	139b      	asrs	r3, r3, #14
 8000ba8:	ee07 3a90 	vmov	s15, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8000bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	3340      	adds	r3, #64	; 0x40
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	edc3 7a00 	vstr	s15, [r3]
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <_ZN9MotorCtrl6updateEmPh>:

bool MotorCtrl::update(uint32_t ReceiveID,uint8_t receiveData[8]){
 8000bd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	60f8      	str	r0, [r7, #12]
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
	if(ReceiveID<0x201||ReceiveID>0x208){return false;}
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000be4:	d903      	bls.n	8000bee <_ZN9MotorCtrl6updateEmPh+0x1e>
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8000bec:	d901      	bls.n	8000bf2 <_ZN9MotorCtrl6updateEmPh+0x22>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e303      	b.n	80011fa <_ZN9MotorCtrl6updateEmPh+0x62a>
	uint8_t number = ReceiveID - 0x201;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	75fb      	strb	r3, [r7, #23]
	setAng(((static_cast<uint16_t>(receiveData[0]) << 8) | receiveData[1]), ReceiveID);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3301      	adds	r3, #1
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	68ba      	ldr	r2, [r7, #8]
 8000c12:	4619      	mov	r1, r3
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f7ff fef7 	bl	8000a08 <_ZN9MotorCtrl6setAngEtm>
	setVel(((static_cast<uint16_t>(receiveData[2]) << 8) | receiveData[3]), ReceiveID);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3303      	adds	r3, #3
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	4619      	mov	r1, r3
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f7ff ff26 	bl	8000a88 <_ZN9MotorCtrl6setVelEtm>
	setCur(((static_cast<uint16_t>(receiveData[4]) << 8) | receiveData[5]), ReceiveID);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3304      	adds	r3, #4
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	b21a      	sxth	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3305      	adds	r3, #5
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	4619      	mov	r1, r3
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff ff73 	bl	8000b44 <_ZN9MotorCtrl6setCurEtm>
	param.temp[number] = receiveData[6];
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	7991      	ldrb	r1, [r2, #6]
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	460a      	mov	r2, r1
 8000c6a:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
	//vel = ((static_cast<uint16_t>(receiveData[2]) << 8) | receiveData[3]);
	if(param.mode[number] == Mode::dis){
 8000c6e:	7dfa      	ldrb	r2, [r7, #23]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d104      	bne.n	8000c84 <_ZN9MotorCtrl6updateEmPh+0xb4>
		reset(number);
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f000 fad0 	bl	8001224 <_ZN9MotorCtrl5resetEh>
	}
	if(param.mode[number] == Mode::vel){
 8000c84:	7dfa      	ldrb	r2, [r7, #23]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	f040 8136 	bne.w	8000efe <_ZN9MotorCtrl6updateEmPh+0x32e>
		e = param.target[number] - param.velocity[number];
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	3310      	adds	r3, #16
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	ed93 7a00 	vldr	s14, [r3]
 8000ca0:	7dfb      	ldrb	r3, [r7, #23]
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	3338      	adds	r3, #56	; 0x38
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	edd3 7a00 	vldr	s15, [r3]
 8000cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	edc3 7a6c 	vstr	s15, [r3, #432]	; 0x1b0
		param.ie[number] = param.ie[number] + e;
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	3318      	adds	r3, #24
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	ed93 7a00 	vldr	s14, [r3]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8000ccc:	7dfb      	ldrb	r3, [r7, #23]
 8000cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	3318      	adds	r3, #24
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	edc3 7a00 	vstr	s15, [r3]
		if(param.ie[number]>param.limitIe[number]){
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	3318      	adds	r3, #24
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	ed93 7a00 	vldr	s14, [r3]
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	3320      	adds	r3, #32
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	edd3 7a00 	vldr	s15, [r3]
 8000cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	dd0c      	ble.n	8000d1e <_ZN9MotorCtrl6updateEmPh+0x14e>
			param.ie[number] = param.limitIe[number];
 8000d04:	7dfa      	ldrb	r2, [r7, #23]
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
 8000d08:	68f9      	ldr	r1, [r7, #12]
 8000d0a:	3220      	adds	r2, #32
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	440a      	add	r2, r1
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	68f9      	ldr	r1, [r7, #12]
 8000d14:	3318      	adds	r3, #24
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	e024      	b.n	8000d68 <_ZN9MotorCtrl6updateEmPh+0x198>
		}else if(param.ie[number]<-1*param.limitIe[number]){
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	3318      	adds	r3, #24
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	ed93 7a00 	vldr	s14, [r3]
 8000d2c:	7dfb      	ldrb	r3, [r7, #23]
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	3320      	adds	r3, #32
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	edd3 7a00 	vldr	s15, [r3]
 8000d3a:	eef1 7a67 	vneg.f32	s15, s15
 8000d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d46:	d50f      	bpl.n	8000d68 <_ZN9MotorCtrl6updateEmPh+0x198>
			param.ie[number] = -1*param.limitIe[number];
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	3320      	adds	r3, #32
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	edd3 7a00 	vldr	s15, [r3]
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
 8000d58:	eef1 7a67 	vneg.f32	s15, s15
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	3318      	adds	r3, #24
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	edc3 7a00 	vstr	s15, [r3]
		}
		param.goal[number] = param.goal[number]+param.Kp[number]*0.0001*e+param.Ki[number]*0.0001*param.ie[number]*0.001/2+(param.Kd[number]*0.0001*(e-param.e_pre[number])/0.001)/2;
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	3308      	adds	r3, #8
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fb8b 	bl	8000490 <__aeabi_f2d>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	460d      	mov	r5, r1
 8000d7e:	7dfb      	ldrb	r3, [r7, #23]
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	334c      	adds	r3, #76	; 0x4c
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fb80 	bl	8000490 <__aeabi_f2d>
 8000d90:	f20f 4384 	addw	r3, pc, #1156	; 0x484
 8000d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d98:	f7ff fbd2 	bl	8000540 <__aeabi_dmul>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4690      	mov	r8, r2
 8000da2:	4699      	mov	r9, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fb70 	bl	8000490 <__aeabi_f2d>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4640      	mov	r0, r8
 8000db6:	4649      	mov	r1, r9
 8000db8:	f7ff fbc2 	bl	8000540 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	f7ff fa06 	bl	80001d4 <__adddf3>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4614      	mov	r4, r2
 8000dce:	461d      	mov	r5, r3
 8000dd0:	7dfb      	ldrb	r3, [r7, #23]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	3354      	adds	r3, #84	; 0x54
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fb57 	bl	8000490 <__aeabi_f2d>
 8000de2:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 8000de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dea:	f7ff fba9 	bl	8000540 <__aeabi_dmul>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4690      	mov	r8, r2
 8000df4:	4699      	mov	r9, r3
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	3318      	adds	r3, #24
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fb44 	bl	8000490 <__aeabi_f2d>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	4649      	mov	r1, r9
 8000e10:	f7ff fb96 	bl	8000540 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	a3fc      	add	r3, pc, #1008	; (adr r3, 8001210 <_ZN9MotorCtrl6updateEmPh+0x640>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff fb8d 	bl	8000540 <__aeabi_dmul>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e36:	f7ff fcad 	bl	8000794 <__aeabi_ddiv>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4620      	mov	r0, r4
 8000e40:	4629      	mov	r1, r5
 8000e42:	f7ff f9c7 	bl	80001d4 <__adddf3>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4614      	mov	r4, r2
 8000e4c:	461d      	mov	r5, r3
 8000e4e:	7dfb      	ldrb	r3, [r7, #23]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	335c      	adds	r3, #92	; 0x5c
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fb18 	bl	8000490 <__aeabi_f2d>
 8000e60:	a3ed      	add	r3, pc, #948	; (adr r3, 8001218 <_ZN9MotorCtrl6updateEmPh+0x648>)
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	f7ff fb6b 	bl	8000540 <__aeabi_dmul>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4690      	mov	r8, r2
 8000e70:	4699      	mov	r9, r3
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	ed93 7a6c 	vldr	s14, [r3, #432]	; 0x1b0
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	3328      	adds	r3, #40	; 0x28
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	edd3 7a00 	vldr	s15, [r3]
 8000e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e8a:	ee17 0a90 	vmov	r0, s15
 8000e8e:	f7ff faff 	bl	8000490 <__aeabi_f2d>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4640      	mov	r0, r8
 8000e98:	4649      	mov	r1, r9
 8000e9a:	f7ff fb51 	bl	8000540 <__aeabi_dmul>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	a3da      	add	r3, pc, #872	; (adr r3, 8001210 <_ZN9MotorCtrl6updateEmPh+0x640>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f7ff fc72 	bl	8000794 <__aeabi_ddiv>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec0:	f7ff fc68 	bl	8000794 <__aeabi_ddiv>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4620      	mov	r0, r4
 8000eca:	4629      	mov	r1, r5
 8000ecc:	f7ff f982 	bl	80001d4 <__adddf3>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	7dfc      	ldrb	r4, [r7, #23]
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f7ff fd43 	bl	8000964 <__aeabi_d2f>
 8000ede:	4601      	mov	r1, r0
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	f104 0308 	add.w	r3, r4, #8
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	6019      	str	r1, [r3, #0]
		param.e_pre[number] = e;
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	f8d2 21b0 	ldr.w	r2, [r2, #432]	; 0x1b0
 8000ef4:	68f9      	ldr	r1, [r7, #12]
 8000ef6:	3328      	adds	r3, #40	; 0x28
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	601a      	str	r2, [r3, #0]
	}
	if(param.mode[number] == Mode::pos){
 8000efe:	7dfa      	ldrb	r2, [r7, #23]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	f040 8176 	bne.w	80011f8 <_ZN9MotorCtrl6updateEmPh+0x628>
//		if(param.mechanical_angle[number] >= 0){
//			param.revolution[number] = param.mechanical_angle[number] + 360*static_cast<uint32_t>((param.revolution[number] + param.velocity[number]*360/(2*3.141592)*0.001)/360);
//		}else{
//			param.revolution[number] = param.mechanical_angle[number] + 360*(static_cast<uint32_t>((param.revolution[number] + param.velocity[number]*360/(2*3.141592)*0.001)/360)+1);
//		}
		param.revolution[number] = param.revolution[number] + param.velocity[number]*360/(2*3.141592)*0.001;
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	3364      	adds	r3, #100	; 0x64
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fab9 	bl	8000490 <__aeabi_f2d>
 8000f1e:	4604      	mov	r4, r0
 8000f20:	460d      	mov	r5, r1
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	3338      	adds	r3, #56	; 0x38
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	edd3 7a00 	vldr	s15, [r3]
 8000f30:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8001220 <_ZN9MotorCtrl6updateEmPh+0x650>
 8000f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f38:	ee17 0a90 	vmov	r0, s15
 8000f3c:	f7ff faa8 	bl	8000490 <__aeabi_f2d>
 8000f40:	a3b1      	add	r3, pc, #708	; (adr r3, 8001208 <_ZN9MotorCtrl6updateEmPh+0x638>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fc25 	bl	8000794 <__aeabi_ddiv>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	a3af      	add	r3, pc, #700	; (adr r3, 8001210 <_ZN9MotorCtrl6updateEmPh+0x640>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f7ff faf2 	bl	8000540 <__aeabi_dmul>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4620      	mov	r0, r4
 8000f62:	4629      	mov	r1, r5
 8000f64:	f7ff f936 	bl	80001d4 <__adddf3>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	7dfc      	ldrb	r4, [r7, #23]
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f7ff fcf7 	bl	8000964 <__aeabi_d2f>
 8000f76:	4601      	mov	r1, r0
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	6019      	str	r1, [r3, #0]
		e = param.target[number] - param.revolution[number];
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	3310      	adds	r3, #16
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	ed93 7a00 	vldr	s14, [r3]
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	3364      	adds	r3, #100	; 0x64
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	edd3 7a00 	vldr	s15, [r3]
 8000fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	edc3 7a6c 	vstr	s15, [r3, #432]	; 0x1b0
		param.ie[number] = param.ie[number] + e*0.001;
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	3318      	adds	r3, #24
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fa6a 	bl	8000490 <__aeabi_f2d>
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	460d      	mov	r5, r1
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa62 	bl	8000490 <__aeabi_f2d>
 8000fcc:	a390      	add	r3, pc, #576	; (adr r3, 8001210 <_ZN9MotorCtrl6updateEmPh+0x640>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fab5 	bl	8000540 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4620      	mov	r0, r4
 8000fdc:	4629      	mov	r1, r5
 8000fde:	f7ff f8f9 	bl	80001d4 <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	7dfc      	ldrb	r4, [r7, #23]
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fcba 	bl	8000964 <__aeabi_d2f>
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	f104 0318 	add.w	r3, r4, #24
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	6019      	str	r1, [r3, #0]
		if(param.ie[number]>param.limitIe[number]){
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	3318      	adds	r3, #24
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	ed93 7a00 	vldr	s14, [r3]
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	3320      	adds	r3, #32
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	edd3 7a00 	vldr	s15, [r3]
 800101a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001022:	dd0c      	ble.n	800103e <_ZN9MotorCtrl6updateEmPh+0x46e>
			param.ie[number] = param.limitIe[number];
 8001024:	7dfa      	ldrb	r2, [r7, #23]
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	68f9      	ldr	r1, [r7, #12]
 800102a:	3220      	adds	r2, #32
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	440a      	add	r2, r1
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	68f9      	ldr	r1, [r7, #12]
 8001034:	3318      	adds	r3, #24
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	e024      	b.n	8001088 <_ZN9MotorCtrl6updateEmPh+0x4b8>
		}else if(param.ie[number]<-1*param.limitIe[number]){
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	3318      	adds	r3, #24
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	3320      	adds	r3, #32
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	eef1 7a67 	vneg.f32	s15, s15
 800105e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001066:	d50f      	bpl.n	8001088 <_ZN9MotorCtrl6updateEmPh+0x4b8>
			param.ie[number] = -1*param.limitIe[number];
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	3320      	adds	r3, #32
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	edd3 7a00 	vldr	s15, [r3]
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	eef1 7a67 	vneg.f32	s15, s15
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	3318      	adds	r3, #24
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	edc3 7a00 	vstr	s15, [r3]
		}
		param.goal[number] = param.Kp[number]*0.0001*e+param.Ki[number]*0.0001*param.ie[number]*0.001/2+(param.Kd[number]*0.0001*(e-param.e_pre[number])/0.001)/2;
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	334c      	adds	r3, #76	; 0x4c
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f9fb 	bl	8000490 <__aeabi_f2d>
 800109a:	a35f      	add	r3, pc, #380	; (adr r3, 8001218 <_ZN9MotorCtrl6updateEmPh+0x648>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fa4e 	bl	8000540 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4614      	mov	r4, r2
 80010aa:	461d      	mov	r5, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f9ec 	bl	8000490 <__aeabi_f2d>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4620      	mov	r0, r4
 80010be:	4629      	mov	r1, r5
 80010c0:	f7ff fa3e 	bl	8000540 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4614      	mov	r4, r2
 80010ca:	461d      	mov	r5, r3
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	3354      	adds	r3, #84	; 0x54
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f9d9 	bl	8000490 <__aeabi_f2d>
 80010de:	a34e      	add	r3, pc, #312	; (adr r3, 8001218 <_ZN9MotorCtrl6updateEmPh+0x648>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff fa2c 	bl	8000540 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4690      	mov	r8, r2
 80010ee:	4699      	mov	r9, r3
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	3318      	adds	r3, #24
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f9c7 	bl	8000490 <__aeabi_f2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4640      	mov	r0, r8
 8001108:	4649      	mov	r1, r9
 800110a:	f7ff fa19 	bl	8000540 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	a33e      	add	r3, pc, #248	; (adr r3, 8001210 <_ZN9MotorCtrl6updateEmPh+0x640>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fa10 	bl	8000540 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001130:	f7ff fb30 	bl	8000794 <__aeabi_ddiv>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4620      	mov	r0, r4
 800113a:	4629      	mov	r1, r5
 800113c:	f7ff f84a 	bl	80001d4 <__adddf3>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4614      	mov	r4, r2
 8001146:	461d      	mov	r5, r3
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	335c      	adds	r3, #92	; 0x5c
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f99b 	bl	8000490 <__aeabi_f2d>
 800115a:	a32f      	add	r3, pc, #188	; (adr r3, 8001218 <_ZN9MotorCtrl6updateEmPh+0x648>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff f9ee 	bl	8000540 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4690      	mov	r8, r2
 800116a:	4699      	mov	r9, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	ed93 7a6c 	vldr	s14, [r3, #432]	; 0x1b0
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	3328      	adds	r3, #40	; 0x28
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	ee17 0a90 	vmov	r0, s15
 8001188:	f7ff f982 	bl	8000490 <__aeabi_f2d>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4640      	mov	r0, r8
 8001192:	4649      	mov	r1, r9
 8001194:	f7ff f9d4 	bl	8000540 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	a31b      	add	r3, pc, #108	; (adr r3, 8001210 <_ZN9MotorCtrl6updateEmPh+0x640>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff faf5 	bl	8000794 <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ba:	f7ff faeb 	bl	8000794 <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4620      	mov	r0, r4
 80011c4:	4629      	mov	r1, r5
 80011c6:	f7ff f805 	bl	80001d4 <__adddf3>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	7dfc      	ldrb	r4, [r7, #23]
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fbc6 	bl	8000964 <__aeabi_d2f>
 80011d8:	4601      	mov	r1, r0
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	f104 0308 	add.w	r3, r4, #8
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	6019      	str	r1, [r3, #0]
		param.e_pre[number] = e;
 80011e6:	7dfb      	ldrb	r3, [r7, #23]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	f8d2 21b0 	ldr.w	r2, [r2, #432]	; 0x1b0
 80011ee:	68f9      	ldr	r1, [r7, #12]
 80011f0:	3328      	adds	r3, #40	; 0x28
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	601a      	str	r2, [r3, #0]
	}
	if(param.mode[number] == Mode::hom){

	}
	return true;
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001204:	f3af 8000 	nop.w
 8001208:	fc8b007a 	.word	0xfc8b007a
 800120c:	401921fa 	.word	0x401921fa
 8001210:	d2f1a9fc 	.word	0xd2f1a9fc
 8001214:	3f50624d 	.word	0x3f50624d
 8001218:	eb1c432d 	.word	0xeb1c432d
 800121c:	3f1a36e2 	.word	0x3f1a36e2
 8001220:	43b40000 	.word	0x43b40000

08001224 <_ZN9MotorCtrl5resetEh>:

void MotorCtrl::reset(uint8_t i){
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
		value1[i]=0;
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	2200      	movs	r2, #0
 8001238:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
		value2[i]=0;
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	2200      	movs	r2, #0
 8001244:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
		param.target[i]=0;
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	3310      	adds	r3, #16
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
		param.mode[i]=Mode::dis;
 8001258:	78fa      	ldrb	r2, [r7, #3]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2100      	movs	r1, #0
 800125e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		param.goal[i]=0;
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	3308      	adds	r3, #8
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
		param.e_pre[i]=0;
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	3328      	adds	r3, #40	; 0x28
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
		param.ie[i]=0;
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	3318      	adds	r3, #24
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
		param.revolution[i]=0;
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	3364      	adds	r3, #100	; 0x64
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_ZN9MotorCtrl7setModeEPh>:

void MotorCtrl::setMode(uint8_t usb_msg[]){
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
	for(int i = 0;i<8;i++){
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	e04d      	b.n	800135a <_ZN9MotorCtrl7setModeEPh+0xac>
		if(usb_msg[i+1]==0){
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3301      	adds	r3, #1
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10b      	bne.n	80012e4 <_ZN9MotorCtrl7setModeEPh+0x36>
			param.mode[i] = Mode::dis;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	2100      	movs	r1, #0
 80012d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			reset(i);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4619      	mov	r1, r3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ffa1 	bl	8001224 <_ZN9MotorCtrl5resetEh>
 80012e2:	e037      	b.n	8001354 <_ZN9MotorCtrl7setModeEPh+0xa6>
		}else if(usb_msg[i+1]==1){
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3301      	adds	r3, #1
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d10b      	bne.n	800130a <_ZN9MotorCtrl7setModeEPh+0x5c>
			param.mode[i] = Mode::vel;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	2101      	movs	r1, #1
 80012f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			reset(i);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4619      	mov	r1, r3
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff8e 	bl	8001224 <_ZN9MotorCtrl5resetEh>
 8001308:	e024      	b.n	8001354 <_ZN9MotorCtrl7setModeEPh+0xa6>
		}else if(usb_msg[i+1]==2){
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3301      	adds	r3, #1
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d10b      	bne.n	8001330 <_ZN9MotorCtrl7setModeEPh+0x82>
			param.mode[i] = Mode::pos;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	2102      	movs	r1, #2
 800131e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			//param.revolution[i] = param.mechanical_angle[i] - 180.0f;
			reset(i);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4619      	mov	r1, r3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff7b 	bl	8001224 <_ZN9MotorCtrl5resetEh>
 800132e:	e011      	b.n	8001354 <_ZN9MotorCtrl7setModeEPh+0xa6>
		}else if(usb_msg[i+1]==3){
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3301      	adds	r3, #1
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d10a      	bne.n	8001354 <_ZN9MotorCtrl7setModeEPh+0xa6>
			param.mode[i] = Mode::hom;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	2103      	movs	r1, #3
 8001344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			reset(i);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4619      	mov	r1, r3
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ff68 	bl	8001224 <_ZN9MotorCtrl5resetEh>
	for(int i = 0;i<8;i++){
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3301      	adds	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b07      	cmp	r3, #7
 800135e:	ddae      	ble.n	80012be <_ZN9MotorCtrl7setModeEPh+0x10>
		}
	}
	if(usb_msg[8] == 1){
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	3308      	adds	r3, #8
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d104      	bne.n	8001374 <_ZN9MotorCtrl7setModeEPh+0xc6>
		diag=1;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	}else if(usb_msg[8] == 1){
		diag=0;
	}
}
 8001372:	e008      	b.n	8001386 <_ZN9MotorCtrl7setModeEPh+0xd8>
	}else if(usb_msg[8] == 1){
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	3308      	adds	r3, #8
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d103      	bne.n	8001386 <_ZN9MotorCtrl7setModeEPh+0xd8>
		diag=0;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_ZN9MotorCtrl12setLimitTempEPh>:

void MotorCtrl::setLimitTemp(uint8_t usb_msg[]){
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
	for(int i = 0;i<8;i++){
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e00d      	b.n	80013ba <_ZN9MotorCtrl12setLimitTempEPh+0x2c>
		param.limitTemp[i]=usb_msg[i];
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	7819      	ldrb	r1, [r3, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013b0:	460a      	mov	r2, r1
 80013b2:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<8;i++){
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3301      	adds	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2b07      	cmp	r3, #7
 80013be:	ddee      	ble.n	800139e <_ZN9MotorCtrl12setLimitTempEPh+0x10>
	}
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_ZN9MotorCtrl9setTargetEPh>:

void MotorCtrl::setTarget(uint8_t usb_msg[]){
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	e028      	b.n	8001430 <_ZN9MotorCtrl9setTargetEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	3301      	adds	r3, #1
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	061a      	lsls	r2, r3, #24
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	6839      	ldr	r1, [r7, #0]
 80013f4:	440b      	add	r3, r1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	041b      	lsls	r3, r3, #16
 80013fa:	431a      	orrs	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	3303      	adds	r3, #3
 8001402:	6839      	ldr	r1, [r7, #0]
 8001404:	440b      	add	r3, r1
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	4313      	orrs	r3, r2
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	3204      	adds	r2, #4
 8001412:	6839      	ldr	r1, [r7, #0]
 8001414:	440a      	add	r2, r1
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	4313      	orrs	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.target[i],&buf,1);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	7a3a      	ldrb	r2, [r7, #8]
 8001428:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3301      	adds	r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b07      	cmp	r3, #7
 8001434:	ddd3      	ble.n	80013de <_ZN9MotorCtrl9setTargetEPh+0x10>
	}
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_ZN9MotorCtrl5setKpEPh>:

void MotorCtrl::setKp(uint8_t usb_msg[]){
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	e028      	b.n	80014a6 <_ZN9MotorCtrl5setKpEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	3301      	adds	r3, #1
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	061a      	lsls	r2, r3, #24
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	6839      	ldr	r1, [r7, #0]
 800146a:	440b      	add	r3, r1
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	041b      	lsls	r3, r3, #16
 8001470:	431a      	orrs	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	3303      	adds	r3, #3
 8001478:	6839      	ldr	r1, [r7, #0]
 800147a:	440b      	add	r3, r1
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	4313      	orrs	r3, r2
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	0092      	lsls	r2, r2, #2
 8001486:	3204      	adds	r2, #4
 8001488:	6839      	ldr	r1, [r7, #0]
 800148a:	440a      	add	r2, r1
 800148c:	7812      	ldrb	r2, [r2, #0]
 800148e:	4313      	orrs	r3, r2
 8001490:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.Kp[i],&buf,1);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	334c      	adds	r3, #76	; 0x4c
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	7a3a      	ldrb	r2, [r7, #8]
 800149e:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3301      	adds	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b07      	cmp	r3, #7
 80014aa:	ddd3      	ble.n	8001454 <_ZN9MotorCtrl5setKpEPh+0x10>
	}
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_ZN9MotorCtrl5setKiEPh>:

void MotorCtrl::setKi(uint8_t usb_msg[]){
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	e028      	b.n	800151c <_ZN9MotorCtrl5setKiEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	3301      	adds	r3, #1
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	061a      	lsls	r2, r3, #24
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	6839      	ldr	r1, [r7, #0]
 80014e0:	440b      	add	r3, r1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	431a      	orrs	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	3303      	adds	r3, #3
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	440b      	add	r3, r1
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	4313      	orrs	r3, r2
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	3204      	adds	r2, #4
 80014fe:	6839      	ldr	r1, [r7, #0]
 8001500:	440a      	add	r2, r1
 8001502:	7812      	ldrb	r2, [r2, #0]
 8001504:	4313      	orrs	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.Ki[i],&buf,1);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3354      	adds	r3, #84	; 0x54
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	7a3a      	ldrb	r2, [r7, #8]
 8001514:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3301      	adds	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b07      	cmp	r3, #7
 8001520:	ddd3      	ble.n	80014ca <_ZN9MotorCtrl5setKiEPh+0x10>
	}
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_ZN9MotorCtrl5setKdEPh>:

void MotorCtrl::setKd(uint8_t usb_msg[]){
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e028      	b.n	8001592 <_ZN9MotorCtrl5setKdEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	3301      	adds	r3, #1
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	4413      	add	r3, r2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	061a      	lsls	r2, r3, #24
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	440b      	add	r3, r1
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	041b      	lsls	r3, r3, #16
 800155c:	431a      	orrs	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	3303      	adds	r3, #3
 8001564:	6839      	ldr	r1, [r7, #0]
 8001566:	440b      	add	r3, r1
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	4313      	orrs	r3, r2
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	0092      	lsls	r2, r2, #2
 8001572:	3204      	adds	r2, #4
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	440a      	add	r2, r1
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.Kp[i],&buf,1);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	334c      	adds	r3, #76	; 0x4c
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	7a3a      	ldrb	r2, [r7, #8]
 800158a:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3301      	adds	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b07      	cmp	r3, #7
 8001596:	ddd3      	ble.n	8001540 <_ZN9MotorCtrl5setKdEPh+0x10>
	}
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_ZN9MotorCtrl10setLimitIeEPh>:

void MotorCtrl::setLimitIe(uint8_t usb_msg[]){
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e028      	b.n	8001608 <_ZN9MotorCtrl10setLimitIeEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	3301      	adds	r3, #1
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	061a      	lsls	r2, r3, #24
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	3302      	adds	r3, #2
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	440b      	add	r3, r1
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	3303      	adds	r3, #3
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	440b      	add	r3, r1
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	4313      	orrs	r3, r2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	3204      	adds	r2, #4
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	440a      	add	r2, r1
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.limitIe[i],&buf,1);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3320      	adds	r3, #32
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	7a3a      	ldrb	r2, [r7, #8]
 8001600:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3301      	adds	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b07      	cmp	r3, #7
 800160c:	ddd3      	ble.n	80015b6 <_ZN9MotorCtrl10setLimitIeEPh+0x10>
	}
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_Z11changeValuef>:

uint16_t changeValue(float target){
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t value;
	if(target < 0.0){
 8001626:	edd7 7a01 	vldr	s15, [r7, #4]
 800162a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d528      	bpl.n	8001686 <_Z11changeValuef+0x6a>
		target = -target;
 8001634:	edd7 7a01 	vldr	s15, [r7, #4]
 8001638:	eef1 7a67 	vneg.f32	s15, s15
 800163c:	edc7 7a01 	vstr	s15, [r7, #4]
		if(target < 20.0){
 8001640:	edd7 7a01 	vldr	s15, [r7, #4]
 8001644:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	d512      	bpl.n	8001678 <_Z11changeValuef+0x5c>
			value = target/20*16384;
 8001652:	ed97 7a01 	vldr	s14, [r7, #4]
 8001656:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800165a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800165e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80016cc <_Z11changeValuef+0xb0>
 8001662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166a:	ee17 3a90 	vmov	r3, s15
 800166e:	81fb      	strh	r3, [r7, #14]
			value =~ value;
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	43db      	mvns	r3, r3
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	e022      	b.n	80016be <_Z11changeValuef+0xa2>
		}else{
			value = 16384;
 8001678:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800167c:	81fb      	strh	r3, [r7, #14]
			value =~ value;
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	43db      	mvns	r3, r3
 8001682:	81fb      	strh	r3, [r7, #14]
 8001684:	e01b      	b.n	80016be <_Z11changeValuef+0xa2>
		}
	}else{
		if(target < 20.0){
 8001686:	edd7 7a01 	vldr	s15, [r7, #4]
 800168a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800168e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001696:	d50f      	bpl.n	80016b8 <_Z11changeValuef+0x9c>
			value = target/20*16384;
 8001698:	ed97 7a01 	vldr	s14, [r7, #4]
 800169c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80016a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80016cc <_Z11changeValuef+0xb0>
 80016a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b0:	ee17 3a90 	vmov	r3, s15
 80016b4:	81fb      	strh	r3, [r7, #14]
 80016b6:	e002      	b.n	80016be <_Z11changeValuef+0xa2>
		}else{
			value = 16384;
 80016b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016bc:	81fb      	strh	r3, [r7, #14]
		}
	}
	return value;
 80016be:	89fb      	ldrh	r3, [r7, #14]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	46800000 	.word	0x46800000

080016d0 <_ZN9MotorCtrl9transmit1Ev>:

void MotorCtrl::transmit1(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	for(int i=0;i<4;i++){
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	e04d      	b.n	800177a <_ZN9MotorCtrl9transmit1Ev+0xaa>
		if(param.temp[i] < param.limitTemp[i]){
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	440b      	add	r3, r1
 80016f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d22c      	bcs.n	8001754 <_ZN9MotorCtrl9transmit1Ev+0x84>
			value1[2*i] = static_cast<uint8_t>(changeValue(param.goal[i]) >> 8);
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3308      	adds	r3, #8
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	eeb0 0a67 	vmov.f32	s0, s15
 800170c:	f7ff ff86 	bl	800161c <_Z11changeValuef>
 8001710:	4603      	mov	r3, r0
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	b2d1      	uxtb	r1, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	460a      	mov	r2, r1
 8001722:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
			value1[2*i+1] = static_cast<uint8_t>(changeValue(param.goal[i]) & 0xFF);
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3308      	adds	r3, #8
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	eeb0 0a67 	vmov.f32	s0, s15
 8001738:	f7ff ff70 	bl	800161c <_Z11changeValuef>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	3301      	adds	r3, #1
 8001746:	b2d1      	uxtb	r1, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	460a      	mov	r2, r1
 800174e:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
 8001752:	e00f      	b.n	8001774 <_ZN9MotorCtrl9transmit1Ev+0xa4>
		}else{
			for(int i = 0;i<8;i++){
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	e009      	b.n	800176e <_ZN9MotorCtrl9transmit1Ev+0x9e>
				value1[i]=0;
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
			for(int i = 0;i<8;i++){
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	3301      	adds	r3, #1
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b07      	cmp	r3, #7
 8001772:	ddf2      	ble.n	800175a <_ZN9MotorCtrl9transmit1Ev+0x8a>
	for(int i=0;i<4;i++){
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b03      	cmp	r3, #3
 800177e:	ddae      	ble.n	80016de <_ZN9MotorCtrl9transmit1Ev+0xe>
			}
		}
	}
	if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan))
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <_ZN9MotorCtrl9transmit1Ev+0xe4>)
 8001782:	f001 fad8 	bl	8002d36 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf14      	ite	ne
 800178c:	2301      	movne	r3, #1
 800178e:	2300      	moveq	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00a      	beq.n	80017ac <_ZN9MotorCtrl9transmit1Ev+0xdc>
	    {
	        led_on(can);
 8001796:	2000      	movs	r0, #0
 8001798:	f000 fa50 	bl	8001c3c <led_on>
	        HAL_CAN_AddTxMessage(&hcan, &TxHeader1, value1, &TxMailbox);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <_ZN9MotorCtrl9transmit1Ev+0xe8>)
 80017a4:	4905      	ldr	r1, [pc, #20]	; (80017bc <_ZN9MotorCtrl9transmit1Ev+0xec>)
 80017a6:	4803      	ldr	r0, [pc, #12]	; (80017b4 <_ZN9MotorCtrl9transmit1Ev+0xe4>)
 80017a8:	f001 f9f5 	bl	8002b96 <HAL_CAN_AddTxMessage>
	    }
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000214 	.word	0x20000214
 80017b8:	20000210 	.word	0x20000210
 80017bc:	20000450 	.word	0x20000450

080017c0 <_ZN9MotorCtrl9transmit2Ev>:

void MotorCtrl::transmit2(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	for(int i=4;i<8;i++){
 80017c8:	2304      	movs	r3, #4
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e065      	b.n	800189a <_ZN9MotorCtrl9transmit2Ev+0xda>
		if(param.temp[i] < param.limitTemp[i]){
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80017d8:	781a      	ldrb	r2, [r3, #0]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	440b      	add	r3, r1
 80017e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d22e      	bcs.n	8001848 <_ZN9MotorCtrl9transmit2Ev+0x88>
			value2[2*(i-4)] = static_cast<uint8_t>(changeValue(param.goal[i]) >> 8);
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3308      	adds	r3, #8
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eeb0 0a67 	vmov.f32	s0, s15
 80017fc:	f7ff ff0e 	bl	800161c <_Z11changeValuef>
 8001800:	4603      	mov	r3, r0
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	b29a      	uxth	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3b04      	subs	r3, #4
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	b2d1      	uxtb	r1, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	460a      	mov	r2, r1
 8001814:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
			value2[2*(i-4)+1] = static_cast<uint8_t>(changeValue(param.goal[i]) & 0xFF);
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3308      	adds	r3, #8
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	f7ff fef7 	bl	800161c <_Z11changeValuef>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3b04      	subs	r3, #4
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	3301      	adds	r3, #1
 800183a:	b2d1      	uxtb	r1, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	460a      	mov	r2, r1
 8001842:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
 8001846:	e00f      	b.n	8001868 <_ZN9MotorCtrl9transmit2Ev+0xa8>
		}else{
			for(int i = 0;i<8;i++){
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	e009      	b.n	8001862 <_ZN9MotorCtrl9transmit2Ev+0xa2>
				value2[i]=0;
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4413      	add	r3, r2
 8001854:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
			for(int i = 0;i<8;i++){
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	3301      	adds	r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b07      	cmp	r3, #7
 8001866:	ddf2      	ble.n	800184e <_ZN9MotorCtrl9transmit2Ev+0x8e>
			}
		}
	if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan))
 8001868:	4810      	ldr	r0, [pc, #64]	; (80018ac <_ZN9MotorCtrl9transmit2Ev+0xec>)
 800186a:	f001 fa64 	bl	8002d36 <HAL_CAN_GetTxMailboxesFreeLevel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf14      	ite	ne
 8001874:	2301      	movne	r3, #1
 8001876:	2300      	moveq	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00a      	beq.n	8001894 <_ZN9MotorCtrl9transmit2Ev+0xd4>
	    {
	        led_on(can);
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f9dc 	bl	8001c3c <led_on>
	        HAL_CAN_AddTxMessage(&hcan, &TxHeader2, value2, &TxMailbox);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f503 72de 	add.w	r2, r3, #444	; 0x1bc
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <_ZN9MotorCtrl9transmit2Ev+0xf0>)
 800188c:	4909      	ldr	r1, [pc, #36]	; (80018b4 <_ZN9MotorCtrl9transmit2Ev+0xf4>)
 800188e:	4807      	ldr	r0, [pc, #28]	; (80018ac <_ZN9MotorCtrl9transmit2Ev+0xec>)
 8001890:	f001 f981 	bl	8002b96 <HAL_CAN_AddTxMessage>
	for(int i=4;i<8;i++){
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b07      	cmp	r3, #7
 800189e:	dd96      	ble.n	80017ce <_ZN9MotorCtrl9transmit2Ev+0xe>
	    }
}
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000214 	.word	0x20000214
 80018b0:	20000210 	.word	0x20000210
 80018b4:	20000468 	.word	0x20000468

080018b8 <_ZN9MotorCtrl3emsEv>:

void MotorCtrl::ems(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	uint8_t value3[8] = {0,0,0,0,0,0,0,0};
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <_ZN9MotorCtrl3emsEv+0x40>)
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ca:	e883 0003 	stmia.w	r3, {r0, r1}
	led_on(can);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 f9b4 	bl	8001c3c <led_on>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader1, value3, &TxMailbox);
 80018d4:	f107 0208 	add.w	r2, r7, #8
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <_ZN9MotorCtrl3emsEv+0x44>)
 80018da:	4909      	ldr	r1, [pc, #36]	; (8001900 <_ZN9MotorCtrl3emsEv+0x48>)
 80018dc:	4809      	ldr	r0, [pc, #36]	; (8001904 <_ZN9MotorCtrl3emsEv+0x4c>)
 80018de:	f001 f95a 	bl	8002b96 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader2, value3, &TxMailbox);
 80018e2:	f107 0208 	add.w	r2, r7, #8
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <_ZN9MotorCtrl3emsEv+0x44>)
 80018e8:	4907      	ldr	r1, [pc, #28]	; (8001908 <_ZN9MotorCtrl3emsEv+0x50>)
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <_ZN9MotorCtrl3emsEv+0x4c>)
 80018ec:	f001 f953 	bl	8002b96 <HAL_CAN_AddTxMessage>
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	0800c610 	.word	0x0800c610
 80018fc:	20000210 	.word	0x20000210
 8001900:	20000450 	.word	0x20000450
 8001904:	20000214 	.word	0x20000214
 8001908:	20000468 	.word	0x20000468

0800190c <cobs_encode>:
#ifdef __cplusplus
extern "C"
{
#endif
    inline void cobs_encode(const uint8_t data[], uint8_t return_data[], int data_size)
    {
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
        int zero_index = data_size + 1; // this is return_data index
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
        return_data[zero_index] = 0x00;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	4413      	add	r3, r2
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
        for (int i = data_size; i > 0; i--)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	e01f      	b.n	800196e <cobs_encode+0x62>
        {
            if (data[i - 1] == 0x00)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	3b01      	subs	r3, #1
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10c      	bne.n	8001956 <cobs_encode+0x4a>
            {
                return_data[i] = (uint8_t)(zero_index - i);
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	b2d9      	uxtb	r1, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	68b8      	ldr	r0, [r7, #8]
 8001948:	4403      	add	r3, r0
 800194a:	1a8a      	subs	r2, r1, r2
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	701a      	strb	r2, [r3, #0]
                zero_index = i;
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e008      	b.n	8001968 <cobs_encode+0x5c>
            }
            else
            {
                return_data[i] = data[i - 1];
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	3b01      	subs	r3, #1
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	441a      	add	r2, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	440b      	add	r3, r1
 8001964:	7812      	ldrb	r2, [r2, #0]
 8001966:	701a      	strb	r2, [r3, #0]
        for (int i = data_size; i > 0; i--)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	3b01      	subs	r3, #1
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	dcdc      	bgt.n	800192e <cobs_encode+0x22>
            }
        }
        return_data[0] = zero_index;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	701a      	strb	r2, [r3, #0]
    }
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <usb_process>:
void usb_to_can(uint8_t usb_msg[], const uint8_t len);
void robomaster(uint8_t usb_msg[], const uint8_t len);

// it process  all usb messages
void usb_process(uint8_t usb_msg[], const uint8_t len)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
    ... : some data
    */

    // if you want to add new command, you can add it here
    // attention: it is called in interrupt, so it should be short
    switch (usb_msg[0] >> 4)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b03      	cmp	r3, #3
 800199e:	d010      	beq.n	80019c2 <usb_process+0x3a>
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	dc13      	bgt.n	80019cc <usb_process+0x44>
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <usb_process+0x26>
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d006      	beq.n	80019ba <usb_process+0x32>
    case 0x03: //robomaster_set_parameter
    {
    	robomaster(usb_msg, len);
    }
    default:
        break;
 80019ac:	e00e      	b.n	80019cc <usb_process+0x44>
        usb_to_can(usb_msg, len);
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	4619      	mov	r1, r3
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f888 	bl	8001ac8 <_Z10usb_to_canPhh>
    break;
 80019b8:	e009      	b.n	80019ce <usb_process+0x46>
        CDC_Transmit_FS(HelloSLCAN_encoded, 11 + 2);
 80019ba:	210d      	movs	r1, #13
 80019bc:	4806      	ldr	r0, [pc, #24]	; (80019d8 <usb_process+0x50>)
 80019be:	f00a f9cb 	bl	800bd58 <CDC_Transmit_FS>
    	robomaster(usb_msg, len);
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f8f0 	bl	8001bac <_Z10robomasterPhh>
        break;
 80019cc:	bf00      	nop
    }
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000000 	.word	0x20000000

080019dc <can_process>:

// it process all can messages
// the Data is used for USB buffer. can_process set header information to Data[0~5].
// It is a terrible code. Sorry for hard work to read the code.
void can_process(const CAN_RxHeaderTypeDef *RxHeader, uint8_t Data[])
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
    uint8_t id[4] : can id
    uint8_t dlc : data length
    uint8_t data[8] : data (it is pre-writtten.)
    */

    if (RxHeader->IDE == CAN_ID_STD)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d11e      	bne.n	8001a2c <can_process+0x50>
    {
        // standard id
        Data[1] = (RxHeader->StdId >> 24) & 0xFF;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0e1a      	lsrs	r2, r3, #24
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	701a      	strb	r2, [r3, #0]
        Data[2] = (RxHeader->StdId >> 16) & 0xFF;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0c1a      	lsrs	r2, r3, #16
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	3302      	adds	r3, #2
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]
        Data[3] = (RxHeader->StdId >> 8) & 0xFF;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0a1a      	lsrs	r2, r3, #8
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	3303      	adds	r3, #3
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	701a      	strb	r2, [r3, #0]
        Data[4] = (RxHeader->StdId >> 0) & 0xFF;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	701a      	strb	r2, [r3, #0]

        // is_extended not set
        Data[0] = 0x00;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	e01d      	b.n	8001a68 <can_process+0x8c>
    }
    else
    {
        // extended id
        Data[1] = (RxHeader->ExtId >> 24) & 0xFF;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	0e1a      	lsrs	r2, r3, #24
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]
        Data[2] = (RxHeader->ExtId >> 16) & 0xFF;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	0c1a      	lsrs	r2, r3, #16
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	3302      	adds	r3, #2
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	701a      	strb	r2, [r3, #0]
        Data[3] = (RxHeader->ExtId >> 8) & 0xFF;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	0a1a      	lsrs	r2, r3, #8
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3303      	adds	r3, #3
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
        Data[4] = (RxHeader->ExtId >> 0) & 0xFF;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]

        // is_extended set
        Data[0] = 0x1 << 1;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2202      	movs	r2, #2
 8001a66:	701a      	strb	r2, [r3, #0]
    }

    // is_rtr
    if (RxHeader->RTR == CAN_RTR_REMOTE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d106      	bne.n	8001a7e <can_process+0xa2>
    {
        Data[0] |= 0x1 << 2;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	701a      	strb	r2, [r3, #0]

    // is_error
    //?

    // dlc
    Data[5] = RxHeader->DLC;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	3305      	adds	r3, #5
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

    // encode data
    uint8_t encoded_data[14 + 2];

    cobs_encode(Data, encoded_data, 14);
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	220e      	movs	r2, #14
 8001a90:	4619      	mov	r1, r3
 8001a92:	6838      	ldr	r0, [r7, #0]
 8001a94:	f7ff ff3a 	bl	800190c <cobs_encode>
    led_on(green);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f000 f8cf 	bl	8001c3c <led_on>
    if (CDC_Transmit_FS(encoded_data, 14 + 2) == USBD_OK)
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	2110      	movs	r1, #16
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00a f957 	bl	800bd58 <CDC_Transmit_FS>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <can_process+0xe4>
    {
        led_on(green);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f000 f8be 	bl	8001c3c <led_on>
    }
    else
    {
        // transmit fail
    }
}
 8001ac0:	bf00      	nop
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_Z10usb_to_canPhh>:

CAN_TxHeaderTypeDef TxHeader;
uint32_t TxMailbox;
// it process usb messages to normal can messages
void usb_to_can(uint8_t usb_msg[], const uint8_t len)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
    uint8_t command & frame_type: (command: if it is normal can frame, it is 0x00.)<<4 | is_rtr << 2 | is_extended << 1 | is_error
    uint8_t id[4] : can id
    uint8_t dlc : data length
    uint8_t data[8] : data
    */
    if (usb_msg[0] & 0x02)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d018      	beq.n	8001b12 <_Z10usb_to_canPhh+0x4a>
    {
        // extended id
        TxHeader.IDE = CAN_ID_EXT;
 8001ae0:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <_Z10usb_to_canPhh+0xd8>)
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	609a      	str	r2, [r3, #8]
        TxHeader.ExtId = (usb_msg[1] << 24) | (usb_msg[2] << 16) | (usb_msg[3] << 8) | (usb_msg[4] << 0);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	061a      	lsls	r2, r3, #24
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3302      	adds	r3, #2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3303      	adds	r3, #3
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	4313      	orrs	r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	3204      	adds	r2, #4
 8001b06:	7812      	ldrb	r2, [r2, #0]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <_Z10usb_to_canPhh+0xd8>)
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	e017      	b.n	8001b42 <_Z10usb_to_canPhh+0x7a>
    }
    else
    {
        // standard id
        TxHeader.IDE = CAN_ID_STD;
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <_Z10usb_to_canPhh+0xd8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
        TxHeader.StdId = (usb_msg[1] << 24) | (usb_msg[2] << 16) | (usb_msg[3] << 8) | (usb_msg[4] << 0);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	061a      	lsls	r2, r3, #24
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3302      	adds	r3, #2
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	4313      	orrs	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	3204      	adds	r2, #4
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <_Z10usb_to_canPhh+0xd8>)
 8001b40:	601a      	str	r2, [r3, #0]
    }

    // is_rtr
    if (usb_msg[0] & 0x04)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <_Z10usb_to_canPhh+0x8e>
    {
        TxHeader.RTR = CAN_RTR_REMOTE;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <_Z10usb_to_canPhh+0xd8>)
 8001b50:	2202      	movs	r2, #2
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	e002      	b.n	8001b5c <_Z10usb_to_canPhh+0x94>
    }
    else
    {
        TxHeader.RTR = CAN_RTR_DATA;
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <_Z10usb_to_canPhh+0xd8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]
    }

    // is_error
    //?

    TxHeader.TransmitGlobalTime = DISABLE;
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_Z10usb_to_canPhh+0xd8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	751a      	strb	r2, [r3, #20]
    // dlc
    TxHeader.DLC = usb_msg[5];
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3305      	adds	r3, #5
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <_Z10usb_to_canPhh+0xd8>)
 8001b6c:	611a      	str	r2, [r3, #16]

    if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan))
 8001b6e:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <_Z10usb_to_canPhh+0xdc>)
 8001b70:	f001 f8e1 	bl	8002d36 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf14      	ite	ne
 8001b7a:	2301      	movne	r3, #1
 8001b7c:	2300      	moveq	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <_Z10usb_to_canPhh+0xd0>
    {
        led_on(can);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f000 f859 	bl	8001c3c <led_on>
        HAL_CAN_AddTxMessage(&hcan, &TxHeader, usb_msg + 6, &TxMailbox);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	1d9a      	adds	r2, r3, #6
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <_Z10usb_to_canPhh+0xe0>)
 8001b90:	4903      	ldr	r1, [pc, #12]	; (8001ba0 <_Z10usb_to_canPhh+0xd8>)
 8001b92:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <_Z10usb_to_canPhh+0xdc>)
 8001b94:	f000 ffff 	bl	8002b96 <HAL_CAN_AddTxMessage>
    }
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200001f8 	.word	0x200001f8
 8001ba4:	20000214 	.word	0x20000214
 8001ba8:	20000210 	.word	0x20000210

08001bac <_Z10robomasterPhh>:

void robomaster(uint8_t usb_msg[], const uint8_t len){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70fb      	strb	r3, [r7, #3]
	// data structure
	/*
	uint8_t command & prosess_id: (command: if it is normal can frame,
	uint8_t data[8or9or32] : data
    */
	switch (usb_msg[0] & 0x0f){
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	2b06      	cmp	r3, #6
 8001bc2:	d834      	bhi.n	8001c2e <_Z10robomasterPhh+0x82>
 8001bc4:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <_Z10robomasterPhh+0x20>)
 8001bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bca:	bf00      	nop
 8001bcc:	08001be9 	.word	0x08001be9
 8001bd0:	08001bf3 	.word	0x08001bf3
 8001bd4:	08001bfd 	.word	0x08001bfd
 8001bd8:	08001c07 	.word	0x08001c07
 8001bdc:	08001c11 	.word	0x08001c11
 8001be0:	08001c1b 	.word	0x08001c1b
 8001be4:	08001c25 	.word	0x08001c25
	case 0x00:{
		motor.setMode(usb_msg);
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4813      	ldr	r0, [pc, #76]	; (8001c38 <_Z10robomasterPhh+0x8c>)
 8001bec:	f7ff fb5f 	bl	80012ae <_ZN9MotorCtrl7setModeEPh>
		break;
 8001bf0:	e01d      	b.n	8001c2e <_Z10robomasterPhh+0x82>
	}case 0x01:{
		motor.setLimitTemp(usb_msg);
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4810      	ldr	r0, [pc, #64]	; (8001c38 <_Z10robomasterPhh+0x8c>)
 8001bf6:	f7ff fbca 	bl	800138e <_ZN9MotorCtrl12setLimitTempEPh>
		break;
 8001bfa:	e018      	b.n	8001c2e <_Z10robomasterPhh+0x82>
	}case 0x02:{
		motor.setTarget(usb_msg);
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	480e      	ldr	r0, [pc, #56]	; (8001c38 <_Z10robomasterPhh+0x8c>)
 8001c00:	f7ff fbe5 	bl	80013ce <_ZN9MotorCtrl9setTargetEPh>
		break;
 8001c04:	e013      	b.n	8001c2e <_Z10robomasterPhh+0x82>
	}case 0x03:{
		motor.setKp(usb_msg);
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <_Z10robomasterPhh+0x8c>)
 8001c0a:	f7ff fc1b 	bl	8001444 <_ZN9MotorCtrl5setKpEPh>
		break;
 8001c0e:	e00e      	b.n	8001c2e <_Z10robomasterPhh+0x82>
	}case 0x04:{
		motor.setKi(usb_msg);
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <_Z10robomasterPhh+0x8c>)
 8001c14:	f7ff fc51 	bl	80014ba <_ZN9MotorCtrl5setKiEPh>
		break;
 8001c18:	e009      	b.n	8001c2e <_Z10robomasterPhh+0x82>
	}case 0x05:{
		motor.setKd(usb_msg);
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4806      	ldr	r0, [pc, #24]	; (8001c38 <_Z10robomasterPhh+0x8c>)
 8001c1e:	f7ff fc87 	bl	8001530 <_ZN9MotorCtrl5setKdEPh>
		break;
 8001c22:	e004      	b.n	8001c2e <_Z10robomasterPhh+0x82>
	}case 0x06:{
		motor.setLimitIe(usb_msg);
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4804      	ldr	r0, [pc, #16]	; (8001c38 <_Z10robomasterPhh+0x8c>)
 8001c28:	f7ff fcbd 	bl	80015a6 <_ZN9MotorCtrl10setLimitIeEPh>
	}
	}
}
 8001c2c:	e7ff      	b.n	8001c2e <_Z10robomasterPhh+0x82>
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000288 	.word	0x20000288

08001c3c <led_on>:
        {LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 0, 0},
        {LED_RED_GPIO_Port, LED_RED_Pin, 0, 0},
};

void led_on(led name)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
    // if the led is off.
    if (led_list[name].is_high == 0)
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <led_on+0x60>)
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	4413      	add	r3, r2
 8001c4e:	330c      	adds	r3, #12
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d11e      	bne.n	8001c94 <led_on+0x58>
    {
        HAL_GPIO_WritePin(led_list[name].gpio, led_list[name].pin, GPIO_PIN_SET);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <led_on+0x60>)
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	4413      	add	r3, r2
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <led_on+0x60>)
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	4413      	add	r3, r2
 8001c68:	3304      	adds	r3, #4
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f001 feb2 	bl	80039d8 <HAL_GPIO_WritePin>
        led_list[name].before_tick = HAL_GetTick();
 8001c74:	79fc      	ldrb	r4, [r7, #7]
 8001c76:	f000 fd79 	bl	800276c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4907      	ldr	r1, [pc, #28]	; (8001c9c <led_on+0x60>)
 8001c7e:	0123      	lsls	r3, r4, #4
 8001c80:	440b      	add	r3, r1
 8001c82:	3308      	adds	r3, #8
 8001c84:	601a      	str	r2, [r3, #0]
        led_list[name].is_high = 1;
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <led_on+0x60>)
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	330c      	adds	r3, #12
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
    }
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd90      	pop	{r4, r7, pc}
 8001c9c:	20000010 	.word	0x20000010

08001ca0 <led_process>:

void led_process(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_LIST_SIZE; i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	e02d      	b.n	8001d08 <led_process+0x68>
    {
        if (led_list[i].is_high && ((HAL_GetTick() - led_list[i].before_tick) > LED_INTERVAL))
 8001cac:	4a1a      	ldr	r2, [pc, #104]	; (8001d18 <led_process+0x78>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4413      	add	r3, r2
 8001cb4:	330c      	adds	r3, #12
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d022      	beq.n	8001d02 <led_process+0x62>
 8001cbc:	f000 fd56 	bl	800276c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4915      	ldr	r1, [pc, #84]	; (8001d18 <led_process+0x78>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	440b      	add	r3, r1
 8001cca:	3308      	adds	r3, #8
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001cd4:	d915      	bls.n	8001d02 <led_process+0x62>
        {
            HAL_GPIO_WritePin(led_list[i].gpio, led_list[i].pin, GPIO_PIN_RESET);
 8001cd6:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <led_process+0x78>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4413      	add	r3, r2
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <led_process+0x78>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3304      	adds	r3, #4
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	2200      	movs	r2, #0
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f001 fe72 	bl	80039d8 <HAL_GPIO_WritePin>
            led_list[i].is_high = 0;
 8001cf4:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <led_process+0x78>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	330c      	adds	r3, #12
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < LED_LIST_SIZE; i++)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3301      	adds	r3, #1
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	ddce      	ble.n	8001cac <led_process+0xc>
        }
    }
}
 8001d0e:	bf00      	nop
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000010 	.word	0x20000010

08001d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d22:	f000 fcc9 	bl	80026b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d26:	f000 f841 	bl	8001dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d2a:	f000 f945 	bl	8001fb8 <MX_GPIO_Init>
  MX_CAN_Init();
 8001d2e:	f000 f899 	bl	8001e64 <MX_CAN_Init>
  MX_TIM3_Init();
 8001d32:	f000 f8cd 	bl	8001ed0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001d36:	f009 fe97 	bl	800ba68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  led_on(green);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7ff ff7e 	bl	8001c3c <led_on>
  led_on(yellow);
 8001d40:	2002      	movs	r0, #2
 8001d42:	f7ff ff7b 	bl	8001c3c <led_on>
  led_on(red);
 8001d46:	2003      	movs	r0, #3
 8001d48:	f7ff ff78 	bl	8001c3c <led_on>
  led_on(can);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff ff75 	bl	8001c3c <led_on>
  CAN_FilterTypeDef filter;
  filter.FilterIdHigh         = 0;                        // フィルターID(上�?16ビッ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
  filter.FilterIdLow          = 0;                        // フィルターID(下�?16ビッ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
  filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上�?16ビッ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下�?16ビッ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
  filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 8001d62:	2301      	movs	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
  filter.FilterBank           = 0;                        // フィルターバンクNo
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモー????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8001d72:	230e      	movs	r3, #14
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  filter.FilterActivation     = ENABLE;                   // フィルター無効?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��有効
 8001d76:	2301      	movs	r3, #1
 8001d78:	623b      	str	r3, [r7, #32]
  if(HAL_CAN_ConfigFilter(&hcan, &filter)!=HAL_OK ){
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480a      	ldr	r0, [pc, #40]	; (8001da8 <main+0x8c>)
 8001d80:	f000 fdfb 	bl	800297a <HAL_CAN_ConfigFilter>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <main+0x72>
    Error_Handler();
 8001d8a:	f000 f98d 	bl	80020a8 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK){
 8001d8e:	2102      	movs	r1, #2
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <main+0x8c>)
 8001d92:	f001 f927 	bl	8002fe4 <HAL_CAN_ActivateNotification>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <main+0x84>
    Error_Handler();
 8001d9c:	f000 f984 	bl	80020a8 <Error_Handler>
  }

  main_cpp();
 8001da0:	f000 fb1c 	bl	80023dc <main_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <main+0x88>
 8001da6:	bf00      	nop
 8001da8:	20000214 	.word	0x20000214

08001dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b09c      	sub	sp, #112	; 0x70
 8001db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001db6:	2228      	movs	r2, #40	; 0x28
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00a fbf0 	bl	800c5a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	2234      	movs	r2, #52	; 0x34
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f00a fbe2 	bl	800c5a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dea:	2301      	movs	r3, #1
 8001dec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dee:	2302      	movs	r3, #2
 8001df0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001df8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 faf2 	bl	80053ec <HAL_RCC_OscConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e0e:	f000 f94b 	bl	80020a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e12:	230f      	movs	r3, #15
 8001e14:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e16:	2302      	movs	r3, #2
 8001e18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 fb1a 	bl	8006468 <HAL_RCC_ClockConfig>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001e3a:	f000 f935 	bl	80020a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e42:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001e44:	2300      	movs	r3, #0
 8001e46:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e48:	463b      	mov	r3, r7
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 fcf2 	bl	8006834 <HAL_RCCEx_PeriphCLKConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001e56:	f000 f927 	bl	80020a8 <Error_Handler>
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3770      	adds	r7, #112	; 0x70
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <MX_CAN_Init+0x68>)
 8001e6c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001e70:	2202      	movs	r2, #2
 8001e72:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001e82:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e86:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001e8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e8e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001e90:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <MX_CAN_Init+0x64>)
 8001eb6:	f000 fc65 	bl	8002784 <HAL_CAN_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001ec0:	f000 f8f2 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000214 	.word	0x20000214
 8001ecc:	40006400 	.word	0x40006400

08001ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08e      	sub	sp, #56	; 0x38
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	615a      	str	r2, [r3, #20]
 8001f00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f02:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <MX_TIM3_Init+0xe0>)
 8001f04:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001f06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <MX_TIM3_Init+0xe0>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0e:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <MX_TIM3_Init+0xe0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 35999;
 8001f14:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <MX_TIM3_Init+0xe0>)
 8001f16:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001f1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1c:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <MX_TIM3_Init+0xe0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f22:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <MX_TIM3_Init+0xe0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f28:	4821      	ldr	r0, [pc, #132]	; (8001fb0 <MX_TIM3_Init+0xe0>)
 8001f2a:	f004 fe15 	bl	8006b58 <HAL_TIM_Base_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f34:	f000 f8b8 	bl	80020a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f42:	4619      	mov	r1, r3
 8001f44:	481a      	ldr	r0, [pc, #104]	; (8001fb0 <MX_TIM3_Init+0xe0>)
 8001f46:	f005 f955 	bl	80071f4 <HAL_TIM_ConfigClockSource>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f50:	f000 f8aa 	bl	80020a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f54:	4816      	ldr	r0, [pc, #88]	; (8001fb0 <MX_TIM3_Init+0xe0>)
 8001f56:	f004 feb9 	bl	8006ccc <HAL_TIM_PWM_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f60:	f000 f8a2 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	480f      	ldr	r0, [pc, #60]	; (8001fb0 <MX_TIM3_Init+0xe0>)
 8001f74:	f005 fdf2 	bl	8007b5c <HAL_TIMEx_MasterConfigSynchronization>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f7e:	f000 f893 	bl	80020a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f82:	2360      	movs	r3, #96	; 0x60
 8001f84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f92:	463b      	mov	r3, r7
 8001f94:	2200      	movs	r2, #0
 8001f96:	4619      	mov	r1, r3
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_TIM3_Init+0xe0>)
 8001f9a:	f005 f817 	bl	8006fcc <HAL_TIM_PWM_ConfigChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001fa4:	f000 f880 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	3738      	adds	r7, #56	; 0x38
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	2000023c 	.word	0x2000023c
 8001fb4:	40000400 	.word	0x40000400

08001fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fce:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <MX_GPIO_Init+0xe8>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	4a33      	ldr	r2, [pc, #204]	; (80020a0 <MX_GPIO_Init+0xe8>)
 8001fd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fd8:	6153      	str	r3, [r2, #20]
 8001fda:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <MX_GPIO_Init+0xe8>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <MX_GPIO_Init+0xe8>)
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4a2d      	ldr	r2, [pc, #180]	; (80020a0 <MX_GPIO_Init+0xe8>)
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff0:	6153      	str	r3, [r2, #20]
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <MX_GPIO_Init+0xe8>)
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <MX_GPIO_Init+0xe8>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	4a27      	ldr	r2, [pc, #156]	; (80020a0 <MX_GPIO_Init+0xe8>)
 8002004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002008:	6153      	str	r3, [r2, #20]
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <MX_GPIO_Init+0xe8>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800201c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002020:	f001 fcda 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8002024:	2200      	movs	r2, #0
 8002026:	21f0      	movs	r1, #240	; 0xf0
 8002028:	481e      	ldr	r0, [pc, #120]	; (80020a4 <MX_GPIO_Init+0xec>)
 800202a:	f001 fcd5 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EMS_Pin */
  GPIO_InitStruct.Pin = EMS_Pin;
 800202e:	2302      	movs	r3, #2
 8002030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002032:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002038:	2302      	movs	r3, #2
 800203a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	4619      	mov	r1, r3
 8002042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002046:	f001 fb35 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 800204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	4619      	mov	r1, r3
 8002062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002066:	f001 fb25 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin LED_GREEN_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 800206a:	23f0      	movs	r3, #240	; 0xf0
 800206c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	2301      	movs	r3, #1
 8002070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	4619      	mov	r1, r3
 8002080:	4808      	ldr	r0, [pc, #32]	; (80020a4 <MX_GPIO_Init+0xec>)
 8002082:	f001 fb17 	bl	80036b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2007      	movs	r0, #7
 800208c:	f001 fadb 	bl	8003646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002090:	2007      	movs	r0, #7
 8002092:	f001 faf4 	bl	800367e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002096:	bf00      	nop
 8002098:	3720      	adds	r7, #32
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	48000400 	.word	0x48000400

080020a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ac:	b672      	cpsid	i
}
 80020ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80020b0:	2201      	movs	r2, #1
 80020b2:	2180      	movs	r1, #128	; 0x80
 80020b4:	4801      	ldr	r0, [pc, #4]	; (80020bc <Error_Handler+0x14>)
 80020b6:	f001 fc8f 	bl	80039d8 <HAL_GPIO_WritePin>
 80020ba:	e7f9      	b.n	80020b0 <Error_Handler+0x8>
 80020bc:	48000400 	.word	0x48000400

080020c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_MspInit+0x44>)
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	4a0e      	ldr	r2, [pc, #56]	; (8002104 <HAL_MspInit+0x44>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6193      	str	r3, [r2, #24]
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <HAL_MspInit+0x44>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_MspInit+0x44>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a08      	ldr	r2, [pc, #32]	; (8002104 <HAL_MspInit+0x44>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e8:	61d3      	str	r3, [r2, #28]
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_MspInit+0x44>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000

08002108 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <HAL_CAN_MspInit+0x8c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d130      	bne.n	800218c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_CAN_MspInit+0x90>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4a1a      	ldr	r2, [pc, #104]	; (8002198 <HAL_CAN_MspInit+0x90>)
 8002130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002134:	61d3      	str	r3, [r2, #28]
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_CAN_MspInit+0x90>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_CAN_MspInit+0x90>)
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	4a14      	ldr	r2, [pc, #80]	; (8002198 <HAL_CAN_MspInit+0x90>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6153      	str	r3, [r2, #20]
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_CAN_MspInit+0x90>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800215a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800215e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800216c:	2309      	movs	r3, #9
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4619      	mov	r1, r3
 8002176:	4809      	ldr	r0, [pc, #36]	; (800219c <HAL_CAN_MspInit+0x94>)
 8002178:	f001 fa9c 	bl	80036b4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 1, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2101      	movs	r1, #1
 8002180:	2014      	movs	r0, #20
 8002182:	f001 fa60 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8002186:	2014      	movs	r0, #20
 8002188:	f001 fa79 	bl	800367e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800218c:	bf00      	nop
 800218e:	3728      	adds	r7, #40	; 0x28
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40006400 	.word	0x40006400
 8002198:	40021000 	.word	0x40021000
 800219c:	48000400 	.word	0x48000400

080021a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <HAL_TIM_Base_MspInit+0x44>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d113      	bne.n	80021da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_TIM_Base_MspInit+0x48>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <HAL_TIM_Base_MspInit+0x48>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	61d3      	str	r3, [r2, #28]
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_TIM_Base_MspInit+0x48>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2102      	movs	r1, #2
 80021ce:	201d      	movs	r0, #29
 80021d0:	f001 fa39 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021d4:	201d      	movs	r0, #29
 80021d6:	f001 fa52 	bl	800367e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40021000 	.word	0x40021000

080021ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <NMI_Handler+0x4>

080021f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <HardFault_Handler+0x4>

080021f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <MemManage_Handler+0x4>

080021fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <BusFault_Handler+0x4>

08002204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <UsageFault_Handler+0x4>

0800220a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002238:	f000 fa84 	bl	8002744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}

08002240 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 8002244:	2002      	movs	r0, #2
 8002246:	f001 fbdf 	bl	8003a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002256:	f000 feeb 	bl	8003030 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000214 	.word	0x20000214

08002264 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <TIM3_IRQHandler+0x10>)
 800226a:	f004 fd90 	bl	8006d8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000023c 	.word	0x2000023c

08002278 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <USB_LP_IRQHandler+0x10>)
 800227e:	f001 fcd3 	bl	8003c28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20001190 	.word	0x20001190

0800228c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <SystemInit+0x20>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <SystemInit+0x20>)
 8002298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800229c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <_ZN10MotorParamC1Ev>:
	vel,
	pos,
	hom,
};

struct MotorParam{
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	2320      	movs	r3, #32
 80022be:	461a      	mov	r2, r3
 80022c0:	2100      	movs	r1, #0
 80022c2:	f00a f96d 	bl	800c5a0 <memset>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3320      	adds	r3, #32
 80022ca:	2220      	movs	r2, #32
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f00a f966 	bl	800c5a0 <memset>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3340      	adds	r3, #64	; 0x40
 80022d8:	2220      	movs	r2, #32
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f00a f95f 	bl	800c5a0 <memset>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3360      	adds	r3, #96	; 0x60
 80022e6:	2220      	movs	r2, #32
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f00a f958 	bl	800c5a0 <memset>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a2d      	ldr	r2, [pc, #180]	; (80023a8 <_ZN10MotorParamC1Ev+0xf8>)
 80022f4:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80022f8:	4615      	mov	r5, r2
 80022fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002302:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	33a0      	adds	r3, #160	; 0xa0
 800230a:	2220      	movs	r2, #32
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f00a f946 	bl	800c5a0 <memset>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	33c0      	adds	r3, #192	; 0xc0
 8002318:	2220      	movs	r2, #32
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f00a f93f 	bl	800c5a0 <memset>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	33e0      	adds	r3, #224	; 0xe0
 8002326:	2220      	movs	r2, #32
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f00a f938 	bl	800c5a0 <memset>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002336:	2220      	movs	r2, #32
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f00a f930 	bl	800c5a0 <memset>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a17      	ldr	r2, [pc, #92]	; (80023ac <_ZN10MotorParamC1Ev+0xfc>)
 8002350:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002354:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002358:	e883 0003 	stmia.w	r3, {r0, r1}
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002362:	2220      	movs	r2, #32
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f00a f91a 	bl	800c5a0 <memset>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002372:	2220      	movs	r2, #32
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f00a f912 	bl	800c5a0 <memset>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8002382:	2220      	movs	r2, #32
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f00a f90a 	bl	800c5a0 <memset>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002392:	2220      	movs	r2, #32
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f00a f902 	bl	800c5a0 <memset>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bdb0      	pop	{r4, r5, r7, pc}
 80023a6:	bf00      	nop
 80023a8:	0800c618 	.word	0x0800c618
 80023ac:	0800c638 	.word	0x0800c638

080023b0 <_ZN9MotorCtrlC1Ev>:
	float Ki[8] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
	float Kd[8] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
	float revolution[8] = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
};

class MotorCtrl{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff78 	bl	80022b0 <_ZN10MotorParamC1Ev>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <main_cpp>:

CAN_TxHeaderTypeDef TxHeader1;
CAN_TxHeaderTypeDef TxHeader2;

void main_cpp()
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
	TxHeader1.IDE = CAN_ID_STD;
 80023e2:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <main_cpp+0xfc>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
	TxHeader1.RTR = CAN_RTR_DATA;
 80023e8:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <main_cpp+0xfc>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
	TxHeader1.StdId = 0x200;
 80023ee:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <main_cpp+0xfc>)
 80023f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f4:	601a      	str	r2, [r3, #0]
	TxHeader1.DLC = 8;
 80023f6:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <main_cpp+0xfc>)
 80023f8:	2208      	movs	r2, #8
 80023fa:	611a      	str	r2, [r3, #16]
	TxHeader1.TransmitGlobalTime = DISABLE;
 80023fc:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <main_cpp+0xfc>)
 80023fe:	2200      	movs	r2, #0
 8002400:	751a      	strb	r2, [r3, #20]
	TxHeader2.IDE = CAN_ID_STD;
 8002402:	4b36      	ldr	r3, [pc, #216]	; (80024dc <main_cpp+0x100>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 8002408:	4b34      	ldr	r3, [pc, #208]	; (80024dc <main_cpp+0x100>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x1ff;
 800240e:	4b33      	ldr	r3, [pc, #204]	; (80024dc <main_cpp+0x100>)
 8002410:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002414:	601a      	str	r2, [r3, #0]
	TxHeader2.DLC = 8;
 8002416:	4b31      	ldr	r3, [pc, #196]	; (80024dc <main_cpp+0x100>)
 8002418:	2208      	movs	r2, #8
 800241a:	611a      	str	r2, [r3, #16]
	TxHeader2.TransmitGlobalTime = DISABLE;
 800241c:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <main_cpp+0x100>)
 800241e:	2200      	movs	r2, #0
 8002420:	751a      	strb	r2, [r3, #20]

	HAL_CAN_Start(&hcan);
 8002422:	482f      	ldr	r0, [pc, #188]	; (80024e0 <main_cpp+0x104>)
 8002424:	f000 fb73 	bl	8002b0e <HAL_CAN_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002428:	482e      	ldr	r0, [pc, #184]	; (80024e4 <main_cpp+0x108>)
 800242a:	f004 fbed 	bl	8006c08 <HAL_TIM_Base_Start_IT>

	uint8_t debug_state = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	71fb      	strb	r3, [r7, #7]
	while (true)
	{
		if (READ_BIT(CAN->MSR, CAN_MSR_INAK) == 1)
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <main_cpp+0x10c>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b01      	cmp	r3, #1
 800243c:	bf0c      	ite	eq
 800243e:	2301      	moveq	r3, #1
 8002440:	2300      	movne	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <main_cpp+0x7e>
		{
			// can start
			CLEAR_BIT(CAN->MCR, CAN_MCR_INRQ);
 8002448:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <main_cpp+0x10c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <main_cpp+0x10c>)
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	6013      	str	r3, [r2, #0]
			led_on(green);
 8002454:	2001      	movs	r0, #1
 8002456:	f7ff fbf1 	bl	8001c3c <led_on>
		}
		if (debug_state == 0)
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d126      	bne.n	80024ae <main_cpp+0xd2>
		{
			switch (hUsbDeviceFS.dev_state)
 8002460:	4b22      	ldr	r3, [pc, #136]	; (80024ec <main_cpp+0x110>)
 8002462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002466:	3b01      	subs	r3, #1
 8002468:	2b03      	cmp	r3, #3
 800246a:	d832      	bhi.n	80024d2 <main_cpp+0xf6>
 800246c:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <main_cpp+0x98>)
 800246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002472:	bf00      	nop
 8002474:	08002485 	.word	0x08002485
 8002478:	0800248d 	.word	0x0800248d
 800247c:	080024a3 	.word	0x080024a3
 8002480:	08002495 	.word	0x08002495
			{
			case USBD_STATE_DEFAULT:
				led_on(red);
 8002484:	2003      	movs	r0, #3
 8002486:	f7ff fbd9 	bl	8001c3c <led_on>
				break;
 800248a:	e022      	b.n	80024d2 <main_cpp+0xf6>
			case USBD_STATE_ADDRESSED:
				led_on(yellow);
 800248c:	2002      	movs	r0, #2
 800248e:	f7ff fbd5 	bl	8001c3c <led_on>
				break;
 8002492:	e01e      	b.n	80024d2 <main_cpp+0xf6>
			case USBD_STATE_SUSPENDED:
				led_on(yellow);
 8002494:	2002      	movs	r0, #2
 8002496:	f7ff fbd1 	bl	8001c3c <led_on>
				led_on(red);
 800249a:	2003      	movs	r0, #3
 800249c:	f7ff fbce 	bl	8001c3c <led_on>
				break;
 80024a0:	e017      	b.n	80024d2 <main_cpp+0xf6>
			case USBD_STATE_CONFIGURED:
				led_on(green);
 80024a2:	2001      	movs	r0, #1
 80024a4:	f7ff fbca 	bl	8001c3c <led_on>
				debug_state = 1;
 80024a8:	2301      	movs	r3, #1
 80024aa:	71fb      	strb	r3, [r7, #7]
				break;
 80024ac:	e011      	b.n	80024d2 <main_cpp+0xf6>
			}
		}
		else if (debug_state == 1)
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d10e      	bne.n	80024d2 <main_cpp+0xf6>
		{
			switch (hcan.ErrorCode)
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <main_cpp+0x104>)
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d005      	beq.n	80024c8 <main_cpp+0xec>
 80024bc:	2b80      	cmp	r3, #128	; 0x80
 80024be:	d107      	bne.n	80024d0 <main_cpp+0xf4>
			{
			case HAL_CAN_ERROR_BD: // bit dominant error
				led_on(red);
 80024c0:	2003      	movs	r0, #3
 80024c2:	f7ff fbbb 	bl	8001c3c <led_on>
				break;
 80024c6:	e004      	b.n	80024d2 <main_cpp+0xf6>
			case HAL_CAN_ERROR_ACK: // acknowledge error
				led_on(yellow);
 80024c8:	2002      	movs	r0, #2
 80024ca:	f7ff fbb7 	bl	8001c3c <led_on>
				break;
 80024ce:	e000      	b.n	80024d2 <main_cpp+0xf6>
			default:
				break;
 80024d0:	bf00      	nop
			}
		}

		led_process(); //turn off all led
 80024d2:	f7ff fbe5 	bl	8001ca0 <led_process>
		if (READ_BIT(CAN->MSR, CAN_MSR_INAK) == 1)
 80024d6:	e7ac      	b.n	8002432 <main_cpp+0x56>
 80024d8:	20000450 	.word	0x20000450
 80024dc:	20000468 	.word	0x20000468
 80024e0:	20000214 	.word	0x20000214
 80024e4:	2000023c 	.word	0x2000023c
 80024e8:	40006400 	.word	0x40006400
 80024ec:	20000488 	.word	0x20000488

080024f0 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d107      	bne.n	8002510 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002506:	4293      	cmp	r3, r2
 8002508:	d102      	bne.n	8002510 <_Z41__static_initialization_and_destruction_0ii+0x20>
MotorCtrl motor;
 800250a:	4803      	ldr	r0, [pc, #12]	; (8002518 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800250c:	f7ff ff50 	bl	80023b0 <_ZN9MotorCtrlC1Ev>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000288 	.word	0x20000288

0800251c <_GLOBAL__sub_I_motor>:
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
 8002520:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002524:	2001      	movs	r0, #1
 8002526:	f7ff ffe3 	bl	80024f0 <_Z41__static_initialization_and_destruction_0ii>
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_CAN_RxFifo0MsgPendingCallback>:
extern CAN_TxHeaderTypeDef TxHeader2;
extern uint32_t TxMailbox;
extern CAN_HandleTypeDef hcan;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08e      	sub	sp, #56	; 0x38
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    */
    uint8_t Data[14];
    CAN_RxHeaderTypeDef RxHeader;
    // the Data is used for USB buffer. can_process set header infomation to Data[0~5].
    // It is a terrible code. Sorry for hard work to read the code.
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Data + 6) == HAL_OK)
 8002534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002538:	3306      	adds	r3, #6
 800253a:	f107 020c 	add.w	r2, r7, #12
 800253e:	2100      	movs	r1, #0
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fc2d 	bl	8002da0 <HAL_CAN_GetRxMessage>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d020      	beq.n	8002598 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
    {
    	if(motor.update(RxHeader.StdId,Data + 6)){
 8002556:	68f9      	ldr	r1, [r7, #12]
 8002558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800255c:	3306      	adds	r3, #6
 800255e:	461a      	mov	r2, r3
 8002560:	480f      	ldr	r0, [pc, #60]	; (80025a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8002562:	f7fe fb35 	bl	8000bd0 <_ZN9MotorCtrl6updateEmPh>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
    		if(motor.diag == 1){can_process(&RxHeader, Data);}
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800256e:	f893 31c4 	ldrb.w	r3, [r3, #452]	; 0x1c4
 8002572:	2b01      	cmp	r3, #1
 8002574:	d110      	bne.n	8002598 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8002576:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800257a:	f107 030c 	add.w	r3, r7, #12
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fa2b 	bl	80019dc <can_process>
    	}else{
    		can_process(&RxHeader, Data);
    	}
    }
}
 8002586:	e007      	b.n	8002598 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
    		can_process(&RxHeader, Data);
 8002588:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fa22 	bl	80019dc <can_process>
}
 8002598:	bf00      	nop
 800259a:	3738      	adds	r7, #56	; 0x38
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000288 	.word	0x20000288

080025a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EMS_Pin){
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d118      	bne.n	80025e6 <HAL_GPIO_EXTI_Callback+0x42>
		led_on(red);
 80025b4:	2003      	movs	r0, #3
 80025b6:	f7ff fb41 	bl	8001c3c <led_on>
		if(HAL_GPIO_ReadPin(EMS_GPIO_Port, EMS_Pin)){
 80025ba:	2102      	movs	r1, #2
 80025bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c0:	f001 f9f2 	bl	80039a8 <HAL_GPIO_ReadPin>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <HAL_GPIO_EXTI_Callback+0x3a>
	        static uint8_t HelloSLCAN_encoded[] = {0x03, 0x02 << 4,'H', 0x00};
	        CDC_Transmit_FS(HelloSLCAN_encoded, 2 + 2);
 80025d4:	2104      	movs	r1, #4
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80025d8:	f009 fbbe 	bl	800bd58 <CDC_Transmit_FS>
		}else{
	        static uint8_t HelloSLCAN_encoded[] = {0x03, 0x02 << 4,'L', 0x00};
	        CDC_Transmit_FS(HelloSLCAN_encoded, 2 + 2);
		}
	}
}
 80025dc:	e003      	b.n	80025e6 <HAL_GPIO_EXTI_Callback+0x42>
	        CDC_Transmit_FS(HelloSLCAN_encoded, 2 + 2);
 80025de:	2104      	movs	r1, #4
 80025e0:	4804      	ldr	r0, [pc, #16]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x50>)
 80025e2:	f009 fbb9 	bl	800bd58 <CDC_Transmit_FS>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000054 	.word	0x20000054
 80025f4:	20000058 	.word	0x20000058

080025f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a15      	ldr	r2, [pc, #84]	; (800265c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d124      	bne.n	8002654 <HAL_TIM_PeriodElapsedCallback+0x5c>
	//TIM_ClearITPendingBit(TIM3, TIM_IT_CC4);
		if(HAL_GPIO_ReadPin(EMS_GPIO_Port, EMS_Pin)){
 800260a:	2102      	movs	r1, #2
 800260c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002610:	f001 f9ca 	bl	80039a8 <HAL_GPIO_ReadPin>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf14      	ite	ne
 800261a:	2301      	movne	r3, #1
 800261c:	2300      	moveq	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <HAL_TIM_PeriodElapsedCallback+0x3a>
			motor.transmit1();
 8002624:	480e      	ldr	r0, [pc, #56]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002626:	f7ff f853 	bl	80016d0 <_ZN9MotorCtrl9transmit1Ev>
			motor.transmit2();
 800262a:	480d      	ldr	r0, [pc, #52]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800262c:	f7ff f8c8 	bl	80017c0 <_ZN9MotorCtrl9transmit2Ev>
			for(uint8_t i = 0;i<8;i++){
				motor.reset(i);
			}
		}
	}
}
 8002630:	e010      	b.n	8002654 <HAL_TIM_PeriodElapsedCallback+0x5c>
			motor.ems();
 8002632:	480b      	ldr	r0, [pc, #44]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002634:	f7ff f940 	bl	80018b8 <_ZN9MotorCtrl3emsEv>
			for(uint8_t i = 0;i<8;i++){
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e007      	b.n	800264e <HAL_TIM_PeriodElapsedCallback+0x56>
				motor.reset(i);
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	4619      	mov	r1, r3
 8002642:	4807      	ldr	r0, [pc, #28]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002644:	f7fe fdee 	bl	8001224 <_ZN9MotorCtrl5resetEh>
			for(uint8_t i = 0;i<8;i++){
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	3301      	adds	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b07      	cmp	r3, #7
 8002652:	d9f4      	bls.n	800263e <HAL_TIM_PeriodElapsedCallback+0x46>
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40000400 	.word	0x40000400
 8002660:	20000288 	.word	0x20000288

08002664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800269c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002668:	f7ff fe10 	bl	800228c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800266c:	480c      	ldr	r0, [pc, #48]	; (80026a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800266e:	490d      	ldr	r1, [pc, #52]	; (80026a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002670:	4a0d      	ldr	r2, [pc, #52]	; (80026a8 <LoopForever+0xe>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002674:	e002      	b.n	800267c <LoopCopyDataInit>

08002676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267a:	3304      	adds	r3, #4

0800267c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800267c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002680:	d3f9      	bcc.n	8002676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002684:	4c0a      	ldr	r4, [pc, #40]	; (80026b0 <LoopForever+0x16>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002688:	e001      	b.n	800268e <LoopFillZerobss>

0800268a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800268c:	3204      	adds	r2, #4

0800268e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002690:	d3fb      	bcc.n	800268a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002692:	f009 ff8d 	bl	800c5b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002696:	f7ff fb41 	bl	8001d1c <main>

0800269a <LoopForever>:

LoopForever:
    b LoopForever
 800269a:	e7fe      	b.n	800269a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800269c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80026a8:	0800c6b4 	.word	0x0800c6b4
  ldr r2, =_sbss
 80026ac:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80026b0:	2000169c 	.word	0x2000169c

080026b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <ADC1_2_IRQHandler>
	...

080026b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_Init+0x28>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <HAL_Init+0x28>)
 80026c2:	f043 0310 	orr.w	r3, r3, #16
 80026c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c8:	2003      	movs	r0, #3
 80026ca:	f000 ffb1 	bl	8003630 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ce:	200f      	movs	r0, #15
 80026d0:	f000 f808 	bl	80026e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d4:	f7ff fcf4 	bl	80020c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40022000 	.word	0x40022000

080026e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_InitTick+0x54>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_InitTick+0x58>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4619      	mov	r1, r3
 80026f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	4618      	mov	r0, r3
 8002704:	f000 ffc9 	bl	800369a <HAL_SYSTICK_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e00e      	b.n	8002730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b0f      	cmp	r3, #15
 8002716:	d80a      	bhi.n	800272e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002718:	2200      	movs	r2, #0
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	f04f 30ff 	mov.w	r0, #4294967295
 8002720:	f000 ff91 	bl	8003646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002724:	4a06      	ldr	r2, [pc, #24]	; (8002740 <HAL_InitTick+0x5c>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000050 	.word	0x20000050
 800273c:	20000060 	.word	0x20000060
 8002740:	2000005c 	.word	0x2000005c

08002744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_IncTick+0x20>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x24>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4413      	add	r3, r2
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_IncTick+0x24>)
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000060 	.word	0x20000060
 8002768:	20000480 	.word	0x20000480

0800276c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_GetTick+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000480 	.word	0x20000480

08002784 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0ed      	b.n	8002972 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff fcb0 	bl	8002108 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027b8:	f7ff ffd8 	bl	800276c <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027be:	e012      	b.n	80027e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027c0:	f7ff ffd4 	bl	800276c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b0a      	cmp	r3, #10
 80027cc:	d90b      	bls.n	80027e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2205      	movs	r2, #5
 80027de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e0c5      	b.n	8002972 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0e5      	beq.n	80027c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0202 	bic.w	r2, r2, #2
 8002802:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002804:	f7ff ffb2 	bl	800276c <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800280a:	e012      	b.n	8002832 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800280c:	f7ff ffae 	bl	800276c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b0a      	cmp	r3, #10
 8002818:	d90b      	bls.n	8002832 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2205      	movs	r2, #5
 800282a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e09f      	b.n	8002972 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1e5      	bne.n	800280c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	7e1b      	ldrb	r3, [r3, #24]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d108      	bne.n	800285a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e007      	b.n	800286a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002868:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7e5b      	ldrb	r3, [r3, #25]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d108      	bne.n	8002884 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e007      	b.n	8002894 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002892:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7e9b      	ldrb	r3, [r3, #26]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d108      	bne.n	80028ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0220 	orr.w	r2, r2, #32
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e007      	b.n	80028be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0220 	bic.w	r2, r2, #32
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7edb      	ldrb	r3, [r3, #27]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0210 	bic.w	r2, r2, #16
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e007      	b.n	80028e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0210 	orr.w	r2, r2, #16
 80028e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7f1b      	ldrb	r3, [r3, #28]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d108      	bne.n	8002902 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0208 	orr.w	r2, r2, #8
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e007      	b.n	8002912 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0208 	bic.w	r2, r2, #8
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7f5b      	ldrb	r3, [r3, #29]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d108      	bne.n	800292c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0204 	orr.w	r2, r2, #4
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e007      	b.n	800293c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0204 	bic.w	r2, r2, #4
 800293a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	ea42 0103 	orr.w	r1, r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	1e5a      	subs	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800297a:	b480      	push	{r7}
 800297c:	b087      	sub	sp, #28
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002990:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d003      	beq.n	80029a0 <HAL_CAN_ConfigFilter+0x26>
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	2b02      	cmp	r3, #2
 800299c:	f040 80aa 	bne.w	8002af4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2201      	movs	r2, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	401a      	ands	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d123      	bne.n	8002a22 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	401a      	ands	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3248      	adds	r2, #72	; 0x48
 8002a02:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a16:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a18:	6979      	ldr	r1, [r7, #20]
 8002a1a:	3348      	adds	r3, #72	; 0x48
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d122      	bne.n	8002a70 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	3248      	adds	r2, #72	; 0x48
 8002a50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a66:	6979      	ldr	r1, [r7, #20]
 8002a68:	3348      	adds	r3, #72	; 0x48
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	401a      	ands	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a8a:	e007      	b.n	8002a9c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ab6:	e007      	b.n	8002ac8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d107      	bne.n	8002ae0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ae6:	f023 0201 	bic.w	r2, r3, #1
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e006      	b.n	8002b02 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d12e      	bne.n	8002b80 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2202      	movs	r2, #2
 8002b26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0201 	bic.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b3a:	f7ff fe17 	bl	800276c <HAL_GetTick>
 8002b3e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b40:	e012      	b.n	8002b68 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b42:	f7ff fe13 	bl	800276c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b0a      	cmp	r3, #10
 8002b4e:	d90b      	bls.n	8002b68 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2205      	movs	r2, #5
 8002b60:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e012      	b.n	8002b8e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1e5      	bne.n	8002b42 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e006      	b.n	8002b8e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b089      	sub	sp, #36	; 0x24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002baa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bb4:	7ffb      	ldrb	r3, [r7, #31]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d003      	beq.n	8002bc2 <HAL_CAN_AddTxMessage+0x2c>
 8002bba:	7ffb      	ldrb	r3, [r7, #31]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	f040 80ad 	bne.w	8002d1c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8095 	beq.w	8002d0c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	0e1b      	lsrs	r3, r3, #24
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002bec:	2201      	movs	r2, #1
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10d      	bne.n	8002c1a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c08:	68f9      	ldr	r1, [r7, #12]
 8002c0a:	6809      	ldr	r1, [r1, #0]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3318      	adds	r3, #24
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	440b      	add	r3, r1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e00f      	b.n	8002c3a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c24:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c2a:	68f9      	ldr	r1, [r7, #12]
 8002c2c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c2e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3318      	adds	r3, #24
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	440b      	add	r3, r1
 8002c38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6819      	ldr	r1, [r3, #0]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	3318      	adds	r3, #24
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	440b      	add	r3, r1
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	7d1b      	ldrb	r3, [r3, #20]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d111      	bne.n	8002c7a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3318      	adds	r3, #24
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	4413      	add	r3, r2
 8002c62:	3304      	adds	r3, #4
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	6811      	ldr	r1, [r2, #0]
 8002c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3318      	adds	r3, #24
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	440b      	add	r3, r1
 8002c76:	3304      	adds	r3, #4
 8002c78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3307      	adds	r3, #7
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	061a      	lsls	r2, r3, #24
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3306      	adds	r3, #6
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3305      	adds	r3, #5
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	4313      	orrs	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	3204      	adds	r2, #4
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	6811      	ldr	r1, [r2, #0]
 8002ca2:	ea43 0200 	orr.w	r2, r3, r0
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	440b      	add	r3, r1
 8002cac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002cb0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3303      	adds	r3, #3
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	061a      	lsls	r2, r3, #24
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	6811      	ldr	r1, [r2, #0]
 8002cd8:	ea43 0200 	orr.w	r2, r3, r0
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	440b      	add	r3, r1
 8002ce2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ce6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3318      	adds	r3, #24
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	4413      	add	r3, r2
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	6811      	ldr	r1, [r2, #0]
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	3318      	adds	r3, #24
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	440b      	add	r3, r1
 8002d06:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e00e      	b.n	8002d2a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e006      	b.n	8002d2a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	; 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d48:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d002      	beq.n	8002d56 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002d50:	7afb      	ldrb	r3, [r7, #11]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d11d      	bne.n	8002d92 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3301      	adds	r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d003      	beq.n	8002dc4 <HAL_CAN_GetRxMessage+0x24>
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	f040 8103 	bne.w	8002fca <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10e      	bne.n	8002de8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d116      	bne.n	8002e06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0f7      	b.n	8002fd8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d107      	bne.n	8002e06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0e8      	b.n	8002fd8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	331b      	adds	r3, #27
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	4413      	add	r3, r2
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0204 	and.w	r2, r3, #4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10c      	bne.n	8002e3e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	331b      	adds	r3, #27
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	4413      	add	r3, r2
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	0d5b      	lsrs	r3, r3, #21
 8002e34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e00b      	b.n	8002e56 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	331b      	adds	r3, #27
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	4413      	add	r3, r2
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	08db      	lsrs	r3, r3, #3
 8002e4e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	331b      	adds	r3, #27
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	4413      	add	r3, r2
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0202 	and.w	r2, r3, #2
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	331b      	adds	r3, #27
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	4413      	add	r3, r2
 8002e78:	3304      	adds	r3, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2208      	movs	r2, #8
 8002e88:	611a      	str	r2, [r3, #16]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	331b      	adds	r3, #27
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	4413      	add	r3, r2
 8002e98:	3304      	adds	r3, #4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 020f 	and.w	r2, r3, #15
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	331b      	adds	r3, #27
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	4413      	add	r3, r2
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	331b      	adds	r3, #27
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3304      	adds	r3, #4
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	0c1b      	lsrs	r3, r3, #16
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	0a1a      	lsrs	r2, r3, #8
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0c1a      	lsrs	r2, r3, #16
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	3302      	adds	r3, #2
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	0e1a      	lsrs	r2, r3, #24
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	3303      	adds	r3, #3
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	0a1a      	lsrs	r2, r3, #8
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	3305      	adds	r3, #5
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	0c1a      	lsrs	r2, r3, #16
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	3306      	adds	r3, #6
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0e1a      	lsrs	r2, r3, #24
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	3307      	adds	r3, #7
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d108      	bne.n	8002fb6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0220 	orr.w	r2, r2, #32
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	e007      	b.n	8002fc6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0220 	orr.w	r2, r2, #32
 8002fc4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e006      	b.n	8002fd8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
  }
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d002      	beq.n	8003002 <HAL_CAN_ActivateNotification+0x1e>
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d109      	bne.n	8003016 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6959      	ldr	r1, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e006      	b.n	8003024 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
  }
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d07c      	beq.n	8003170 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d023      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2201      	movs	r2, #1
 8003086:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f983 	bl	800339e <HAL_CAN_TxMailbox0CompleteCallback>
 8003098:	e016      	b.n	80030c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
 80030ac:	e00c      	b.n	80030c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d004      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
 80030c0:	e002      	b.n	80030c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f989 	bl	80033da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d024      	beq.n	800311c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f963 	bl	80033b2 <HAL_CAN_TxMailbox1CompleteCallback>
 80030ec:	e016      	b.n	800311c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d004      	beq.n	8003102 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003100:	e00c      	b.n	800311c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
 8003114:	e002      	b.n	800311c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f969 	bl	80033ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d024      	beq.n	8003170 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800312e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f943 	bl	80033c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8003140:	e016      	b.n	8003170 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d004      	beq.n	8003156 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
 8003154:	e00c      	b.n	8003170 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
 8003168:	e002      	b.n	8003170 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f949 	bl	8003402 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800318a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2210      	movs	r2, #16
 8003192:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d006      	beq.n	80031b6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2208      	movs	r2, #8
 80031ae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f930 	bl	8003416 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d009      	beq.n	80031d4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff f9ac 	bl	800252c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00c      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2210      	movs	r2, #16
 80031f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d006      	beq.n	800321a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2208      	movs	r2, #8
 8003212:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f912 	bl	800343e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f8f9 	bl	800342a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b00      	cmp	r3, #0
 800324a:	d006      	beq.n	800325a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2210      	movs	r2, #16
 8003252:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f8fc 	bl	8003452 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2208      	movs	r2, #8
 8003274:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f8f5 	bl	8003466 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d07b      	beq.n	800337e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d072      	beq.n	8003376 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	f043 0302 	orr.w	r3, r3, #2
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d043      	beq.n	8003376 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d03e      	beq.n	8003376 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032fe:	2b60      	cmp	r3, #96	; 0x60
 8003300:	d02b      	beq.n	800335a <HAL_CAN_IRQHandler+0x32a>
 8003302:	2b60      	cmp	r3, #96	; 0x60
 8003304:	d82e      	bhi.n	8003364 <HAL_CAN_IRQHandler+0x334>
 8003306:	2b50      	cmp	r3, #80	; 0x50
 8003308:	d022      	beq.n	8003350 <HAL_CAN_IRQHandler+0x320>
 800330a:	2b50      	cmp	r3, #80	; 0x50
 800330c:	d82a      	bhi.n	8003364 <HAL_CAN_IRQHandler+0x334>
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d019      	beq.n	8003346 <HAL_CAN_IRQHandler+0x316>
 8003312:	2b40      	cmp	r3, #64	; 0x40
 8003314:	d826      	bhi.n	8003364 <HAL_CAN_IRQHandler+0x334>
 8003316:	2b30      	cmp	r3, #48	; 0x30
 8003318:	d010      	beq.n	800333c <HAL_CAN_IRQHandler+0x30c>
 800331a:	2b30      	cmp	r3, #48	; 0x30
 800331c:	d822      	bhi.n	8003364 <HAL_CAN_IRQHandler+0x334>
 800331e:	2b10      	cmp	r3, #16
 8003320:	d002      	beq.n	8003328 <HAL_CAN_IRQHandler+0x2f8>
 8003322:	2b20      	cmp	r3, #32
 8003324:	d005      	beq.n	8003332 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003326:	e01d      	b.n	8003364 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	f043 0308 	orr.w	r3, r3, #8
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003330:	e019      	b.n	8003366 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	f043 0310 	orr.w	r3, r3, #16
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800333a:	e014      	b.n	8003366 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	f043 0320 	orr.w	r3, r3, #32
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003344:	e00f      	b.n	8003366 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800334e:	e00a      	b.n	8003366 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003358:	e005      	b.n	8003366 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003362:	e000      	b.n	8003366 <HAL_CAN_IRQHandler+0x336>
            break;
 8003364:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003374:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2204      	movs	r2, #4
 800337c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f872 	bl	800347a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003396:	bf00      	nop
 8003398:	3728      	adds	r7, #40	; 0x28
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034ac:	4013      	ands	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c2:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <__NVIC_SetPriorityGrouping+0x44>)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	60d3      	str	r3, [r2, #12]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <__NVIC_GetPriorityGrouping+0x18>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	0a1b      	lsrs	r3, r3, #8
 80034e2:	f003 0307 	and.w	r3, r3, #7
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	2b00      	cmp	r3, #0
 8003504:	db0b      	blt.n	800351e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	4907      	ldr	r1, [pc, #28]	; (800352c <__NVIC_EnableIRQ+0x38>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2001      	movs	r0, #1
 8003516:	fa00 f202 	lsl.w	r2, r0, r2
 800351a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000e100 	.word	0xe000e100

08003530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db0a      	blt.n	800355a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	490c      	ldr	r1, [pc, #48]	; (800357c <__NVIC_SetPriority+0x4c>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	440b      	add	r3, r1
 8003554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003558:	e00a      	b.n	8003570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4908      	ldr	r1, [pc, #32]	; (8003580 <__NVIC_SetPriority+0x50>)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	3b04      	subs	r3, #4
 8003568:	0112      	lsls	r2, r2, #4
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	440b      	add	r3, r1
 800356e:	761a      	strb	r2, [r3, #24]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000e100 	.word	0xe000e100
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f1c3 0307 	rsb	r3, r3, #7
 800359e:	2b04      	cmp	r3, #4
 80035a0:	bf28      	it	cs
 80035a2:	2304      	movcs	r3, #4
 80035a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d902      	bls.n	80035b4 <NVIC_EncodePriority+0x30>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3b03      	subs	r3, #3
 80035b2:	e000      	b.n	80035b6 <NVIC_EncodePriority+0x32>
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	401a      	ands	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035cc:	f04f 31ff 	mov.w	r1, #4294967295
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	43d9      	mvns	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	4313      	orrs	r3, r2
         );
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3724      	adds	r7, #36	; 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035fc:	d301      	bcc.n	8003602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fe:	2301      	movs	r3, #1
 8003600:	e00f      	b.n	8003622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <SysTick_Config+0x40>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360a:	210f      	movs	r1, #15
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	f7ff ff8e 	bl	8003530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <SysTick_Config+0x40>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <SysTick_Config+0x40>)
 800361c:	2207      	movs	r2, #7
 800361e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	e000e010 	.word	0xe000e010

08003630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff ff29 	bl	8003490 <__NVIC_SetPriorityGrouping>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003658:	f7ff ff3e 	bl	80034d8 <__NVIC_GetPriorityGrouping>
 800365c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff ff8e 	bl	8003584 <NVIC_EncodePriority>
 8003668:	4602      	mov	r2, r0
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff5d 	bl	8003530 <__NVIC_SetPriority>
}
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff31 	bl	80034f4 <__NVIC_EnableIRQ>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ffa2 	bl	80035ec <SysTick_Config>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c2:	e154      	b.n	800396e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2101      	movs	r1, #1
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	4013      	ands	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8146 	beq.w	8003968 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d005      	beq.n	80036f4 <HAL_GPIO_Init+0x40>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d130      	bne.n	8003756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800372a:	2201      	movs	r2, #1
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f003 0201 	and.w	r2, r3, #1
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b03      	cmp	r3, #3
 8003760:	d017      	beq.n	8003792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	2203      	movs	r2, #3
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d123      	bne.n	80037e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	08da      	lsrs	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3208      	adds	r2, #8
 80037a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	220f      	movs	r2, #15
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	08da      	lsrs	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3208      	adds	r2, #8
 80037e0:	6939      	ldr	r1, [r7, #16]
 80037e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	2203      	movs	r2, #3
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0203 	and.w	r2, r3, #3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80a0 	beq.w	8003968 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003828:	4b58      	ldr	r3, [pc, #352]	; (800398c <HAL_GPIO_Init+0x2d8>)
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	4a57      	ldr	r2, [pc, #348]	; (800398c <HAL_GPIO_Init+0x2d8>)
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	6193      	str	r3, [r2, #24]
 8003834:	4b55      	ldr	r3, [pc, #340]	; (800398c <HAL_GPIO_Init+0x2d8>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003840:	4a53      	ldr	r2, [pc, #332]	; (8003990 <HAL_GPIO_Init+0x2dc>)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	089b      	lsrs	r3, r3, #2
 8003846:	3302      	adds	r3, #2
 8003848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	220f      	movs	r2, #15
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800386a:	d019      	beq.n	80038a0 <HAL_GPIO_Init+0x1ec>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a49      	ldr	r2, [pc, #292]	; (8003994 <HAL_GPIO_Init+0x2e0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <HAL_GPIO_Init+0x1e8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a48      	ldr	r2, [pc, #288]	; (8003998 <HAL_GPIO_Init+0x2e4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00d      	beq.n	8003898 <HAL_GPIO_Init+0x1e4>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a47      	ldr	r2, [pc, #284]	; (800399c <HAL_GPIO_Init+0x2e8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <HAL_GPIO_Init+0x1e0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a46      	ldr	r2, [pc, #280]	; (80039a0 <HAL_GPIO_Init+0x2ec>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_GPIO_Init+0x1dc>
 800388c:	2304      	movs	r3, #4
 800388e:	e008      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 8003890:	2305      	movs	r3, #5
 8003892:	e006      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 8003894:	2303      	movs	r3, #3
 8003896:	e004      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 8003898:	2302      	movs	r3, #2
 800389a:	e002      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 80038a0:	2300      	movs	r3, #0
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	f002 0203 	and.w	r2, r2, #3
 80038a8:	0092      	lsls	r2, r2, #2
 80038aa:	4093      	lsls	r3, r2
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038b2:	4937      	ldr	r1, [pc, #220]	; (8003990 <HAL_GPIO_Init+0x2dc>)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	3302      	adds	r3, #2
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c0:	4b38      	ldr	r3, [pc, #224]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038e4:	4a2f      	ldr	r2, [pc, #188]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ea:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4013      	ands	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800390e:	4a25      	ldr	r2, [pc, #148]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003914:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	43db      	mvns	r3, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003938:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800393e:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	43db      	mvns	r3, r3
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003962:	4a10      	ldr	r2, [pc, #64]	; (80039a4 <HAL_GPIO_Init+0x2f0>)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	3301      	adds	r3, #1
 800396c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	f47f aea3 	bne.w	80036c4 <HAL_GPIO_Init+0x10>
  }
}
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40021000 	.word	0x40021000
 8003990:	40010000 	.word	0x40010000
 8003994:	48000400 	.word	0x48000400
 8003998:	48000800 	.word	0x48000800
 800399c:	48000c00 	.word	0x48000c00
 80039a0:	48001000 	.word	0x48001000
 80039a4:	40010400 	.word	0x40010400

080039a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	887b      	ldrh	r3, [r7, #2]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	e001      	b.n	80039ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
 80039e4:	4613      	mov	r3, r2
 80039e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e8:	787b      	ldrb	r3, [r7, #1]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039f4:	e002      	b.n	80039fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039f6:	887a      	ldrh	r2, [r7, #2]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d006      	beq.n	8003a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a1e:	4a05      	ldr	r2, [pc, #20]	; (8003a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fdbc 	bl	80025a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40010400 	.word	0x40010400

08003a38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3a:	b08b      	sub	sp, #44	; 0x2c
 8003a3c:	af06      	add	r7, sp, #24
 8003a3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e0c4      	b.n	8003bd4 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f008 fab0 	bl	800bfc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2203      	movs	r2, #3
 8003a68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f004 f91c 	bl	8007cae <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
 8003a7a:	e040      	b.n	8003afe <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	2201      	movs	r2, #1
 8003a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	440b      	add	r3, r1
 8003aa2:	7bfa      	ldrb	r2, [r7, #15]
 8003aa4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3303      	adds	r3, #3
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	440b      	add	r3, r1
 8003aca:	3338      	adds	r3, #56	; 0x38
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	440b      	add	r3, r1
 8003ade:	333c      	adds	r3, #60	; 0x3c
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ae4:	7bfa      	ldrb	r2, [r7, #15]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	440b      	add	r3, r1
 8003af2:	3340      	adds	r3, #64	; 0x40
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	3301      	adds	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	7bfa      	ldrb	r2, [r7, #15]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d3b9      	bcc.n	8003a7c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e044      	b.n	8003b98 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b0e:	7bfa      	ldrb	r2, [r7, #15]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	440b      	add	r3, r1
 8003b32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b3a:	7bfa      	ldrb	r2, [r7, #15]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	440b      	add	r3, r1
 8003b48:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	440b      	add	r3, r1
 8003b74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	440b      	add	r3, r1
 8003b8a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	3301      	adds	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d3b5      	bcc.n	8003b0e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	687e      	ldr	r6, [r7, #4]
 8003baa:	466d      	mov	r5, sp
 8003bac:	f106 0410 	add.w	r4, r6, #16
 8003bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	602b      	str	r3, [r5, #0]
 8003bb8:	1d33      	adds	r3, r6, #4
 8003bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bbc:	6838      	ldr	r0, [r7, #0]
 8003bbe:	f004 f891 	bl	8007ce4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bdc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_PCD_Start+0x16>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e016      	b.n	8003c20 <HAL_PCD_Start+0x44>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f004 f83e 	bl	8007c80 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003c04:	2101      	movs	r1, #1
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f008 fc82 	bl	800c510 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f006 fafe 	bl	800a212 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f006 faf7 	bl	800a228 <USB_ReadInterrupts>
 8003c3a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fab2 	bl	80041b0 <PCD_EP_ISR_Handler>

    return;
 8003c4c:	e0bd      	b.n	8003dca <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6a:	b292      	uxth	r2, r2
 8003c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f008 fa50 	bl	800c116 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c76:	2100      	movs	r1, #0
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f8a9 	bl	8003dd0 <HAL_PCD_SetAddress>

    return;
 8003c7e:	e0a4      	b.n	8003dca <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c9c:	b292      	uxth	r2, r2
 8003c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003ca2:	e092      	b.n	8003dca <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00c      	beq.n	8003cc8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cc0:	b292      	uxth	r2, r2
 8003cc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003cc6:	e080      	b.n	8003dca <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d027      	beq.n	8003d22 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	b292      	uxth	r2, r2
 8003ce6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0208 	bic.w	r2, r2, #8
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f008 fa40 	bl	800c188 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d1a:	b292      	uxth	r2, r2
 8003d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d20:	e053      	b.n	8003dca <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d027      	beq.n	8003d7c <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0208 	orr.w	r2, r2, #8
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d56:	b292      	uxth	r2, r2
 8003d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0204 	orr.w	r2, r2, #4
 8003d6e:	b292      	uxth	r2, r2
 8003d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f008 f9ed 	bl	800c154 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d7a:	e026      	b.n	8003dca <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00f      	beq.n	8003da6 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d98:	b292      	uxth	r2, r2
 8003d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f008 f9ab 	bl	800c0fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003da4:	e011      	b.n	8003dca <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00c      	beq.n	8003dca <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003dc8:	bf00      	nop
  }
}
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_PCD_SetAddress+0x1a>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e013      	b.n	8003e12 <HAL_PCD_SetAddress+0x42>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f006 f9f1 	bl	800a1ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	4608      	mov	r0, r1
 8003e24:	4611      	mov	r1, r2
 8003e26:	461a      	mov	r2, r3
 8003e28:	4603      	mov	r3, r0
 8003e2a:	70fb      	strb	r3, [r7, #3]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	803b      	strh	r3, [r7, #0]
 8003e30:	4613      	mov	r3, r2
 8003e32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	da0e      	bge.n	8003e5e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	705a      	strb	r2, [r3, #1]
 8003e5c:	e00e      	b.n	8003e7c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 0207 	and.w	r2, r3, #7
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e88:	883a      	ldrh	r2, [r7, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	78ba      	ldrb	r2, [r7, #2]
 8003e92:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e94:	78bb      	ldrb	r3, [r7, #2]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d102      	bne.n	8003ea0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_PCD_EP_Open+0x94>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e00e      	b.n	8003ecc <HAL_PCD_EP_Open+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68f9      	ldr	r1, [r7, #12]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f003 ff33 	bl	8007d28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003eca:	7afb      	ldrb	r3, [r7, #11]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	da0e      	bge.n	8003f06 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	4413      	add	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	705a      	strb	r2, [r3, #1]
 8003f04:	e00e      	b.n	8003f24 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	f003 0207 	and.w	r2, r3, #7
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_PCD_EP_Close+0x6a>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e00e      	b.n	8003f5c <HAL_PCD_EP_Close+0x88>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f004 faaf 	bl	80084b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	460b      	mov	r3, r1
 8003f72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f74:	7afb      	ldrb	r3, [r7, #11]
 8003f76:	f003 0207 	and.w	r2, r3, #7
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4413      	add	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fa4:	7afb      	ldrb	r3, [r7, #11]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6979      	ldr	r1, [r7, #20]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f004 fc67 	bl	800888a <USB_EPStartXfer>

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	f003 0207 	and.w	r2, r3, #7
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003fe8:	681b      	ldr	r3, [r3, #0]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b086      	sub	sp, #24
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
 8004002:	460b      	mov	r3, r1
 8004004:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004006:	7afb      	ldrb	r3, [r7, #11]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2200      	movs	r2, #0
 800403a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2201      	movs	r2, #1
 8004040:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004042:	7afb      	ldrb	r3, [r7, #11]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	b2da      	uxtb	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6979      	ldr	r1, [r7, #20]
 8004054:	4618      	mov	r0, r3
 8004056:	f004 fc18 	bl	800888a <USB_EPStartXfer>

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	f003 0207 	and.w	r2, r3, #7
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	429a      	cmp	r2, r3
 800407c:	d901      	bls.n	8004082 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e03e      	b.n	8004100 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004086:	2b00      	cmp	r3, #0
 8004088:	da0e      	bge.n	80040a8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	705a      	strb	r2, [r3, #1]
 80040a6:	e00c      	b.n	80040c2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_PCD_EP_SetStall+0x7e>
 80040de:	2302      	movs	r3, #2
 80040e0:	e00e      	b.n	8004100 <HAL_PCD_EP_SetStall+0x9c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f005 ff7b 	bl	8009fec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	f003 020f 	and.w	r2, r3, #15
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d901      	bls.n	8004126 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e040      	b.n	80041a8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800412a:	2b00      	cmp	r3, #0
 800412c:	da0e      	bge.n	800414c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	705a      	strb	r2, [r3, #1]
 800414a:	e00e      	b.n	800416a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	f003 0207 	and.w	r2, r3, #7
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	b2da      	uxtb	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_PCD_EP_ClrStall+0x82>
 8004186:	2302      	movs	r3, #2
 8004188:	e00e      	b.n	80041a8 <HAL_PCD_EP_ClrStall+0xa0>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	4618      	mov	r0, r3
 800419a:	f005 ff78 	bl	800a08e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b096      	sub	sp, #88	; 0x58
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041b8:	e3bf      	b.n	800493a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80041c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80041d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f040 8179 	bne.w	80044d0 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80041de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d152      	bne.n	8004290 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	81fb      	strh	r3, [r7, #14]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	89fb      	ldrh	r3, [r7, #14]
 8004202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800420a:	b29b      	uxth	r3, r3
 800420c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3328      	adds	r3, #40	; 0x28
 8004212:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800421c:	b29b      	uxth	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4413      	add	r3, r2
 8004228:	3302      	adds	r3, #2
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800423c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800423e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004242:	695a      	ldr	r2, [r3, #20]
 8004244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	441a      	add	r2, r3
 800424a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800424e:	2100      	movs	r1, #0
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f007 ff38 	bl	800c0c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 836b 	beq.w	800493a <PCD_EP_ISR_Handler+0x78a>
 8004264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 8366 	bne.w	800493a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800427a:	b2da      	uxtb	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	b292      	uxth	r2, r2
 8004282:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800428e:	e354      	b.n	800493a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004296:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80042a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d034      	beq.n	8004318 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	3306      	adds	r3, #6
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80042e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80042e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f005 fff1 	bl	800a2d4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80042fe:	4013      	ands	r3, r2
 8004300:	823b      	strh	r3, [r7, #16]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	8a3a      	ldrh	r2, [r7, #16]
 8004308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800430c:	b292      	uxth	r2, r2
 800430e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f007 feab 	bl	800c06c <HAL_PCD_SetupStageCallback>
 8004316:	e310      	b.n	800493a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004318:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800431c:	2b00      	cmp	r3, #0
 800431e:	f280 830c 	bge.w	800493a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29a      	uxth	r2, r3
 800432a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800432e:	4013      	ands	r3, r2
 8004330:	83fb      	strh	r3, [r7, #30]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	8bfa      	ldrh	r2, [r7, #30]
 8004338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800433c:	b292      	uxth	r2, r2
 800433e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004348:	b29b      	uxth	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	3306      	adds	r3, #6
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800436a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800436c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d019      	beq.n	80043a8 <PCD_EP_ISR_Handler+0x1f8>
 8004374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d015      	beq.n	80043a8 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004382:	6959      	ldr	r1, [r3, #20]
 8004384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004386:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800438c:	b29b      	uxth	r3, r3
 800438e:	f005 ffa1 	bl	800a2d4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004394:	695a      	ldr	r2, [r3, #20]
 8004396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	441a      	add	r2, r3
 800439c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800439e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80043a0:	2100      	movs	r1, #0
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f007 fe74 	bl	800c090 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80043b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 82bd 	bne.w	800493a <PCD_EP_ISR_Handler+0x78a>
 80043c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80043c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043cc:	f000 82b5 	beq.w	800493a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043de:	b29b      	uxth	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	4413      	add	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	801a      	strh	r2, [r3, #0]
 8004400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b3e      	cmp	r3, #62	; 0x3e
 8004406:	d91d      	bls.n	8004444 <PCD_EP_ISR_Handler+0x294>
 8004408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	647b      	str	r3, [r7, #68]	; 0x44
 8004410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <PCD_EP_ISR_Handler+0x272>
 800441c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441e:	3b01      	subs	r3, #1
 8004420:	647b      	str	r3, [r7, #68]	; 0x44
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29a      	uxth	r2, r3
 8004428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442a:	b29b      	uxth	r3, r3
 800442c:	029b      	lsls	r3, r3, #10
 800442e:	b29b      	uxth	r3, r3
 8004430:	4313      	orrs	r3, r2
 8004432:	b29b      	uxth	r3, r3
 8004434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443c:	b29a      	uxth	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	801a      	strh	r2, [r3, #0]
 8004442:	e026      	b.n	8004492 <PCD_EP_ISR_Handler+0x2e2>
 8004444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <PCD_EP_ISR_Handler+0x2b2>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800445a:	b29a      	uxth	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	801a      	strh	r2, [r3, #0]
 8004460:	e017      	b.n	8004492 <PCD_EP_ISR_Handler+0x2e2>
 8004462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	085b      	lsrs	r3, r3, #1
 8004468:	647b      	str	r3, [r7, #68]	; 0x44
 800446a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <PCD_EP_ISR_Handler+0x2cc>
 8004476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004478:	3301      	adds	r3, #1
 800447a:	647b      	str	r3, [r7, #68]	; 0x44
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b29a      	uxth	r2, r3
 8004482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004484:	b29b      	uxth	r3, r3
 8004486:	029b      	lsls	r3, r3, #10
 8004488:	b29b      	uxth	r3, r3
 800448a:	4313      	orrs	r3, r2
 800448c:	b29a      	uxth	r2, r3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	827b      	strh	r3, [r7, #18]
 80044a4:	8a7b      	ldrh	r3, [r7, #18]
 80044a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044aa:	827b      	strh	r3, [r7, #18]
 80044ac:	8a7b      	ldrh	r3, [r7, #18]
 80044ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044b2:	827b      	strh	r3, [r7, #18]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	8a7b      	ldrh	r3, [r7, #18]
 80044ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	8013      	strh	r3, [r2, #0]
 80044ce:	e234      	b.n	800493a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044e4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f280 80fc 	bge.w	80046e6 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b29a      	uxth	r2, r3
 8004500:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004504:	4013      	ands	r3, r2
 8004506:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800451c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004520:	b292      	uxth	r2, r2
 8004522:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004524:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800453a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453c:	7b1b      	ldrb	r3, [r3, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d125      	bne.n	800458e <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454a:	b29b      	uxth	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4413      	add	r3, r2
 8004556:	3306      	adds	r3, #6
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800456a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800456e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8092 	beq.w	800469c <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457e:	6959      	ldr	r1, [r3, #20]
 8004580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004582:	88da      	ldrh	r2, [r3, #6]
 8004584:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004588:	f005 fea4 	bl	800a2d4 <USB_ReadPMA>
 800458c:	e086      	b.n	800469c <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800458e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004590:	78db      	ldrb	r3, [r3, #3]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d10a      	bne.n	80045ac <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004596:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800459a:	461a      	mov	r2, r3
 800459c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f9d9 	bl	8004956 <HAL_PCD_EP_DB_Receive>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80045aa:	e077      	b.n	800469c <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	441a      	add	r2, r3
 80045d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80045dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d024      	beq.n	8004654 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004612:	b29b      	uxth	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	3302      	adds	r3, #2
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004632:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004636:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800463a:	2b00      	cmp	r3, #0
 800463c:	d02e      	beq.n	800469c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004644:	6959      	ldr	r1, [r3, #20]
 8004646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004648:	891a      	ldrh	r2, [r3, #8]
 800464a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800464e:	f005 fe41 	bl	800a2d4 <USB_ReadPMA>
 8004652:	e023      	b.n	800469c <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465c:	b29b      	uxth	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	3306      	adds	r3, #6
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800467c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004680:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468e:	6959      	ldr	r1, [r3, #20]
 8004690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004692:	895a      	ldrh	r2, [r3, #10]
 8004694:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004698:	f005 fe1c 	bl	800a2d4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800469c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80046a4:	441a      	add	r2, r3
 80046a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80046aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80046b2:	441a      	add	r2, r3
 80046b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80046b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <PCD_EP_ISR_Handler+0x51c>
 80046c0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80046c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d206      	bcs.n	80046da <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80046cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f007 fcdc 	bl	800c090 <HAL_PCD_DataOutStageCallback>
 80046d8:	e005      	b.n	80046e6 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046e0:	4618      	mov	r0, r3
 80046e2:	f004 f8d2 	bl	800888a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80046e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8123 	beq.w	800493a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80046f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4413      	add	r3, r2
 8004706:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800471e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004722:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	441a      	add	r2, r3
 8004734:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800473c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004740:	b29b      	uxth	r3, r3
 8004742:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004746:	78db      	ldrb	r3, [r3, #3]
 8004748:	2b01      	cmp	r3, #1
 800474a:	f040 80a2 	bne.w	8004892 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800474e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004750:	2200      	movs	r2, #0
 8004752:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004756:	7b1b      	ldrb	r3, [r3, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8093 	beq.w	8004884 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800475e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d046      	beq.n	80047f8 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800476a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800476c:	785b      	ldrb	r3, [r3, #1]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d126      	bne.n	80047c0 <PCD_EP_ISR_Handler+0x610>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004780:	b29b      	uxth	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	4413      	add	r3, r2
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
 800478a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	011a      	lsls	r2, r3, #4
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	4413      	add	r3, r2
 8004794:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004798:	623b      	str	r3, [r7, #32]
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	801a      	strh	r2, [r3, #0]
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	801a      	strh	r2, [r3, #0]
 80047be:	e061      	b.n	8004884 <PCD_EP_ISR_Handler+0x6d4>
 80047c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d15d      	bne.n	8004884 <PCD_EP_ISR_Handler+0x6d4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	4413      	add	r3, r2
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	011a      	lsls	r2, r3, #4
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	4413      	add	r3, r2
 80047ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	2200      	movs	r2, #0
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e045      	b.n	8004884 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d126      	bne.n	8004854 <PCD_EP_ISR_Handler+0x6a4>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	637b      	str	r3, [r7, #52]	; 0x34
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004814:	b29b      	uxth	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481a:	4413      	add	r3, r2
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
 800481e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	011a      	lsls	r2, r3, #4
 8004824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004826:	4413      	add	r3, r2
 8004828:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800482c:	633b      	str	r3, [r7, #48]	; 0x30
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004838:	b29a      	uxth	r2, r3
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	801a      	strh	r2, [r3, #0]
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800484c:	b29a      	uxth	r2, r3
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e017      	b.n	8004884 <PCD_EP_ISR_Handler+0x6d4>
 8004854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d113      	bne.n	8004884 <PCD_EP_ISR_Handler+0x6d4>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004864:	b29b      	uxth	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486a:	4413      	add	r3, r2
 800486c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	011a      	lsls	r2, r3, #4
 8004874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004876:	4413      	add	r3, r2
 8004878:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800487c:	63bb      	str	r3, [r7, #56]	; 0x38
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	2200      	movs	r2, #0
 8004882:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f007 fc1b 	bl	800c0c6 <HAL_PCD_DataInStageCallback>
 8004890:	e053      	b.n	800493a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004892:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d146      	bne.n	800492c <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4413      	add	r3, r2
 80048b2:	3302      	adds	r3, #2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80048ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d907      	bls.n	80048e6 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80048d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048de:	1ad2      	subs	r2, r2, r3
 80048e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e2:	619a      	str	r2, [r3, #24]
 80048e4:	e002      	b.n	80048ec <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80048e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e8:	2200      	movs	r2, #0
 80048ea:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80048ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f007 fbe3 	bl	800c0c6 <HAL_PCD_DataInStageCallback>
 8004900:	e01b      	b.n	800493a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800490a:	441a      	add	r2, r3
 800490c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800490e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004918:	441a      	add	r2, r3
 800491a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800491c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004924:	4618      	mov	r0, r3
 8004926:	f003 ffb0 	bl	800888a <USB_EPStartXfer>
 800492a:	e006      	b.n	800493a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800492c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004930:	461a      	mov	r2, r3
 8004932:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f91b 	bl	8004b70 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004942:	b29b      	uxth	r3, r3
 8004944:	b21b      	sxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	f6ff ac37 	blt.w	80041ba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3758      	adds	r7, #88	; 0x58
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b088      	sub	sp, #32
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	4613      	mov	r3, r2
 8004962:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d07e      	beq.n	8004a6c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004976:	b29b      	uxth	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4413      	add	r3, r2
 8004982:	3302      	adds	r3, #2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004996:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	699a      	ldr	r2, [r3, #24]
 800499c:	8b7b      	ldrh	r3, [r7, #26]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d306      	bcc.n	80049b0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	8b7b      	ldrh	r3, [r7, #26]
 80049a8:	1ad2      	subs	r2, r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	619a      	str	r2, [r3, #24]
 80049ae:	e002      	b.n	80049b6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2200      	movs	r2, #0
 80049b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d123      	bne.n	8004a06 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d8:	833b      	strh	r3, [r7, #24]
 80049da:	8b3b      	ldrh	r3, [r7, #24]
 80049dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049e0:	833b      	strh	r3, [r7, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	441a      	add	r2, r3
 80049f0:	8b3b      	ldrh	r3, [r7, #24]
 80049f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01f      	beq.n	8004a50 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	82fb      	strh	r3, [r7, #22]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	8afb      	ldrh	r3, [r7, #22]
 8004a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a50:	8b7b      	ldrh	r3, [r7, #26]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 8087 	beq.w	8004b66 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6959      	ldr	r1, [r3, #20]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	891a      	ldrh	r2, [r3, #8]
 8004a64:	8b7b      	ldrh	r3, [r7, #26]
 8004a66:	f005 fc35 	bl	800a2d4 <USB_ReadPMA>
 8004a6a:	e07c      	b.n	8004b66 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4413      	add	r3, r2
 8004a80:	3306      	adds	r3, #6
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	8b7b      	ldrh	r3, [r7, #26]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d306      	bcc.n	8004aae <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	8b7b      	ldrh	r3, [r7, #26]
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	619a      	str	r2, [r3, #24]
 8004aac:	e002      	b.n	8004ab4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d123      	bne.n	8004b04 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad6:	83fb      	strh	r3, [r7, #30]
 8004ad8:	8bfb      	ldrh	r3, [r7, #30]
 8004ada:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ade:	83fb      	strh	r3, [r7, #30]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	8bfb      	ldrh	r3, [r7, #30]
 8004af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d11f      	bne.n	8004b4e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b28:	83bb      	strh	r3, [r7, #28]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	8bbb      	ldrh	r3, [r7, #28]
 8004b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b4e:	8b7b      	ldrh	r3, [r7, #26]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6959      	ldr	r1, [r3, #20]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	895a      	ldrh	r2, [r3, #10]
 8004b60:	8b7b      	ldrh	r3, [r7, #26]
 8004b62:	f005 fbb7 	bl	800a2d4 <USB_ReadPMA>
    }
  }

  return count;
 8004b66:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b0a4      	sub	sp, #144	; 0x90
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 81dd 	beq.w	8004f44 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bb2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d907      	bls.n	8004bd2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004bca:	1ad2      	subs	r2, r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	619a      	str	r2, [r3, #24]
 8004bd0:	e002      	b.n	8004bd8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 80b9 	bne.w	8004d54 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d126      	bne.n	8004c38 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfe:	4413      	add	r3, r2
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	011a      	lsls	r2, r3, #4
 8004c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	801a      	strh	r2, [r3, #0]
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	801a      	strh	r2, [r3, #0]
 8004c36:	e01a      	b.n	8004c6e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	785b      	ldrb	r3, [r3, #1]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d116      	bne.n	8004c6e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	4413      	add	r3, r2
 8004c56:	637b      	str	r3, [r7, #52]	; 0x34
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	011a      	lsls	r2, r3, #4
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c60:	4413      	add	r3, r2
 8004c62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	785b      	ldrb	r3, [r3, #1]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d126      	bne.n	8004cca <HAL_PCD_EP_DB_Transmit+0x15a>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	011a      	lsls	r2, r3, #4
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ca2:	61bb      	str	r3, [r7, #24]
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	801a      	strh	r2, [r3, #0]
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	801a      	strh	r2, [r3, #0]
 8004cc8:	e017      	b.n	8004cfa <HAL_PCD_EP_DB_Transmit+0x18a>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	785b      	ldrb	r3, [r3, #1]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d113      	bne.n	8004cfa <HAL_PCD_EP_DB_Transmit+0x18a>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	4413      	add	r3, r2
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	011a      	lsls	r2, r3, #4
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	4413      	add	r3, r2
 8004cee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cf2:	623b      	str	r3, [r7, #32]
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f007 f9e0 	bl	800c0c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 82fc 	beq.w	800530a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2c:	82fb      	strh	r3, [r7, #22]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	441a      	add	r2, r3
 8004d3c:	8afb      	ldrh	r3, [r7, #22]
 8004d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	8013      	strh	r3, [r2, #0]
 8004d52:	e2da      	b.n	800530a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d54:	88fb      	ldrh	r3, [r7, #6]
 8004d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d021      	beq.n	8004da2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d78:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	441a      	add	r2, r3
 8004d8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	f040 82ae 	bne.w	800530a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	695a      	ldr	r2, [r3, #20]
 8004db2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004db6:	441a      	add	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	6a1a      	ldr	r2, [r3, #32]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d30b      	bcc.n	8004dee <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004de6:	1ad2      	subs	r2, r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	621a      	str	r2, [r3, #32]
 8004dec:	e017      	b.n	8004e1e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d108      	bne.n	8004e08 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004df6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004dfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e06:	e00a      	b.n	8004e1e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	785b      	ldrb	r3, [r3, #1]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d165      	bne.n	8004ef2 <HAL_PCD_EP_DB_Transmit+0x382>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3a:	4413      	add	r3, r2
 8004e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	011a      	lsls	r2, r3, #4
 8004e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e46:	4413      	add	r3, r2
 8004e48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	801a      	strh	r2, [r3, #0]
 8004e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e62:	2b3e      	cmp	r3, #62	; 0x3e
 8004e64:	d91d      	bls.n	8004ea2 <HAL_PCD_EP_DB_Transmit+0x332>
 8004e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d102      	bne.n	8004e80 <HAL_PCD_EP_DB_Transmit+0x310>
 8004e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	029b      	lsls	r3, r3, #10
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	e044      	b.n	8004f2c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <HAL_PCD_EP_DB_Transmit+0x350>
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	e035      	b.n	8004f2c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <HAL_PCD_EP_DB_Transmit+0x36a>
 8004ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	029b      	lsls	r3, r3, #10
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eee:	801a      	strh	r2, [r3, #0]
 8004ef0:	e01c      	b.n	8004f2c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d118      	bne.n	8004f2c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	647b      	str	r3, [r7, #68]	; 0x44
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f0e:	4413      	add	r3, r2
 8004f10:	647b      	str	r3, [r7, #68]	; 0x44
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	011a      	lsls	r2, r3, #4
 8004f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f20:	643b      	str	r3, [r7, #64]	; 0x40
 8004f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f2a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	6959      	ldr	r1, [r3, #20]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	891a      	ldrh	r2, [r3, #8]
 8004f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f005 f983 	bl	800a248 <USB_WritePMA>
 8004f42:	e1e2      	b.n	800530a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	3306      	adds	r3, #6
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f6c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	699a      	ldr	r2, [r3, #24]
 8004f74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d307      	bcc.n	8004f8c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f84:	1ad2      	subs	r2, r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	619a      	str	r2, [r3, #24]
 8004f8a:	e002      	b.n	8004f92 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 80c0 	bne.w	800511c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d126      	bne.n	8004ff2 <HAL_PCD_EP_DB_Transmit+0x482>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fb8:	4413      	add	r3, r2
 8004fba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	011a      	lsls	r2, r3, #4
 8004fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fca:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fda:	801a      	strh	r2, [r3, #0]
 8004fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	e01a      	b.n	8005028 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	785b      	ldrb	r3, [r3, #1]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d116      	bne.n	8005028 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	667b      	str	r3, [r7, #100]	; 0x64
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005008:	b29b      	uxth	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800500e:	4413      	add	r3, r2
 8005010:	667b      	str	r3, [r7, #100]	; 0x64
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	011a      	lsls	r2, r3, #4
 8005018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800501a:	4413      	add	r3, r2
 800501c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005020:	663b      	str	r3, [r7, #96]	; 0x60
 8005022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005024:	2200      	movs	r2, #0
 8005026:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	677b      	str	r3, [r7, #116]	; 0x74
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	785b      	ldrb	r3, [r3, #1]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d12b      	bne.n	800508e <HAL_PCD_EP_DB_Transmit+0x51e>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005044:	b29b      	uxth	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504a:	4413      	add	r3, r2
 800504c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	011a      	lsls	r2, r3, #4
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	4413      	add	r3, r2
 8005058:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800505c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800506c:	b29a      	uxth	r2, r3
 800506e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	b29b      	uxth	r3, r3
 800507c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005084:	b29a      	uxth	r2, r3
 8005086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800508a:	801a      	strh	r2, [r3, #0]
 800508c:	e017      	b.n	80050be <HAL_PCD_EP_DB_Transmit+0x54e>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d113      	bne.n	80050be <HAL_PCD_EP_DB_Transmit+0x54e>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509e:	b29b      	uxth	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050a4:	4413      	add	r3, r2
 80050a6:	677b      	str	r3, [r7, #116]	; 0x74
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	011a      	lsls	r2, r3, #4
 80050ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b0:	4413      	add	r3, r2
 80050b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050b6:	673b      	str	r3, [r7, #112]	; 0x70
 80050b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050ba:	2200      	movs	r2, #0
 80050bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	4619      	mov	r1, r3
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f006 fffe 	bl	800c0c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f040 811a 	bne.w	800530a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800510a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800510e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005116:	b29b      	uxth	r3, r3
 8005118:	8013      	strh	r3, [r2, #0]
 800511a:	e0f6      	b.n	800530a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d121      	bne.n	800516a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005140:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	441a      	add	r2, r3
 8005152:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005166:	b29b      	uxth	r3, r3
 8005168:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005170:	2b01      	cmp	r3, #1
 8005172:	f040 80ca 	bne.w	800530a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800517e:	441a      	add	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800518c:	441a      	add	r2, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6a1a      	ldr	r2, [r3, #32]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	429a      	cmp	r2, r3
 800519c:	d30b      	bcc.n	80051b6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6a1a      	ldr	r2, [r3, #32]
 80051aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ae:	1ad2      	subs	r2, r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	621a      	str	r2, [r3, #32]
 80051b4:	e017      	b.n	80051e6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d108      	bne.n	80051d0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80051be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80051c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051ce:	e00a      	b.n	80051e6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	657b      	str	r3, [r7, #84]	; 0x54
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d165      	bne.n	80052c0 <HAL_PCD_EP_DB_Transmit+0x750>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005202:	b29b      	uxth	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005208:	4413      	add	r3, r2
 800520a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	011a      	lsls	r2, r3, #4
 8005212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005214:	4413      	add	r3, r2
 8005216:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800521a:	65bb      	str	r3, [r7, #88]	; 0x58
 800521c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005226:	b29a      	uxth	r2, r3
 8005228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005230:	2b3e      	cmp	r3, #62	; 0x3e
 8005232:	d91d      	bls.n	8005270 <HAL_PCD_EP_DB_Transmit+0x700>
 8005234:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	66bb      	str	r3, [r7, #104]	; 0x68
 800523c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005240:	f003 031f 	and.w	r3, r3, #31
 8005244:	2b00      	cmp	r3, #0
 8005246:	d102      	bne.n	800524e <HAL_PCD_EP_DB_Transmit+0x6de>
 8005248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800524a:	3b01      	subs	r3, #1
 800524c:	66bb      	str	r3, [r7, #104]	; 0x68
 800524e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29a      	uxth	r2, r3
 8005254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005256:	b29b      	uxth	r3, r3
 8005258:	029b      	lsls	r3, r3, #10
 800525a:	b29b      	uxth	r3, r3
 800525c:	4313      	orrs	r3, r2
 800525e:	b29b      	uxth	r3, r3
 8005260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005268:	b29a      	uxth	r2, r3
 800526a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	e041      	b.n	80052f4 <HAL_PCD_EP_DB_Transmit+0x784>
 8005270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <HAL_PCD_EP_DB_Transmit+0x71e>
 8005278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005286:	b29a      	uxth	r2, r3
 8005288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800528a:	801a      	strh	r2, [r3, #0]
 800528c:	e032      	b.n	80052f4 <HAL_PCD_EP_DB_Transmit+0x784>
 800528e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	66bb      	str	r3, [r7, #104]	; 0x68
 8005296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_PCD_EP_DB_Transmit+0x738>
 80052a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052a4:	3301      	adds	r3, #1
 80052a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80052a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	029b      	lsls	r3, r3, #10
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	4313      	orrs	r3, r2
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052bc:	801a      	strh	r2, [r3, #0]
 80052be:	e019      	b.n	80052f4 <HAL_PCD_EP_DB_Transmit+0x784>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d115      	bne.n	80052f4 <HAL_PCD_EP_DB_Transmit+0x784>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d6:	4413      	add	r3, r2
 80052d8:	657b      	str	r3, [r7, #84]	; 0x54
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	011a      	lsls	r2, r3, #4
 80052e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e2:	4413      	add	r3, r2
 80052e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052e8:	653b      	str	r3, [r7, #80]	; 0x50
 80052ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6959      	ldr	r1, [r3, #20]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	895a      	ldrh	r2, [r3, #10]
 8005300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005304:	b29b      	uxth	r3, r3
 8005306:	f004 ff9f 	bl	800a248 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005324:	82bb      	strh	r3, [r7, #20]
 8005326:	8abb      	ldrh	r3, [r7, #20]
 8005328:	f083 0310 	eor.w	r3, r3, #16
 800532c:	82bb      	strh	r3, [r7, #20]
 800532e:	8abb      	ldrh	r3, [r7, #20]
 8005330:	f083 0320 	eor.w	r3, r3, #32
 8005334:	82bb      	strh	r3, [r7, #20]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	441a      	add	r2, r3
 8005344:	8abb      	ldrh	r3, [r7, #20]
 8005346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800534a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005356:	b29b      	uxth	r3, r3
 8005358:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3790      	adds	r7, #144	; 0x90
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	817b      	strh	r3, [r7, #10]
 8005372:	4613      	mov	r3, r2
 8005374:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005376:	897b      	ldrh	r3, [r7, #10]
 8005378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005382:	897b      	ldrh	r3, [r7, #10]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e009      	b.n	80053ae <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800539a:	897a      	ldrh	r2, [r7, #10]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80053ae:	893b      	ldrh	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d107      	bne.n	80053c4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2200      	movs	r2, #0
 80053b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	b29a      	uxth	r2, r3
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	80da      	strh	r2, [r3, #6]
 80053c2:	e00b      	b.n	80053dc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2201      	movs	r2, #1
 80053c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	0c1b      	lsrs	r3, r3, #16
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053fc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d102      	bne.n	8005412 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f001 b823 	b.w	8006458 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 817d 	beq.w	8005722 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005428:	4bbc      	ldr	r3, [pc, #752]	; (800571c <HAL_RCC_OscConfig+0x330>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f003 030c 	and.w	r3, r3, #12
 8005430:	2b04      	cmp	r3, #4
 8005432:	d00c      	beq.n	800544e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005434:	4bb9      	ldr	r3, [pc, #740]	; (800571c <HAL_RCC_OscConfig+0x330>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 030c 	and.w	r3, r3, #12
 800543c:	2b08      	cmp	r3, #8
 800543e:	d15c      	bne.n	80054fa <HAL_RCC_OscConfig+0x10e>
 8005440:	4bb6      	ldr	r3, [pc, #728]	; (800571c <HAL_RCC_OscConfig+0x330>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544c:	d155      	bne.n	80054fa <HAL_RCC_OscConfig+0x10e>
 800544e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005452:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005456:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800545a:	fa93 f3a3 	rbit	r3, r3
 800545e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005462:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005466:	fab3 f383 	clz	r3, r3
 800546a:	b2db      	uxtb	r3, r3
 800546c:	095b      	lsrs	r3, r3, #5
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b01      	cmp	r3, #1
 8005478:	d102      	bne.n	8005480 <HAL_RCC_OscConfig+0x94>
 800547a:	4ba8      	ldr	r3, [pc, #672]	; (800571c <HAL_RCC_OscConfig+0x330>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	e015      	b.n	80054ac <HAL_RCC_OscConfig+0xc0>
 8005480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005484:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005488:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800548c:	fa93 f3a3 	rbit	r3, r3
 8005490:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005498:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800549c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80054a0:	fa93 f3a3 	rbit	r3, r3
 80054a4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80054a8:	4b9c      	ldr	r3, [pc, #624]	; (800571c <HAL_RCC_OscConfig+0x330>)
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054b0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80054b4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80054b8:	fa92 f2a2 	rbit	r2, r2
 80054bc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80054c0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80054c4:	fab2 f282 	clz	r2, r2
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	f042 0220 	orr.w	r2, r2, #32
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	f002 021f 	and.w	r2, r2, #31
 80054d4:	2101      	movs	r1, #1
 80054d6:	fa01 f202 	lsl.w	r2, r1, r2
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 811f 	beq.w	8005720 <HAL_RCC_OscConfig+0x334>
 80054e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f040 8116 	bne.w	8005720 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f000 bfaf 	b.w	8006458 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550a:	d106      	bne.n	800551a <HAL_RCC_OscConfig+0x12e>
 800550c:	4b83      	ldr	r3, [pc, #524]	; (800571c <HAL_RCC_OscConfig+0x330>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a82      	ldr	r2, [pc, #520]	; (800571c <HAL_RCC_OscConfig+0x330>)
 8005512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	e036      	b.n	8005588 <HAL_RCC_OscConfig+0x19c>
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0x158>
 800552a:	4b7c      	ldr	r3, [pc, #496]	; (800571c <HAL_RCC_OscConfig+0x330>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a7b      	ldr	r2, [pc, #492]	; (800571c <HAL_RCC_OscConfig+0x330>)
 8005530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4b79      	ldr	r3, [pc, #484]	; (800571c <HAL_RCC_OscConfig+0x330>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a78      	ldr	r2, [pc, #480]	; (800571c <HAL_RCC_OscConfig+0x330>)
 800553c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e021      	b.n	8005588 <HAL_RCC_OscConfig+0x19c>
 8005544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005548:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005554:	d10c      	bne.n	8005570 <HAL_RCC_OscConfig+0x184>
 8005556:	4b71      	ldr	r3, [pc, #452]	; (800571c <HAL_RCC_OscConfig+0x330>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a70      	ldr	r2, [pc, #448]	; (800571c <HAL_RCC_OscConfig+0x330>)
 800555c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	4b6e      	ldr	r3, [pc, #440]	; (800571c <HAL_RCC_OscConfig+0x330>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a6d      	ldr	r2, [pc, #436]	; (800571c <HAL_RCC_OscConfig+0x330>)
 8005568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e00b      	b.n	8005588 <HAL_RCC_OscConfig+0x19c>
 8005570:	4b6a      	ldr	r3, [pc, #424]	; (800571c <HAL_RCC_OscConfig+0x330>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a69      	ldr	r2, [pc, #420]	; (800571c <HAL_RCC_OscConfig+0x330>)
 8005576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	4b67      	ldr	r3, [pc, #412]	; (800571c <HAL_RCC_OscConfig+0x330>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a66      	ldr	r2, [pc, #408]	; (800571c <HAL_RCC_OscConfig+0x330>)
 8005582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005586:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005588:	4b64      	ldr	r3, [pc, #400]	; (800571c <HAL_RCC_OscConfig+0x330>)
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	f023 020f 	bic.w	r2, r3, #15
 8005590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005594:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	495f      	ldr	r1, [pc, #380]	; (800571c <HAL_RCC_OscConfig+0x330>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d059      	beq.n	8005666 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b2:	f7fd f8db 	bl	800276c <HAL_GetTick>
 80055b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055bc:	f7fd f8d6 	bl	800276c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b64      	cmp	r3, #100	; 0x64
 80055ca:	d902      	bls.n	80055d2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	f000 bf43 	b.w	8006458 <HAL_RCC_OscConfig+0x106c>
 80055d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055d6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055da:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80055de:	fa93 f3a3 	rbit	r3, r3
 80055e2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80055e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ea:	fab3 f383 	clz	r3, r3
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d102      	bne.n	8005604 <HAL_RCC_OscConfig+0x218>
 80055fe:	4b47      	ldr	r3, [pc, #284]	; (800571c <HAL_RCC_OscConfig+0x330>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	e015      	b.n	8005630 <HAL_RCC_OscConfig+0x244>
 8005604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005608:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005610:	fa93 f3a3 	rbit	r3, r3
 8005614:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800561c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005620:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005624:	fa93 f3a3 	rbit	r3, r3
 8005628:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800562c:	4b3b      	ldr	r3, [pc, #236]	; (800571c <HAL_RCC_OscConfig+0x330>)
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005634:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005638:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800563c:	fa92 f2a2 	rbit	r2, r2
 8005640:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005644:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005648:	fab2 f282 	clz	r2, r2
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	f042 0220 	orr.w	r2, r2, #32
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	f002 021f 	and.w	r2, r2, #31
 8005658:	2101      	movs	r1, #1
 800565a:	fa01 f202 	lsl.w	r2, r1, r2
 800565e:	4013      	ands	r3, r2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ab      	beq.n	80055bc <HAL_RCC_OscConfig+0x1d0>
 8005664:	e05d      	b.n	8005722 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005666:	f7fd f881 	bl	800276c <HAL_GetTick>
 800566a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800566e:	e00a      	b.n	8005686 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005670:	f7fd f87c 	bl	800276c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b64      	cmp	r3, #100	; 0x64
 800567e:	d902      	bls.n	8005686 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	f000 bee9 	b.w	8006458 <HAL_RCC_OscConfig+0x106c>
 8005686:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800568a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005692:	fa93 f3a3 	rbit	r3, r3
 8005696:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800569a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800569e:	fab3 f383 	clz	r3, r3
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d102      	bne.n	80056b8 <HAL_RCC_OscConfig+0x2cc>
 80056b2:	4b1a      	ldr	r3, [pc, #104]	; (800571c <HAL_RCC_OscConfig+0x330>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	e015      	b.n	80056e4 <HAL_RCC_OscConfig+0x2f8>
 80056b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056bc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80056c4:	fa93 f3a3 	rbit	r3, r3
 80056c8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80056cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056d0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80056d4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80056d8:	fa93 f3a3 	rbit	r3, r3
 80056dc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80056e0:	4b0e      	ldr	r3, [pc, #56]	; (800571c <HAL_RCC_OscConfig+0x330>)
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056e8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80056ec:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80056f0:	fa92 f2a2 	rbit	r2, r2
 80056f4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80056f8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80056fc:	fab2 f282 	clz	r2, r2
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	f042 0220 	orr.w	r2, r2, #32
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	f002 021f 	and.w	r2, r2, #31
 800570c:	2101      	movs	r1, #1
 800570e:	fa01 f202 	lsl.w	r2, r1, r2
 8005712:	4013      	ands	r3, r2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1ab      	bne.n	8005670 <HAL_RCC_OscConfig+0x284>
 8005718:	e003      	b.n	8005722 <HAL_RCC_OscConfig+0x336>
 800571a:	bf00      	nop
 800571c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 817d 	beq.w	8005a32 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005738:	4ba6      	ldr	r3, [pc, #664]	; (80059d4 <HAL_RCC_OscConfig+0x5e8>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 030c 	and.w	r3, r3, #12
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005744:	4ba3      	ldr	r3, [pc, #652]	; (80059d4 <HAL_RCC_OscConfig+0x5e8>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 030c 	and.w	r3, r3, #12
 800574c:	2b08      	cmp	r3, #8
 800574e:	d172      	bne.n	8005836 <HAL_RCC_OscConfig+0x44a>
 8005750:	4ba0      	ldr	r3, [pc, #640]	; (80059d4 <HAL_RCC_OscConfig+0x5e8>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d16c      	bne.n	8005836 <HAL_RCC_OscConfig+0x44a>
 800575c:	2302      	movs	r3, #2
 800575e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005762:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005766:	fa93 f3a3 	rbit	r3, r3
 800576a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800576e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005772:	fab3 f383 	clz	r3, r3
 8005776:	b2db      	uxtb	r3, r3
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	b2db      	uxtb	r3, r3
 800577c:	f043 0301 	orr.w	r3, r3, #1
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	d102      	bne.n	800578c <HAL_RCC_OscConfig+0x3a0>
 8005786:	4b93      	ldr	r3, [pc, #588]	; (80059d4 <HAL_RCC_OscConfig+0x5e8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	e013      	b.n	80057b4 <HAL_RCC_OscConfig+0x3c8>
 800578c:	2302      	movs	r3, #2
 800578e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005792:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005796:	fa93 f3a3 	rbit	r3, r3
 800579a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800579e:	2302      	movs	r3, #2
 80057a0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80057a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80057a8:	fa93 f3a3 	rbit	r3, r3
 80057ac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80057b0:	4b88      	ldr	r3, [pc, #544]	; (80059d4 <HAL_RCC_OscConfig+0x5e8>)
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	2202      	movs	r2, #2
 80057b6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80057ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80057be:	fa92 f2a2 	rbit	r2, r2
 80057c2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80057c6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80057ca:	fab2 f282 	clz	r2, r2
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	f042 0220 	orr.w	r2, r2, #32
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	f002 021f 	and.w	r2, r2, #31
 80057da:	2101      	movs	r1, #1
 80057dc:	fa01 f202 	lsl.w	r2, r1, r2
 80057e0:	4013      	ands	r3, r2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <HAL_RCC_OscConfig+0x410>
 80057e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d002      	beq.n	80057fc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	f000 be2e 	b.w	8006458 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fc:	4b75      	ldr	r3, [pc, #468]	; (80059d4 <HAL_RCC_OscConfig+0x5e8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005808:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	21f8      	movs	r1, #248	; 0xf8
 8005812:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005816:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800581a:	fa91 f1a1 	rbit	r1, r1
 800581e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005822:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005826:	fab1 f181 	clz	r1, r1
 800582a:	b2c9      	uxtb	r1, r1
 800582c:	408b      	lsls	r3, r1
 800582e:	4969      	ldr	r1, [pc, #420]	; (80059d4 <HAL_RCC_OscConfig+0x5e8>)
 8005830:	4313      	orrs	r3, r2
 8005832:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005834:	e0fd      	b.n	8005a32 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800583a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8088 	beq.w	8005958 <HAL_RCC_OscConfig+0x56c>
 8005848:	2301      	movs	r3, #1
 800584a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005852:	fa93 f3a3 	rbit	r3, r3
 8005856:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800585a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005868:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	461a      	mov	r2, r3
 8005870:	2301      	movs	r3, #1
 8005872:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005874:	f7fc ff7a 	bl	800276c <HAL_GetTick>
 8005878:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587c:	e00a      	b.n	8005894 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800587e:	f7fc ff75 	bl	800276c <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d902      	bls.n	8005894 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	f000 bde2 	b.w	8006458 <HAL_RCC_OscConfig+0x106c>
 8005894:	2302      	movs	r3, #2
 8005896:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800589e:	fa93 f3a3 	rbit	r3, r3
 80058a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80058a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058aa:	fab3 f383 	clz	r3, r3
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	f043 0301 	orr.w	r3, r3, #1
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d102      	bne.n	80058c4 <HAL_RCC_OscConfig+0x4d8>
 80058be:	4b45      	ldr	r3, [pc, #276]	; (80059d4 <HAL_RCC_OscConfig+0x5e8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	e013      	b.n	80058ec <HAL_RCC_OscConfig+0x500>
 80058c4:	2302      	movs	r3, #2
 80058c6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80058ce:	fa93 f3a3 	rbit	r3, r3
 80058d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80058d6:	2302      	movs	r3, #2
 80058d8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80058dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80058e0:	fa93 f3a3 	rbit	r3, r3
 80058e4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80058e8:	4b3a      	ldr	r3, [pc, #232]	; (80059d4 <HAL_RCC_OscConfig+0x5e8>)
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2202      	movs	r2, #2
 80058ee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80058f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80058f6:	fa92 f2a2 	rbit	r2, r2
 80058fa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80058fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005902:	fab2 f282 	clz	r2, r2
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	f042 0220 	orr.w	r2, r2, #32
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	f002 021f 	and.w	r2, r2, #31
 8005912:	2101      	movs	r1, #1
 8005914:	fa01 f202 	lsl.w	r2, r1, r2
 8005918:	4013      	ands	r3, r2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0af      	beq.n	800587e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591e:	4b2d      	ldr	r3, [pc, #180]	; (80059d4 <HAL_RCC_OscConfig+0x5e8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800592a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	21f8      	movs	r1, #248	; 0xf8
 8005934:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005938:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800593c:	fa91 f1a1 	rbit	r1, r1
 8005940:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005944:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005948:	fab1 f181 	clz	r1, r1
 800594c:	b2c9      	uxtb	r1, r1
 800594e:	408b      	lsls	r3, r1
 8005950:	4920      	ldr	r1, [pc, #128]	; (80059d4 <HAL_RCC_OscConfig+0x5e8>)
 8005952:	4313      	orrs	r3, r2
 8005954:	600b      	str	r3, [r1, #0]
 8005956:	e06c      	b.n	8005a32 <HAL_RCC_OscConfig+0x646>
 8005958:	2301      	movs	r3, #1
 800595a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005962:	fa93 f3a3 	rbit	r3, r3
 8005966:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800596a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800596e:	fab3 f383 	clz	r3, r3
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005978:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	461a      	mov	r2, r3
 8005980:	2300      	movs	r3, #0
 8005982:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005984:	f7fc fef2 	bl	800276c <HAL_GetTick>
 8005988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800598c:	e00a      	b.n	80059a4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800598e:	f7fc feed 	bl	800276c <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d902      	bls.n	80059a4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	f000 bd5a 	b.w	8006458 <HAL_RCC_OscConfig+0x106c>
 80059a4:	2302      	movs	r3, #2
 80059a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80059ae:	fa93 f3a3 	rbit	r3, r3
 80059b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80059b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ba:	fab3 f383 	clz	r3, r3
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d104      	bne.n	80059d8 <HAL_RCC_OscConfig+0x5ec>
 80059ce:	4b01      	ldr	r3, [pc, #4]	; (80059d4 <HAL_RCC_OscConfig+0x5e8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	e015      	b.n	8005a00 <HAL_RCC_OscConfig+0x614>
 80059d4:	40021000 	.word	0x40021000
 80059d8:	2302      	movs	r3, #2
 80059da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059e2:	fa93 f3a3 	rbit	r3, r3
 80059e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059ea:	2302      	movs	r3, #2
 80059ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80059f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059f4:	fa93 f3a3 	rbit	r3, r3
 80059f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059fc:	4bc8      	ldr	r3, [pc, #800]	; (8005d20 <HAL_RCC_OscConfig+0x934>)
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	2202      	movs	r2, #2
 8005a02:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005a06:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005a0a:	fa92 f2a2 	rbit	r2, r2
 8005a0e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005a12:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005a16:	fab2 f282 	clz	r2, r2
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	f042 0220 	orr.w	r2, r2, #32
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	f002 021f 	and.w	r2, r2, #31
 8005a26:	2101      	movs	r1, #1
 8005a28:	fa01 f202 	lsl.w	r2, r1, r2
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1ad      	bne.n	800598e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8110 	beq.w	8005c68 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d079      	beq.n	8005b4c <HAL_RCC_OscConfig+0x760>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a62:	fa93 f3a3 	rbit	r3, r3
 8005a66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a6e:	fab3 f383 	clz	r3, r3
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	4bab      	ldr	r3, [pc, #684]	; (8005d24 <HAL_RCC_OscConfig+0x938>)
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2301      	movs	r3, #1
 8005a80:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a82:	f7fc fe73 	bl	800276c <HAL_GetTick>
 8005a86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a8a:	e00a      	b.n	8005aa2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a8c:	f7fc fe6e 	bl	800276c <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d902      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	f000 bcdb 	b.w	8006458 <HAL_RCC_OscConfig+0x106c>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aac:	fa93 f3a3 	rbit	r3, r3
 8005ab0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005abc:	2202      	movs	r2, #2
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ac4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	fa93 f2a3 	rbit	r2, r3
 8005ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	fa93 f2a3 	rbit	r2, r3
 8005af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005af6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005afa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afc:	4b88      	ldr	r3, [pc, #544]	; (8005d20 <HAL_RCC_OscConfig+0x934>)
 8005afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b08:	2102      	movs	r1, #2
 8005b0a:	6019      	str	r1, [r3, #0]
 8005b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	fa93 f1a3 	rbit	r1, r3
 8005b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b22:	6019      	str	r1, [r3, #0]
  return result;
 8005b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b28:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	fab3 f383 	clz	r3, r3
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	2101      	movs	r1, #1
 8005b40:	fa01 f303 	lsl.w	r3, r1, r3
 8005b44:	4013      	ands	r3, r2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0a0      	beq.n	8005a8c <HAL_RCC_OscConfig+0x6a0>
 8005b4a:	e08d      	b.n	8005c68 <HAL_RCC_OscConfig+0x87c>
 8005b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005b54:	2201      	movs	r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	fa93 f2a3 	rbit	r2, r3
 8005b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b6e:	601a      	str	r2, [r3, #0]
  return result;
 8005b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b78:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b7a:	fab3 f383 	clz	r3, r3
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	4b68      	ldr	r3, [pc, #416]	; (8005d24 <HAL_RCC_OscConfig+0x938>)
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	461a      	mov	r2, r3
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b8e:	f7fc fded 	bl	800276c <HAL_GetTick>
 8005b92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b96:	e00a      	b.n	8005bae <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b98:	f7fc fde8 	bl	800276c <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d902      	bls.n	8005bae <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	f000 bc55 	b.w	8006458 <HAL_RCC_OscConfig+0x106c>
 8005bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bb2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bbe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	fa93 f2a3 	rbit	r2, r3
 8005bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bcc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bd6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005bda:	2202      	movs	r2, #2
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005be2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	fa93 f2a3 	rbit	r2, r3
 8005bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfe:	2202      	movs	r2, #2
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	fa93 f2a3 	rbit	r2, r3
 8005c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c14:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005c18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c1a:	4b41      	ldr	r3, [pc, #260]	; (8005d20 <HAL_RCC_OscConfig+0x934>)
 8005c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c22:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005c26:	2102      	movs	r1, #2
 8005c28:	6019      	str	r1, [r3, #0]
 8005c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	fa93 f1a3 	rbit	r1, r3
 8005c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c3c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c40:	6019      	str	r1, [r3, #0]
  return result;
 8005c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c46:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	fab3 f383 	clz	r3, r3
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d197      	bne.n	8005b98 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 81a1 	beq.w	8005fc0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c84:	4b26      	ldr	r3, [pc, #152]	; (8005d20 <HAL_RCC_OscConfig+0x934>)
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d116      	bne.n	8005cbe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c90:	4b23      	ldr	r3, [pc, #140]	; (8005d20 <HAL_RCC_OscConfig+0x934>)
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	4a22      	ldr	r2, [pc, #136]	; (8005d20 <HAL_RCC_OscConfig+0x934>)
 8005c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c9a:	61d3      	str	r3, [r2, #28]
 8005c9c:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <HAL_RCC_OscConfig+0x934>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ca8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cb2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005cb6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cbe:	4b1a      	ldr	r3, [pc, #104]	; (8005d28 <HAL_RCC_OscConfig+0x93c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d11a      	bne.n	8005d00 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cca:	4b17      	ldr	r3, [pc, #92]	; (8005d28 <HAL_RCC_OscConfig+0x93c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a16      	ldr	r2, [pc, #88]	; (8005d28 <HAL_RCC_OscConfig+0x93c>)
 8005cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd6:	f7fc fd49 	bl	800276c <HAL_GetTick>
 8005cda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cde:	e009      	b.n	8005cf4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce0:	f7fc fd44 	bl	800276c <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b64      	cmp	r3, #100	; 0x64
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e3b1      	b.n	8006458 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf4:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <HAL_RCC_OscConfig+0x93c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0ef      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d10d      	bne.n	8005d2c <HAL_RCC_OscConfig+0x940>
 8005d10:	4b03      	ldr	r3, [pc, #12]	; (8005d20 <HAL_RCC_OscConfig+0x934>)
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	4a02      	ldr	r2, [pc, #8]	; (8005d20 <HAL_RCC_OscConfig+0x934>)
 8005d16:	f043 0301 	orr.w	r3, r3, #1
 8005d1a:	6213      	str	r3, [r2, #32]
 8005d1c:	e03c      	b.n	8005d98 <HAL_RCC_OscConfig+0x9ac>
 8005d1e:	bf00      	nop
 8005d20:	40021000 	.word	0x40021000
 8005d24:	10908120 	.word	0x10908120
 8005d28:	40007000 	.word	0x40007000
 8005d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10c      	bne.n	8005d56 <HAL_RCC_OscConfig+0x96a>
 8005d3c:	4bc1      	ldr	r3, [pc, #772]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	4ac0      	ldr	r2, [pc, #768]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005d42:	f023 0301 	bic.w	r3, r3, #1
 8005d46:	6213      	str	r3, [r2, #32]
 8005d48:	4bbe      	ldr	r3, [pc, #760]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	4abd      	ldr	r2, [pc, #756]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005d4e:	f023 0304 	bic.w	r3, r3, #4
 8005d52:	6213      	str	r3, [r2, #32]
 8005d54:	e020      	b.n	8005d98 <HAL_RCC_OscConfig+0x9ac>
 8005d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	2b05      	cmp	r3, #5
 8005d64:	d10c      	bne.n	8005d80 <HAL_RCC_OscConfig+0x994>
 8005d66:	4bb7      	ldr	r3, [pc, #732]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	4ab6      	ldr	r2, [pc, #728]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005d6c:	f043 0304 	orr.w	r3, r3, #4
 8005d70:	6213      	str	r3, [r2, #32]
 8005d72:	4bb4      	ldr	r3, [pc, #720]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	4ab3      	ldr	r2, [pc, #716]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	6213      	str	r3, [r2, #32]
 8005d7e:	e00b      	b.n	8005d98 <HAL_RCC_OscConfig+0x9ac>
 8005d80:	4bb0      	ldr	r3, [pc, #704]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	4aaf      	ldr	r2, [pc, #700]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005d86:	f023 0301 	bic.w	r3, r3, #1
 8005d8a:	6213      	str	r3, [r2, #32]
 8005d8c:	4bad      	ldr	r3, [pc, #692]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	4aac      	ldr	r2, [pc, #688]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005d92:	f023 0304 	bic.w	r3, r3, #4
 8005d96:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 8081 	beq.w	8005eac <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005daa:	f7fc fcdf 	bl	800276c <HAL_GetTick>
 8005dae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db2:	e00b      	b.n	8005dcc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005db4:	f7fc fcda 	bl	800276c <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e345      	b.n	8006458 <HAL_RCC_OscConfig+0x106c>
 8005dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dd0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ddc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	fa93 f2a3 	rbit	r2, r3
 8005de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005df8:	2202      	movs	r2, #2
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	fa93 f2a3 	rbit	r2, r3
 8005e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e0e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005e12:	601a      	str	r2, [r3, #0]
  return result;
 8005e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e18:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005e1c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e1e:	fab3 f383 	clz	r3, r3
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	f043 0302 	orr.w	r3, r3, #2
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d102      	bne.n	8005e38 <HAL_RCC_OscConfig+0xa4c>
 8005e32:	4b84      	ldr	r3, [pc, #528]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	e013      	b.n	8005e60 <HAL_RCC_OscConfig+0xa74>
 8005e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e3c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005e40:	2202      	movs	r2, #2
 8005e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e48:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	fa93 f2a3 	rbit	r2, r3
 8005e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e56:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	4b79      	ldr	r3, [pc, #484]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e64:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005e68:	2102      	movs	r1, #2
 8005e6a:	6011      	str	r1, [r2, #0]
 8005e6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e70:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005e74:	6812      	ldr	r2, [r2, #0]
 8005e76:	fa92 f1a2 	rbit	r1, r2
 8005e7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e7e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005e82:	6011      	str	r1, [r2, #0]
  return result;
 8005e84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e88:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	fab2 f282 	clz	r2, r2
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	f002 021f 	and.w	r2, r2, #31
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d084      	beq.n	8005db4 <HAL_RCC_OscConfig+0x9c8>
 8005eaa:	e07f      	b.n	8005fac <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eac:	f7fc fc5e 	bl	800276c <HAL_GetTick>
 8005eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb4:	e00b      	b.n	8005ece <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eb6:	f7fc fc59 	bl	800276c <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e2c4      	b.n	8006458 <HAL_RCC_OscConfig+0x106c>
 8005ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ed2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ede:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	fa93 f2a3 	rbit	r2, r3
 8005ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ef6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005efa:	2202      	movs	r2, #2
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	fa93 f2a3 	rbit	r2, r3
 8005f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f10:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005f14:	601a      	str	r2, [r3, #0]
  return result;
 8005f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f1a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005f1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f20:	fab3 f383 	clz	r3, r3
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f043 0302 	orr.w	r3, r3, #2
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d102      	bne.n	8005f3a <HAL_RCC_OscConfig+0xb4e>
 8005f34:	4b43      	ldr	r3, [pc, #268]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	e013      	b.n	8005f62 <HAL_RCC_OscConfig+0xb76>
 8005f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f3e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005f42:	2202      	movs	r2, #2
 8005f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f4a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	fa93 f2a3 	rbit	r2, r3
 8005f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f58:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	4b39      	ldr	r3, [pc, #228]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f66:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	6011      	str	r1, [r2, #0]
 8005f6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f72:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	fa92 f1a2 	rbit	r1, r2
 8005f7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f80:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005f84:	6011      	str	r1, [r2, #0]
  return result;
 8005f86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f8a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	fab2 f282 	clz	r2, r2
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	f002 021f 	and.w	r2, r2, #31
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d184      	bne.n	8005eb6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d105      	bne.n	8005fc0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb4:	4b23      	ldr	r3, [pc, #140]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	4a22      	ldr	r2, [pc, #136]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8242 	beq.w	8006456 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fd2:	4b1c      	ldr	r3, [pc, #112]	; (8006044 <HAL_RCC_OscConfig+0xc58>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f003 030c 	and.w	r3, r3, #12
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	f000 8213 	beq.w	8006406 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fe4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	f040 8162 	bne.w	80062b6 <HAL_RCC_OscConfig+0xeca>
 8005ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ff6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005ffa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006004:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	fa93 f2a3 	rbit	r2, r3
 800600e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006012:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006016:	601a      	str	r2, [r3, #0]
  return result;
 8006018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800601c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006020:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006022:	fab3 f383 	clz	r3, r3
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800602c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	461a      	mov	r2, r3
 8006034:	2300      	movs	r3, #0
 8006036:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006038:	f7fc fb98 	bl	800276c <HAL_GetTick>
 800603c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006040:	e00c      	b.n	800605c <HAL_RCC_OscConfig+0xc70>
 8006042:	bf00      	nop
 8006044:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006048:	f7fc fb90 	bl	800276c <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e1fd      	b.n	8006458 <HAL_RCC_OscConfig+0x106c>
 800605c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006060:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006064:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800606e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	fa93 f2a3 	rbit	r2, r3
 8006078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800607c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006080:	601a      	str	r2, [r3, #0]
  return result;
 8006082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006086:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800608a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800608c:	fab3 f383 	clz	r3, r3
 8006090:	b2db      	uxtb	r3, r3
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	b2db      	uxtb	r3, r3
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	d102      	bne.n	80060a6 <HAL_RCC_OscConfig+0xcba>
 80060a0:	4bb0      	ldr	r3, [pc, #704]	; (8006364 <HAL_RCC_OscConfig+0xf78>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	e027      	b.n	80060f6 <HAL_RCC_OscConfig+0xd0a>
 80060a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060aa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80060ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060b8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	fa93 f2a3 	rbit	r2, r3
 80060c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060c6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060d0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80060d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060de:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	fa93 f2a3 	rbit	r2, r3
 80060e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	4b9c      	ldr	r3, [pc, #624]	; (8006364 <HAL_RCC_OscConfig+0xf78>)
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060fa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80060fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006102:	6011      	str	r1, [r2, #0]
 8006104:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006108:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800610c:	6812      	ldr	r2, [r2, #0]
 800610e:	fa92 f1a2 	rbit	r1, r2
 8006112:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006116:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800611a:	6011      	str	r1, [r2, #0]
  return result;
 800611c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006120:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	fab2 f282 	clz	r2, r2
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	f042 0220 	orr.w	r2, r2, #32
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	f002 021f 	and.w	r2, r2, #31
 8006136:	2101      	movs	r1, #1
 8006138:	fa01 f202 	lsl.w	r2, r1, r2
 800613c:	4013      	ands	r3, r2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d182      	bne.n	8006048 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006142:	4b88      	ldr	r3, [pc, #544]	; (8006364 <HAL_RCC_OscConfig+0xf78>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800614a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800614e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800615a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	430b      	orrs	r3, r1
 8006164:	497f      	ldr	r1, [pc, #508]	; (8006364 <HAL_RCC_OscConfig+0xf78>)
 8006166:	4313      	orrs	r3, r2
 8006168:	604b      	str	r3, [r1, #4]
 800616a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800616e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006172:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800617c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	fa93 f2a3 	rbit	r2, r3
 8006186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800618a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800618e:	601a      	str	r2, [r3, #0]
  return result;
 8006190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006194:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006198:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800619a:	fab3 f383 	clz	r3, r3
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80061a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	461a      	mov	r2, r3
 80061ac:	2301      	movs	r3, #1
 80061ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b0:	f7fc fadc 	bl	800276c <HAL_GetTick>
 80061b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061b8:	e009      	b.n	80061ce <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ba:	f7fc fad7 	bl	800276c <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e144      	b.n	8006458 <HAL_RCC_OscConfig+0x106c>
 80061ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061d2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80061d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061e0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	fa93 f2a3 	rbit	r2, r3
 80061ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061ee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80061f2:	601a      	str	r2, [r3, #0]
  return result;
 80061f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061f8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80061fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061fe:	fab3 f383 	clz	r3, r3
 8006202:	b2db      	uxtb	r3, r3
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	b2db      	uxtb	r3, r3
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b01      	cmp	r3, #1
 8006210:	d102      	bne.n	8006218 <HAL_RCC_OscConfig+0xe2c>
 8006212:	4b54      	ldr	r3, [pc, #336]	; (8006364 <HAL_RCC_OscConfig+0xf78>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	e027      	b.n	8006268 <HAL_RCC_OscConfig+0xe7c>
 8006218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800621c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800622a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	fa93 f2a3 	rbit	r2, r3
 8006234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006238:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006242:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006246:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006250:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	fa93 f2a3 	rbit	r2, r3
 800625a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800625e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	4b3f      	ldr	r3, [pc, #252]	; (8006364 <HAL_RCC_OscConfig+0xf78>)
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800626c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006270:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006274:	6011      	str	r1, [r2, #0]
 8006276:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800627a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	fa92 f1a2 	rbit	r1, r2
 8006284:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006288:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800628c:	6011      	str	r1, [r2, #0]
  return result;
 800628e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006292:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	fab2 f282 	clz	r2, r2
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	f042 0220 	orr.w	r2, r2, #32
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	f002 021f 	and.w	r2, r2, #31
 80062a8:	2101      	movs	r1, #1
 80062aa:	fa01 f202 	lsl.w	r2, r1, r2
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d082      	beq.n	80061ba <HAL_RCC_OscConfig+0xdce>
 80062b4:	e0cf      	b.n	8006456 <HAL_RCC_OscConfig+0x106a>
 80062b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062ba:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80062be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062c8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	fa93 f2a3 	rbit	r2, r3
 80062d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062d6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80062da:	601a      	str	r2, [r3, #0]
  return result;
 80062dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062e0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80062e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e6:	fab3 f383 	clz	r3, r3
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	461a      	mov	r2, r3
 80062f8:	2300      	movs	r3, #0
 80062fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fc:	f7fc fa36 	bl	800276c <HAL_GetTick>
 8006300:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006304:	e009      	b.n	800631a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006306:	f7fc fa31 	bl	800276c <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e09e      	b.n	8006458 <HAL_RCC_OscConfig+0x106c>
 800631a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800631e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006322:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800632c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	fa93 f2a3 	rbit	r2, r3
 8006336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800633a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800633e:	601a      	str	r2, [r3, #0]
  return result;
 8006340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006344:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006348:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800634a:	fab3 f383 	clz	r3, r3
 800634e:	b2db      	uxtb	r3, r3
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f043 0301 	orr.w	r3, r3, #1
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b01      	cmp	r3, #1
 800635c:	d104      	bne.n	8006368 <HAL_RCC_OscConfig+0xf7c>
 800635e:	4b01      	ldr	r3, [pc, #4]	; (8006364 <HAL_RCC_OscConfig+0xf78>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	e029      	b.n	80063b8 <HAL_RCC_OscConfig+0xfcc>
 8006364:	40021000 	.word	0x40021000
 8006368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800636c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006370:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800637a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	fa93 f2a3 	rbit	r2, r3
 8006384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006388:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006392:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006396:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063a0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	fa93 f2a3 	rbit	r2, r3
 80063aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063ae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	4b2b      	ldr	r3, [pc, #172]	; (8006464 <HAL_RCC_OscConfig+0x1078>)
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063bc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80063c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80063c4:	6011      	str	r1, [r2, #0]
 80063c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063ca:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	fa92 f1a2 	rbit	r1, r2
 80063d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063d8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80063dc:	6011      	str	r1, [r2, #0]
  return result;
 80063de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063e2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80063e6:	6812      	ldr	r2, [r2, #0]
 80063e8:	fab2 f282 	clz	r2, r2
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	f042 0220 	orr.w	r2, r2, #32
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	f002 021f 	and.w	r2, r2, #31
 80063f8:	2101      	movs	r1, #1
 80063fa:	fa01 f202 	lsl.w	r2, r1, r2
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d180      	bne.n	8006306 <HAL_RCC_OscConfig+0xf1a>
 8006404:	e027      	b.n	8006456 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800640a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e01e      	b.n	8006458 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800641a:	4b12      	ldr	r3, [pc, #72]	; (8006464 <HAL_RCC_OscConfig+0x1078>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006422:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006426:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800642a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800642e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	429a      	cmp	r2, r3
 8006438:	d10b      	bne.n	8006452 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800643a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800643e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006446:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800644e:	429a      	cmp	r2, r3
 8006450:	d001      	beq.n	8006456 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40021000 	.word	0x40021000

08006468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b09e      	sub	sp, #120	; 0x78
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e162      	b.n	8006746 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006480:	4b90      	ldr	r3, [pc, #576]	; (80066c4 <HAL_RCC_ClockConfig+0x25c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d910      	bls.n	80064b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648e:	4b8d      	ldr	r3, [pc, #564]	; (80066c4 <HAL_RCC_ClockConfig+0x25c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f023 0207 	bic.w	r2, r3, #7
 8006496:	498b      	ldr	r1, [pc, #556]	; (80066c4 <HAL_RCC_ClockConfig+0x25c>)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	4313      	orrs	r3, r2
 800649c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800649e:	4b89      	ldr	r3, [pc, #548]	; (80066c4 <HAL_RCC_ClockConfig+0x25c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d001      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e14a      	b.n	8006746 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064bc:	4b82      	ldr	r3, [pc, #520]	; (80066c8 <HAL_RCC_ClockConfig+0x260>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	497f      	ldr	r1, [pc, #508]	; (80066c8 <HAL_RCC_ClockConfig+0x260>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 80dc 	beq.w	8006694 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d13c      	bne.n	800655e <HAL_RCC_ClockConfig+0xf6>
 80064e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ec:	fa93 f3a3 	rbit	r3, r3
 80064f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80064f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064f4:	fab3 f383 	clz	r3, r3
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	d102      	bne.n	800650e <HAL_RCC_ClockConfig+0xa6>
 8006508:	4b6f      	ldr	r3, [pc, #444]	; (80066c8 <HAL_RCC_ClockConfig+0x260>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	e00f      	b.n	800652e <HAL_RCC_ClockConfig+0xc6>
 800650e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006512:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006516:	fa93 f3a3 	rbit	r3, r3
 800651a:	667b      	str	r3, [r7, #100]	; 0x64
 800651c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006520:	663b      	str	r3, [r7, #96]	; 0x60
 8006522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006524:	fa93 f3a3 	rbit	r3, r3
 8006528:	65fb      	str	r3, [r7, #92]	; 0x5c
 800652a:	4b67      	ldr	r3, [pc, #412]	; (80066c8 <HAL_RCC_ClockConfig+0x260>)
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006532:	65ba      	str	r2, [r7, #88]	; 0x58
 8006534:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006536:	fa92 f2a2 	rbit	r2, r2
 800653a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800653c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800653e:	fab2 f282 	clz	r2, r2
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	f042 0220 	orr.w	r2, r2, #32
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	f002 021f 	and.w	r2, r2, #31
 800654e:	2101      	movs	r1, #1
 8006550:	fa01 f202 	lsl.w	r2, r1, r2
 8006554:	4013      	ands	r3, r2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d17b      	bne.n	8006652 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e0f3      	b.n	8006746 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d13c      	bne.n	80065e0 <HAL_RCC_ClockConfig+0x178>
 8006566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800656a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800656e:	fa93 f3a3 	rbit	r3, r3
 8006572:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006576:	fab3 f383 	clz	r3, r3
 800657a:	b2db      	uxtb	r3, r3
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	b2db      	uxtb	r3, r3
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b01      	cmp	r3, #1
 8006588:	d102      	bne.n	8006590 <HAL_RCC_ClockConfig+0x128>
 800658a:	4b4f      	ldr	r3, [pc, #316]	; (80066c8 <HAL_RCC_ClockConfig+0x260>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	e00f      	b.n	80065b0 <HAL_RCC_ClockConfig+0x148>
 8006590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006594:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006598:	fa93 f3a3 	rbit	r3, r3
 800659c:	647b      	str	r3, [r7, #68]	; 0x44
 800659e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065a2:	643b      	str	r3, [r7, #64]	; 0x40
 80065a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a6:	fa93 f3a3 	rbit	r3, r3
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ac:	4b46      	ldr	r3, [pc, #280]	; (80066c8 <HAL_RCC_ClockConfig+0x260>)
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80065b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065b8:	fa92 f2a2 	rbit	r2, r2
 80065bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80065be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c0:	fab2 f282 	clz	r2, r2
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	f042 0220 	orr.w	r2, r2, #32
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	f002 021f 	and.w	r2, r2, #31
 80065d0:	2101      	movs	r1, #1
 80065d2:	fa01 f202 	lsl.w	r2, r1, r2
 80065d6:	4013      	ands	r3, r2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d13a      	bne.n	8006652 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e0b2      	b.n	8006746 <HAL_RCC_ClockConfig+0x2de>
 80065e0:	2302      	movs	r3, #2
 80065e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	fa93 f3a3 	rbit	r3, r3
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ee:	fab3 f383 	clz	r3, r3
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	095b      	lsrs	r3, r3, #5
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f043 0301 	orr.w	r3, r3, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d102      	bne.n	8006608 <HAL_RCC_ClockConfig+0x1a0>
 8006602:	4b31      	ldr	r3, [pc, #196]	; (80066c8 <HAL_RCC_ClockConfig+0x260>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	e00d      	b.n	8006624 <HAL_RCC_ClockConfig+0x1bc>
 8006608:	2302      	movs	r3, #2
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	fa93 f3a3 	rbit	r3, r3
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
 8006614:	2302      	movs	r3, #2
 8006616:	623b      	str	r3, [r7, #32]
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	fa93 f3a3 	rbit	r3, r3
 800661e:	61fb      	str	r3, [r7, #28]
 8006620:	4b29      	ldr	r3, [pc, #164]	; (80066c8 <HAL_RCC_ClockConfig+0x260>)
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	2202      	movs	r2, #2
 8006626:	61ba      	str	r2, [r7, #24]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	fa92 f2a2 	rbit	r2, r2
 800662e:	617a      	str	r2, [r7, #20]
  return result;
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	fab2 f282 	clz	r2, r2
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	f042 0220 	orr.w	r2, r2, #32
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	f002 021f 	and.w	r2, r2, #31
 8006642:	2101      	movs	r1, #1
 8006644:	fa01 f202 	lsl.w	r2, r1, r2
 8006648:	4013      	ands	r3, r2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e079      	b.n	8006746 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006652:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <HAL_RCC_ClockConfig+0x260>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f023 0203 	bic.w	r2, r3, #3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	491a      	ldr	r1, [pc, #104]	; (80066c8 <HAL_RCC_ClockConfig+0x260>)
 8006660:	4313      	orrs	r3, r2
 8006662:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006664:	f7fc f882 	bl	800276c <HAL_GetTick>
 8006668:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800666a:	e00a      	b.n	8006682 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800666c:	f7fc f87e 	bl	800276c <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	f241 3288 	movw	r2, #5000	; 0x1388
 800667a:	4293      	cmp	r3, r2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e061      	b.n	8006746 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006682:	4b11      	ldr	r3, [pc, #68]	; (80066c8 <HAL_RCC_ClockConfig+0x260>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f003 020c 	and.w	r2, r3, #12
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	429a      	cmp	r2, r3
 8006692:	d1eb      	bne.n	800666c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006694:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <HAL_RCC_ClockConfig+0x25c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d214      	bcs.n	80066cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <HAL_RCC_ClockConfig+0x25c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f023 0207 	bic.w	r2, r3, #7
 80066aa:	4906      	ldr	r1, [pc, #24]	; (80066c4 <HAL_RCC_ClockConfig+0x25c>)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b2:	4b04      	ldr	r3, [pc, #16]	; (80066c4 <HAL_RCC_ClockConfig+0x25c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d005      	beq.n	80066cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e040      	b.n	8006746 <HAL_RCC_ClockConfig+0x2de>
 80066c4:	40022000 	.word	0x40022000
 80066c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d008      	beq.n	80066ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066d8:	4b1d      	ldr	r3, [pc, #116]	; (8006750 <HAL_RCC_ClockConfig+0x2e8>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	491a      	ldr	r1, [pc, #104]	; (8006750 <HAL_RCC_ClockConfig+0x2e8>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066f6:	4b16      	ldr	r3, [pc, #88]	; (8006750 <HAL_RCC_ClockConfig+0x2e8>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4912      	ldr	r1, [pc, #72]	; (8006750 <HAL_RCC_ClockConfig+0x2e8>)
 8006706:	4313      	orrs	r3, r2
 8006708:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800670a:	f000 f829 	bl	8006760 <HAL_RCC_GetSysClockFreq>
 800670e:	4601      	mov	r1, r0
 8006710:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <HAL_RCC_ClockConfig+0x2e8>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006718:	22f0      	movs	r2, #240	; 0xf0
 800671a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	fa92 f2a2 	rbit	r2, r2
 8006722:	60fa      	str	r2, [r7, #12]
  return result;
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	fab2 f282 	clz	r2, r2
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	40d3      	lsrs	r3, r2
 800672e:	4a09      	ldr	r2, [pc, #36]	; (8006754 <HAL_RCC_ClockConfig+0x2ec>)
 8006730:	5cd3      	ldrb	r3, [r2, r3]
 8006732:	fa21 f303 	lsr.w	r3, r1, r3
 8006736:	4a08      	ldr	r2, [pc, #32]	; (8006758 <HAL_RCC_ClockConfig+0x2f0>)
 8006738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800673a:	4b08      	ldr	r3, [pc, #32]	; (800675c <HAL_RCC_ClockConfig+0x2f4>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fb ffd0 	bl	80026e4 <HAL_InitTick>
  
  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3778      	adds	r7, #120	; 0x78
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40021000 	.word	0x40021000
 8006754:	0800c678 	.word	0x0800c678
 8006758:	20000050 	.word	0x20000050
 800675c:	2000005c 	.word	0x2000005c

08006760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006760:	b480      	push	{r7}
 8006762:	b08b      	sub	sp, #44	; 0x2c
 8006764:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	2300      	movs	r3, #0
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	2300      	movs	r3, #0
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800677a:	4b29      	ldr	r3, [pc, #164]	; (8006820 <HAL_RCC_GetSysClockFreq+0xc0>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	f003 030c 	and.w	r3, r3, #12
 8006786:	2b04      	cmp	r3, #4
 8006788:	d002      	beq.n	8006790 <HAL_RCC_GetSysClockFreq+0x30>
 800678a:	2b08      	cmp	r3, #8
 800678c:	d003      	beq.n	8006796 <HAL_RCC_GetSysClockFreq+0x36>
 800678e:	e03c      	b.n	800680a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006790:	4b24      	ldr	r3, [pc, #144]	; (8006824 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006792:	623b      	str	r3, [r7, #32]
      break;
 8006794:	e03c      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800679c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80067a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	fa92 f2a2 	rbit	r2, r2
 80067a8:	607a      	str	r2, [r7, #4]
  return result;
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	fab2 f282 	clz	r2, r2
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	40d3      	lsrs	r3, r2
 80067b4:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <HAL_RCC_GetSysClockFreq+0xc8>)
 80067b6:	5cd3      	ldrb	r3, [r2, r3]
 80067b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80067ba:	4b19      	ldr	r3, [pc, #100]	; (8006820 <HAL_RCC_GetSysClockFreq+0xc0>)
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	220f      	movs	r2, #15
 80067c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	fa92 f2a2 	rbit	r2, r2
 80067cc:	60fa      	str	r2, [r7, #12]
  return result;
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	fab2 f282 	clz	r2, r2
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	40d3      	lsrs	r3, r2
 80067d8:	4a14      	ldr	r2, [pc, #80]	; (800682c <HAL_RCC_GetSysClockFreq+0xcc>)
 80067da:	5cd3      	ldrb	r3, [r2, r3]
 80067dc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d008      	beq.n	80067fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80067e8:	4a0e      	ldr	r2, [pc, #56]	; (8006824 <HAL_RCC_GetSysClockFreq+0xc4>)
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	fb02 f303 	mul.w	r3, r2, r3
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
 80067f8:	e004      	b.n	8006804 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	4a0c      	ldr	r2, [pc, #48]	; (8006830 <HAL_RCC_GetSysClockFreq+0xd0>)
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	623b      	str	r3, [r7, #32]
      break;
 8006808:	e002      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800680a:	4b06      	ldr	r3, [pc, #24]	; (8006824 <HAL_RCC_GetSysClockFreq+0xc4>)
 800680c:	623b      	str	r3, [r7, #32]
      break;
 800680e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006810:	6a3b      	ldr	r3, [r7, #32]
}
 8006812:	4618      	mov	r0, r3
 8006814:	372c      	adds	r7, #44	; 0x2c
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40021000 	.word	0x40021000
 8006824:	007a1200 	.word	0x007a1200
 8006828:	0800c688 	.word	0x0800c688
 800682c:	0800c698 	.word	0x0800c698
 8006830:	003d0900 	.word	0x003d0900

08006834 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b092      	sub	sp, #72	; 0x48
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006844:	2300      	movs	r3, #0
 8006846:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 80d4 	beq.w	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006858:	4b4e      	ldr	r3, [pc, #312]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10e      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006864:	4b4b      	ldr	r3, [pc, #300]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	4a4a      	ldr	r2, [pc, #296]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800686a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800686e:	61d3      	str	r3, [r2, #28]
 8006870:	4b48      	ldr	r3, [pc, #288]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006882:	4b45      	ldr	r3, [pc, #276]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688a:	2b00      	cmp	r3, #0
 800688c:	d118      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800688e:	4b42      	ldr	r3, [pc, #264]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a41      	ldr	r2, [pc, #260]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006898:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800689a:	f7fb ff67 	bl	800276c <HAL_GetTick>
 800689e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a0:	e008      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a2:	f7fb ff63 	bl	800276c <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b64      	cmp	r3, #100	; 0x64
 80068ae:	d901      	bls.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e14b      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b4:	4b38      	ldr	r3, [pc, #224]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068c0:	4b34      	ldr	r3, [pc, #208]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8084 	beq.w	80069da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068dc:	429a      	cmp	r2, r3
 80068de:	d07c      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068e0:	4b2c      	ldr	r3, [pc, #176]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	fa93 f3a3 	rbit	r3, r3
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068fa:	fab3 f383 	clz	r3, r3
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	4b26      	ldr	r3, [pc, #152]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	461a      	mov	r2, r3
 800690a:	2301      	movs	r3, #1
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006912:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	fa93 f3a3 	rbit	r3, r3
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800691e:	fab3 f383 	clz	r3, r3
 8006922:	b2db      	uxtb	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	4b1d      	ldr	r3, [pc, #116]	; (800699c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	461a      	mov	r2, r3
 800692e:	2300      	movs	r3, #0
 8006930:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006932:	4a18      	ldr	r2, [pc, #96]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006936:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d04b      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006942:	f7fb ff13 	bl	800276c <HAL_GetTick>
 8006946:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006948:	e00a      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800694a:	f7fb ff0f 	bl	800276c <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	f241 3288 	movw	r2, #5000	; 0x1388
 8006958:	4293      	cmp	r3, r2
 800695a:	d901      	bls.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e0f5      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006960:	2302      	movs	r3, #2
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	fa93 f3a3 	rbit	r3, r3
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
 800696c:	2302      	movs	r3, #2
 800696e:	623b      	str	r3, [r7, #32]
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	fa93 f3a3 	rbit	r3, r3
 8006976:	61fb      	str	r3, [r7, #28]
  return result;
 8006978:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800697a:	fab3 f383 	clz	r3, r3
 800697e:	b2db      	uxtb	r3, r3
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f043 0302 	orr.w	r3, r3, #2
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d108      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800698e:	4b01      	ldr	r3, [pc, #4]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	e00d      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006994:	40021000 	.word	0x40021000
 8006998:	40007000 	.word	0x40007000
 800699c:	10908100 	.word	0x10908100
 80069a0:	2302      	movs	r3, #2
 80069a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	fa93 f3a3 	rbit	r3, r3
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	4b69      	ldr	r3, [pc, #420]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	2202      	movs	r2, #2
 80069b2:	613a      	str	r2, [r7, #16]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	fa92 f2a2 	rbit	r2, r2
 80069ba:	60fa      	str	r2, [r7, #12]
  return result;
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	fab2 f282 	clz	r2, r2
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	f002 021f 	and.w	r2, r2, #31
 80069ce:	2101      	movs	r1, #1
 80069d0:	fa01 f202 	lsl.w	r2, r1, r2
 80069d4:	4013      	ands	r3, r2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0b7      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80069da:	4b5e      	ldr	r3, [pc, #376]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	495b      	ldr	r1, [pc, #364]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80069ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d105      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f4:	4b57      	ldr	r3, [pc, #348]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	4a56      	ldr	r2, [pc, #344]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80069fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a0c:	4b51      	ldr	r3, [pc, #324]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	f023 0203 	bic.w	r2, r3, #3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	494e      	ldr	r1, [pc, #312]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d008      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a2a:	4b4a      	ldr	r3, [pc, #296]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	4947      	ldr	r1, [pc, #284]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d008      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a48:	4b42      	ldr	r3, [pc, #264]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	493f      	ldr	r1, [pc, #252]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d008      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a66:	4b3b      	ldr	r3, [pc, #236]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	f023 0210 	bic.w	r2, r3, #16
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	4938      	ldr	r1, [pc, #224]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d008      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006a84:	4b33      	ldr	r3, [pc, #204]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	4930      	ldr	r1, [pc, #192]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d008      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006aa2:	4b2c      	ldr	r3, [pc, #176]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	f023 0220 	bic.w	r2, r3, #32
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	4929      	ldr	r1, [pc, #164]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d008      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ac0:	4b24      	ldr	r3, [pc, #144]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	4921      	ldr	r1, [pc, #132]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0310 	and.w	r3, r3, #16
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d008      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ade:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	491a      	ldr	r1, [pc, #104]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d008      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006afc:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b08:	4912      	ldr	r1, [pc, #72]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d008      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b1a:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	490b      	ldr	r1, [pc, #44]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006b38:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	4903      	ldr	r1, [pc, #12]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3748      	adds	r7, #72	; 0x48
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	40021000 	.word	0x40021000

08006b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e049      	b.n	8006bfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fb fb0e 	bl	80021a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4619      	mov	r1, r3
 8006b96:	4610      	mov	r0, r2
 8006b98:	f000 fc1e 	bl	80073d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d001      	beq.n	8006c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e045      	b.n	8006cac <HAL_TIM_Base_Start_IT+0xa4>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0201 	orr.w	r2, r2, #1
 8006c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a1e      	ldr	r2, [pc, #120]	; (8006cb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d013      	beq.n	8006c6a <HAL_TIM_Base_Start_IT+0x62>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c4a:	d00e      	beq.n	8006c6a <HAL_TIM_Base_Start_IT+0x62>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a1a      	ldr	r2, [pc, #104]	; (8006cbc <HAL_TIM_Base_Start_IT+0xb4>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d009      	beq.n	8006c6a <HAL_TIM_Base_Start_IT+0x62>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a19      	ldr	r2, [pc, #100]	; (8006cc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d004      	beq.n	8006c6a <HAL_TIM_Base_Start_IT+0x62>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a17      	ldr	r2, [pc, #92]	; (8006cc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d115      	bne.n	8006c96 <HAL_TIM_Base_Start_IT+0x8e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	4b15      	ldr	r3, [pc, #84]	; (8006cc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b06      	cmp	r3, #6
 8006c7a:	d015      	beq.n	8006ca8 <HAL_TIM_Base_Start_IT+0xa0>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c82:	d011      	beq.n	8006ca8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c94:	e008      	b.n	8006ca8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0201 	orr.w	r2, r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	e000      	b.n	8006caa <HAL_TIM_Base_Start_IT+0xa2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	40012c00 	.word	0x40012c00
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000800 	.word	0x40000800
 8006cc4:	40014000 	.word	0x40014000
 8006cc8:	00010007 	.word	0x00010007

08006ccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e049      	b.n	8006d72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f841 	bl	8006d7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	f000 fb64 	bl	80073d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d122      	bne.n	8006dea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d11b      	bne.n	8006dea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f06f 0202 	mvn.w	r2, #2
 8006dba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	f003 0303 	and.w	r3, r3, #3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fae2 	bl	800739a <HAL_TIM_IC_CaptureCallback>
 8006dd6:	e005      	b.n	8006de4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fad4 	bl	8007386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fae5 	bl	80073ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d122      	bne.n	8006e3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d11b      	bne.n	8006e3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f06f 0204 	mvn.w	r2, #4
 8006e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fab8 	bl	800739a <HAL_TIM_IC_CaptureCallback>
 8006e2a:	e005      	b.n	8006e38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 faaa 	bl	8007386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fabb 	bl	80073ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d122      	bne.n	8006e92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	d11b      	bne.n	8006e92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f06f 0208 	mvn.w	r2, #8
 8006e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2204      	movs	r2, #4
 8006e68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fa8e 	bl	800739a <HAL_TIM_IC_CaptureCallback>
 8006e7e:	e005      	b.n	8006e8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fa80 	bl	8007386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fa91 	bl	80073ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b10      	cmp	r3, #16
 8006e9e:	d122      	bne.n	8006ee6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	f003 0310 	and.w	r3, r3, #16
 8006eaa:	2b10      	cmp	r3, #16
 8006eac:	d11b      	bne.n	8006ee6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f06f 0210 	mvn.w	r2, #16
 8006eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2208      	movs	r2, #8
 8006ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fa64 	bl	800739a <HAL_TIM_IC_CaptureCallback>
 8006ed2:	e005      	b.n	8006ee0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fa56 	bl	8007386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa67 	bl	80073ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d10e      	bne.n	8006f12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d107      	bne.n	8006f12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f06f 0201 	mvn.w	r2, #1
 8006f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7fb fb73 	bl	80025f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1c:	2b80      	cmp	r3, #128	; 0x80
 8006f1e:	d10e      	bne.n	8006f3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b80      	cmp	r3, #128	; 0x80
 8006f2c:	d107      	bne.n	8006f3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fe8d 	bl	8007c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4c:	d10e      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f58:	2b80      	cmp	r3, #128	; 0x80
 8006f5a:	d107      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fe80 	bl	8007c6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d10e      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	d107      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa15 	bl	80073c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	d10e      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d107      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 0220 	mvn.w	r2, #32
 8006fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fe40 	bl	8007c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d101      	bne.n	8006fea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	e0ff      	b.n	80071ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b14      	cmp	r3, #20
 8006ff6:	f200 80f0 	bhi.w	80071da <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007055 	.word	0x08007055
 8007004:	080071db 	.word	0x080071db
 8007008:	080071db 	.word	0x080071db
 800700c:	080071db 	.word	0x080071db
 8007010:	08007095 	.word	0x08007095
 8007014:	080071db 	.word	0x080071db
 8007018:	080071db 	.word	0x080071db
 800701c:	080071db 	.word	0x080071db
 8007020:	080070d7 	.word	0x080070d7
 8007024:	080071db 	.word	0x080071db
 8007028:	080071db 	.word	0x080071db
 800702c:	080071db 	.word	0x080071db
 8007030:	08007117 	.word	0x08007117
 8007034:	080071db 	.word	0x080071db
 8007038:	080071db 	.word	0x080071db
 800703c:	080071db 	.word	0x080071db
 8007040:	08007159 	.word	0x08007159
 8007044:	080071db 	.word	0x080071db
 8007048:	080071db 	.word	0x080071db
 800704c:	080071db 	.word	0x080071db
 8007050:	08007199 	.word	0x08007199
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	4618      	mov	r0, r3
 800705c:	f000 fa3e 	bl	80074dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0208 	orr.w	r2, r2, #8
 800706e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0204 	bic.w	r2, r2, #4
 800707e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6999      	ldr	r1, [r3, #24]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	691a      	ldr	r2, [r3, #16]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	619a      	str	r2, [r3, #24]
      break;
 8007092:	e0a5      	b.n	80071e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	4618      	mov	r0, r3
 800709c:	f000 faa4 	bl	80075e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699a      	ldr	r2, [r3, #24]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6999      	ldr	r1, [r3, #24]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	021a      	lsls	r2, r3, #8
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	619a      	str	r2, [r3, #24]
      break;
 80070d4:	e084      	b.n	80071e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68b9      	ldr	r1, [r7, #8]
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fb03 	bl	80076e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69da      	ldr	r2, [r3, #28]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0208 	orr.w	r2, r2, #8
 80070f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69da      	ldr	r2, [r3, #28]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0204 	bic.w	r2, r2, #4
 8007100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69d9      	ldr	r1, [r3, #28]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	61da      	str	r2, [r3, #28]
      break;
 8007114:	e064      	b.n	80071e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68b9      	ldr	r1, [r7, #8]
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fb61 	bl	80077e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69da      	ldr	r2, [r3, #28]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69da      	ldr	r2, [r3, #28]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69d9      	ldr	r1, [r3, #28]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	021a      	lsls	r2, r3, #8
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	61da      	str	r2, [r3, #28]
      break;
 8007156:	e043      	b.n	80071e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68b9      	ldr	r1, [r7, #8]
 800715e:	4618      	mov	r0, r3
 8007160:	f000 fba4 	bl	80078ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f042 0208 	orr.w	r2, r2, #8
 8007172:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0204 	bic.w	r2, r2, #4
 8007182:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007196:	e023      	b.n	80071e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 fbe2 	bl	8007968 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	021a      	lsls	r2, r3, #8
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80071d8:	e002      	b.n	80071e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	75fb      	strb	r3, [r7, #23]
      break;
 80071de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop

080071f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_TIM_ConfigClockSource+0x1c>
 800720c:	2302      	movs	r3, #2
 800720e:	e0b6      	b.n	800737e <HAL_TIM_ConfigClockSource+0x18a>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800722e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800723a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800724c:	d03e      	beq.n	80072cc <HAL_TIM_ConfigClockSource+0xd8>
 800724e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007252:	f200 8087 	bhi.w	8007364 <HAL_TIM_ConfigClockSource+0x170>
 8007256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800725a:	f000 8086 	beq.w	800736a <HAL_TIM_ConfigClockSource+0x176>
 800725e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007262:	d87f      	bhi.n	8007364 <HAL_TIM_ConfigClockSource+0x170>
 8007264:	2b70      	cmp	r3, #112	; 0x70
 8007266:	d01a      	beq.n	800729e <HAL_TIM_ConfigClockSource+0xaa>
 8007268:	2b70      	cmp	r3, #112	; 0x70
 800726a:	d87b      	bhi.n	8007364 <HAL_TIM_ConfigClockSource+0x170>
 800726c:	2b60      	cmp	r3, #96	; 0x60
 800726e:	d050      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x11e>
 8007270:	2b60      	cmp	r3, #96	; 0x60
 8007272:	d877      	bhi.n	8007364 <HAL_TIM_ConfigClockSource+0x170>
 8007274:	2b50      	cmp	r3, #80	; 0x50
 8007276:	d03c      	beq.n	80072f2 <HAL_TIM_ConfigClockSource+0xfe>
 8007278:	2b50      	cmp	r3, #80	; 0x50
 800727a:	d873      	bhi.n	8007364 <HAL_TIM_ConfigClockSource+0x170>
 800727c:	2b40      	cmp	r3, #64	; 0x40
 800727e:	d058      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x13e>
 8007280:	2b40      	cmp	r3, #64	; 0x40
 8007282:	d86f      	bhi.n	8007364 <HAL_TIM_ConfigClockSource+0x170>
 8007284:	2b30      	cmp	r3, #48	; 0x30
 8007286:	d064      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x15e>
 8007288:	2b30      	cmp	r3, #48	; 0x30
 800728a:	d86b      	bhi.n	8007364 <HAL_TIM_ConfigClockSource+0x170>
 800728c:	2b20      	cmp	r3, #32
 800728e:	d060      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x15e>
 8007290:	2b20      	cmp	r3, #32
 8007292:	d867      	bhi.n	8007364 <HAL_TIM_ConfigClockSource+0x170>
 8007294:	2b00      	cmp	r3, #0
 8007296:	d05c      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x15e>
 8007298:	2b10      	cmp	r3, #16
 800729a:	d05a      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x15e>
 800729c:	e062      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072ae:	f000 fc35 	bl	8007b1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	609a      	str	r2, [r3, #8]
      break;
 80072ca:	e04f      	b.n	800736c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072dc:	f000 fc1e 	bl	8007b1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072ee:	609a      	str	r2, [r3, #8]
      break;
 80072f0:	e03c      	b.n	800736c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072fe:	461a      	mov	r2, r3
 8007300:	f000 fb92 	bl	8007a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2150      	movs	r1, #80	; 0x50
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fbeb 	bl	8007ae6 <TIM_ITRx_SetConfig>
      break;
 8007310:	e02c      	b.n	800736c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800731e:	461a      	mov	r2, r3
 8007320:	f000 fbb1 	bl	8007a86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2160      	movs	r1, #96	; 0x60
 800732a:	4618      	mov	r0, r3
 800732c:	f000 fbdb 	bl	8007ae6 <TIM_ITRx_SetConfig>
      break;
 8007330:	e01c      	b.n	800736c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800733e:	461a      	mov	r2, r3
 8007340:	f000 fb72 	bl	8007a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2140      	movs	r1, #64	; 0x40
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fbcb 	bl	8007ae6 <TIM_ITRx_SetConfig>
      break;
 8007350:	e00c      	b.n	800736c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4619      	mov	r1, r3
 800735c:	4610      	mov	r0, r2
 800735e:	f000 fbc2 	bl	8007ae6 <TIM_ITRx_SetConfig>
      break;
 8007362:	e003      	b.n	800736c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
      break;
 8007368:	e000      	b.n	800736c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800736a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800737c:	7bfb      	ldrb	r3, [r7, #15]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a36      	ldr	r2, [pc, #216]	; (80074c4 <TIM_Base_SetConfig+0xec>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00b      	beq.n	8007408 <TIM_Base_SetConfig+0x30>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f6:	d007      	beq.n	8007408 <TIM_Base_SetConfig+0x30>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a33      	ldr	r2, [pc, #204]	; (80074c8 <TIM_Base_SetConfig+0xf0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_Base_SetConfig+0x30>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a32      	ldr	r2, [pc, #200]	; (80074cc <TIM_Base_SetConfig+0xf4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d108      	bne.n	800741a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a29      	ldr	r2, [pc, #164]	; (80074c4 <TIM_Base_SetConfig+0xec>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d017      	beq.n	8007452 <TIM_Base_SetConfig+0x7a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007428:	d013      	beq.n	8007452 <TIM_Base_SetConfig+0x7a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a26      	ldr	r2, [pc, #152]	; (80074c8 <TIM_Base_SetConfig+0xf0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d00f      	beq.n	8007452 <TIM_Base_SetConfig+0x7a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a25      	ldr	r2, [pc, #148]	; (80074cc <TIM_Base_SetConfig+0xf4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00b      	beq.n	8007452 <TIM_Base_SetConfig+0x7a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a24      	ldr	r2, [pc, #144]	; (80074d0 <TIM_Base_SetConfig+0xf8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d007      	beq.n	8007452 <TIM_Base_SetConfig+0x7a>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a23      	ldr	r2, [pc, #140]	; (80074d4 <TIM_Base_SetConfig+0xfc>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_Base_SetConfig+0x7a>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a22      	ldr	r2, [pc, #136]	; (80074d8 <TIM_Base_SetConfig+0x100>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d108      	bne.n	8007464 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a0e      	ldr	r2, [pc, #56]	; (80074c4 <TIM_Base_SetConfig+0xec>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00b      	beq.n	80074a8 <TIM_Base_SetConfig+0xd0>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a0f      	ldr	r2, [pc, #60]	; (80074d0 <TIM_Base_SetConfig+0xf8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d007      	beq.n	80074a8 <TIM_Base_SetConfig+0xd0>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a0e      	ldr	r2, [pc, #56]	; (80074d4 <TIM_Base_SetConfig+0xfc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d003      	beq.n	80074a8 <TIM_Base_SetConfig+0xd0>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a0d      	ldr	r2, [pc, #52]	; (80074d8 <TIM_Base_SetConfig+0x100>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d103      	bne.n	80074b0 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	691a      	ldr	r2, [r3, #16]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	615a      	str	r2, [r3, #20]
}
 80074b6:	bf00      	nop
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	40012c00 	.word	0x40012c00
 80074c8:	40000400 	.word	0x40000400
 80074cc:	40000800 	.word	0x40000800
 80074d0:	40014000 	.word	0x40014000
 80074d4:	40014400 	.word	0x40014400
 80074d8:	40014800 	.word	0x40014800

080074dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	f023 0201 	bic.w	r2, r3, #1
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800750a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0303 	bic.w	r3, r3, #3
 8007516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f023 0302 	bic.w	r3, r3, #2
 8007528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a28      	ldr	r2, [pc, #160]	; (80075d8 <TIM_OC1_SetConfig+0xfc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00b      	beq.n	8007554 <TIM_OC1_SetConfig+0x78>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a27      	ldr	r2, [pc, #156]	; (80075dc <TIM_OC1_SetConfig+0x100>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d007      	beq.n	8007554 <TIM_OC1_SetConfig+0x78>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a26      	ldr	r2, [pc, #152]	; (80075e0 <TIM_OC1_SetConfig+0x104>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d003      	beq.n	8007554 <TIM_OC1_SetConfig+0x78>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a25      	ldr	r2, [pc, #148]	; (80075e4 <TIM_OC1_SetConfig+0x108>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d10c      	bne.n	800756e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f023 0308 	bic.w	r3, r3, #8
 800755a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f023 0304 	bic.w	r3, r3, #4
 800756c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a19      	ldr	r2, [pc, #100]	; (80075d8 <TIM_OC1_SetConfig+0xfc>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00b      	beq.n	800758e <TIM_OC1_SetConfig+0xb2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a18      	ldr	r2, [pc, #96]	; (80075dc <TIM_OC1_SetConfig+0x100>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d007      	beq.n	800758e <TIM_OC1_SetConfig+0xb2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <TIM_OC1_SetConfig+0x104>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d003      	beq.n	800758e <TIM_OC1_SetConfig+0xb2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a16      	ldr	r2, [pc, #88]	; (80075e4 <TIM_OC1_SetConfig+0x108>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d111      	bne.n	80075b2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800759c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	621a      	str	r2, [r3, #32]
}
 80075cc:	bf00      	nop
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40014000 	.word	0x40014000
 80075e0:	40014400 	.word	0x40014400
 80075e4:	40014800 	.word	0x40014800

080075e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0210 	bic.w	r2, r3, #16
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4313      	orrs	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f023 0320 	bic.w	r3, r3, #32
 8007636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	4313      	orrs	r3, r2
 8007642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a24      	ldr	r2, [pc, #144]	; (80076d8 <TIM_OC2_SetConfig+0xf0>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d10d      	bne.n	8007668 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	4313      	orrs	r3, r2
 800765e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007666:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a1b      	ldr	r2, [pc, #108]	; (80076d8 <TIM_OC2_SetConfig+0xf0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00b      	beq.n	8007688 <TIM_OC2_SetConfig+0xa0>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a1a      	ldr	r2, [pc, #104]	; (80076dc <TIM_OC2_SetConfig+0xf4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d007      	beq.n	8007688 <TIM_OC2_SetConfig+0xa0>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a19      	ldr	r2, [pc, #100]	; (80076e0 <TIM_OC2_SetConfig+0xf8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d003      	beq.n	8007688 <TIM_OC2_SetConfig+0xa0>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a18      	ldr	r2, [pc, #96]	; (80076e4 <TIM_OC2_SetConfig+0xfc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d113      	bne.n	80076b0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800768e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007696:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	621a      	str	r2, [r3, #32]
}
 80076ca:	bf00      	nop
 80076cc:	371c      	adds	r7, #28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	40012c00 	.word	0x40012c00
 80076dc:	40014000 	.word	0x40014000
 80076e0:	40014400 	.word	0x40014400
 80076e4:	40014800 	.word	0x40014800

080076e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 0303 	bic.w	r3, r3, #3
 8007722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	021b      	lsls	r3, r3, #8
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a23      	ldr	r2, [pc, #140]	; (80077d4 <TIM_OC3_SetConfig+0xec>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d10d      	bne.n	8007766 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	021b      	lsls	r3, r3, #8
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	4313      	orrs	r3, r2
 800775c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007764:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <TIM_OC3_SetConfig+0xec>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00b      	beq.n	8007786 <TIM_OC3_SetConfig+0x9e>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a19      	ldr	r2, [pc, #100]	; (80077d8 <TIM_OC3_SetConfig+0xf0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d007      	beq.n	8007786 <TIM_OC3_SetConfig+0x9e>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a18      	ldr	r2, [pc, #96]	; (80077dc <TIM_OC3_SetConfig+0xf4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d003      	beq.n	8007786 <TIM_OC3_SetConfig+0x9e>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <TIM_OC3_SetConfig+0xf8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d113      	bne.n	80077ae <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800778c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	621a      	str	r2, [r3, #32]
}
 80077c8:	bf00      	nop
 80077ca:	371c      	adds	r7, #28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	40012c00 	.word	0x40012c00
 80077d8:	40014000 	.word	0x40014000
 80077dc:	40014400 	.word	0x40014400
 80077e0:	40014800 	.word	0x40014800

080077e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4313      	orrs	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	031b      	lsls	r3, r3, #12
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a16      	ldr	r2, [pc, #88]	; (800789c <TIM_OC4_SetConfig+0xb8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00b      	beq.n	8007860 <TIM_OC4_SetConfig+0x7c>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a15      	ldr	r2, [pc, #84]	; (80078a0 <TIM_OC4_SetConfig+0xbc>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d007      	beq.n	8007860 <TIM_OC4_SetConfig+0x7c>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a14      	ldr	r2, [pc, #80]	; (80078a4 <TIM_OC4_SetConfig+0xc0>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d003      	beq.n	8007860 <TIM_OC4_SetConfig+0x7c>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a13      	ldr	r2, [pc, #76]	; (80078a8 <TIM_OC4_SetConfig+0xc4>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d109      	bne.n	8007874 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	019b      	lsls	r3, r3, #6
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	4313      	orrs	r3, r2
 8007872:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	621a      	str	r2, [r3, #32]
}
 800788e:	bf00      	nop
 8007890:	371c      	adds	r7, #28
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	40012c00 	.word	0x40012c00
 80078a0:	40014000 	.word	0x40014000
 80078a4:	40014400 	.word	0x40014400
 80078a8:	40014800 	.word	0x40014800

080078ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	041b      	lsls	r3, r3, #16
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a15      	ldr	r2, [pc, #84]	; (8007958 <TIM_OC5_SetConfig+0xac>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00b      	beq.n	800791e <TIM_OC5_SetConfig+0x72>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a14      	ldr	r2, [pc, #80]	; (800795c <TIM_OC5_SetConfig+0xb0>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d007      	beq.n	800791e <TIM_OC5_SetConfig+0x72>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a13      	ldr	r2, [pc, #76]	; (8007960 <TIM_OC5_SetConfig+0xb4>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d003      	beq.n	800791e <TIM_OC5_SetConfig+0x72>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a12      	ldr	r2, [pc, #72]	; (8007964 <TIM_OC5_SetConfig+0xb8>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d109      	bne.n	8007932 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007924:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	021b      	lsls	r3, r3, #8
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	4313      	orrs	r3, r2
 8007930:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	621a      	str	r2, [r3, #32]
}
 800794c:	bf00      	nop
 800794e:	371c      	adds	r7, #28
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	40012c00 	.word	0x40012c00
 800795c:	40014000 	.word	0x40014000
 8007960:	40014400 	.word	0x40014400
 8007964:	40014800 	.word	0x40014800

08007968 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800799a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	051b      	lsls	r3, r3, #20
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a16      	ldr	r2, [pc, #88]	; (8007a18 <TIM_OC6_SetConfig+0xb0>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00b      	beq.n	80079dc <TIM_OC6_SetConfig+0x74>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a15      	ldr	r2, [pc, #84]	; (8007a1c <TIM_OC6_SetConfig+0xb4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d007      	beq.n	80079dc <TIM_OC6_SetConfig+0x74>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a14      	ldr	r2, [pc, #80]	; (8007a20 <TIM_OC6_SetConfig+0xb8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d003      	beq.n	80079dc <TIM_OC6_SetConfig+0x74>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a13      	ldr	r2, [pc, #76]	; (8007a24 <TIM_OC6_SetConfig+0xbc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d109      	bne.n	80079f0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	029b      	lsls	r3, r3, #10
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	40012c00 	.word	0x40012c00
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40014400 	.word	0x40014400
 8007a24:	40014800 	.word	0x40014800

08007a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	f023 0201 	bic.w	r2, r3, #1
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	011b      	lsls	r3, r3, #4
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f023 030a 	bic.w	r3, r3, #10
 8007a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	621a      	str	r2, [r3, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b087      	sub	sp, #28
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f023 0210 	bic.w	r2, r3, #16
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	031b      	lsls	r3, r3, #12
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	011b      	lsls	r3, r3, #4
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	621a      	str	r2, [r3, #32]
}
 8007ada:	bf00      	nop
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b085      	sub	sp, #20
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	f043 0307 	orr.w	r3, r3, #7
 8007b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	609a      	str	r2, [r3, #8]
}
 8007b10:	bf00      	nop
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	021a      	lsls	r2, r3, #8
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	609a      	str	r2, [r3, #8]
}
 8007b50:	bf00      	nop
 8007b52:	371c      	adds	r7, #28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d101      	bne.n	8007b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e059      	b.n	8007c28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a26      	ldr	r2, [pc, #152]	; (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d108      	bne.n	8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ba4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a19      	ldr	r2, [pc, #100]	; (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bdc:	d00e      	beq.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a15      	ldr	r2, [pc, #84]	; (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d009      	beq.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a13      	ldr	r2, [pc, #76]	; (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d004      	beq.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a12      	ldr	r2, [pc, #72]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d10c      	bne.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	40012c00 	.word	0x40012c00
 8007c38:	40000400 	.word	0x40000400
 8007c3c:	40000800 	.word	0x40000800
 8007c40:	40014000 	.word	0x40014000

08007c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c90:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007c94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007cb6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007cba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	43db      	mvns	r3, r3
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	4013      	ands	r3, r2
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	f107 0014 	add.w	r0, r7, #20
 8007cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	b004      	add	sp, #16
 8007d24:	4770      	bx	lr
	...

08007d28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b09d      	sub	sp, #116	; 0x74
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	78db      	ldrb	r3, [r3, #3]
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d81f      	bhi.n	8007d9a <USB_ActivateEndpoint+0x72>
 8007d5a:	a201      	add	r2, pc, #4	; (adr r2, 8007d60 <USB_ActivateEndpoint+0x38>)
 8007d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d60:	08007d71 	.word	0x08007d71
 8007d64:	08007d8d 	.word	0x08007d8d
 8007d68:	08007da3 	.word	0x08007da3
 8007d6c:	08007d7f 	.word	0x08007d7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007d70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007d7c:	e012      	b.n	8007da4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007d7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d82:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007d86:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007d8a:	e00b      	b.n	8007da4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007d8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007d98:	e004      	b.n	8007da4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007da0:	e000      	b.n	8007da4 <USB_ActivateEndpoint+0x7c>
      break;
 8007da2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	441a      	add	r2, r3
 8007dae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	b21b      	sxth	r3, r3
 8007dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dde:	b21a      	sxth	r2, r3
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	b21b      	sxth	r3, r3
 8007de6:	4313      	orrs	r3, r2
 8007de8:	b21b      	sxth	r3, r3
 8007dea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	441a      	add	r2, r3
 8007df8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	7b1b      	ldrb	r3, [r3, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f040 8178 	bne.w	800810a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	785b      	ldrb	r3, [r3, #1]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 8084 	beq.w	8007f2c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	61bb      	str	r3, [r7, #24]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	4413      	add	r3, r2
 8007e36:	61bb      	str	r3, [r7, #24]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	011a      	lsls	r2, r3, #4
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	88db      	ldrh	r3, [r3, #6]
 8007e4c:	085b      	lsrs	r3, r3, #1
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	827b      	strh	r3, [r7, #18]
 8007e66:	8a7b      	ldrh	r3, [r7, #18]
 8007e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01b      	beq.n	8007ea8 <USB_ActivateEndpoint+0x180>
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e86:	823b      	strh	r3, [r7, #16]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	441a      	add	r2, r3
 8007e92:	8a3b      	ldrh	r3, [r7, #16]
 8007e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	78db      	ldrb	r3, [r3, #3]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d020      	beq.n	8007ef2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ec6:	81bb      	strh	r3, [r7, #12]
 8007ec8:	89bb      	ldrh	r3, [r7, #12]
 8007eca:	f083 0320 	eor.w	r3, r3, #32
 8007ece:	81bb      	strh	r3, [r7, #12]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	441a      	add	r2, r3
 8007eda:	89bb      	ldrh	r3, [r7, #12]
 8007edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	8013      	strh	r3, [r2, #0]
 8007ef0:	e2d5      	b.n	800849e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f08:	81fb      	strh	r3, [r7, #14]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	441a      	add	r2, r3
 8007f14:	89fb      	ldrh	r3, [r7, #14]
 8007f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	8013      	strh	r3, [r2, #0]
 8007f2a:	e2b8      	b.n	800849e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	461a      	mov	r2, r3
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	4413      	add	r3, r2
 8007f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	011a      	lsls	r2, r3, #4
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	88db      	ldrh	r3, [r3, #6]
 8007f54:	085b      	lsrs	r3, r3, #1
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	4413      	add	r3, r2
 8007f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	011a      	lsls	r2, r3, #4
 8007f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	801a      	strh	r2, [r3, #0]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	2b3e      	cmp	r3, #62	; 0x3e
 8007f9a:	d91d      	bls.n	8007fd8 <USB_ActivateEndpoint+0x2b0>
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f003 031f 	and.w	r3, r3, #31
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d102      	bne.n	8007fb6 <USB_ActivateEndpoint+0x28e>
 8007fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	029b      	lsls	r3, r3, #10
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	801a      	strh	r2, [r3, #0]
 8007fd6:	e026      	b.n	8008026 <USB_ActivateEndpoint+0x2fe>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <USB_ActivateEndpoint+0x2ce>
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	801a      	strh	r2, [r3, #0]
 8007ff4:	e017      	b.n	8008026 <USB_ActivateEndpoint+0x2fe>
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	085b      	lsrs	r3, r3, #1
 8007ffc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <USB_ActivateEndpoint+0x2e8>
 800800a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800800c:	3301      	adds	r3, #1
 800800e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	b29a      	uxth	r2, r3
 8008016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008018:	b29b      	uxth	r3, r3
 800801a:	029b      	lsls	r3, r3, #10
 800801c:	b29b      	uxth	r3, r3
 800801e:	4313      	orrs	r3, r2
 8008020:	b29a      	uxth	r2, r3
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	847b      	strh	r3, [r7, #34]	; 0x22
 8008034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d01b      	beq.n	8008076 <USB_ActivateEndpoint+0x34e>
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	b29b      	uxth	r3, r3
 800804c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008054:	843b      	strh	r3, [r7, #32]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	441a      	add	r2, r3
 8008060:	8c3b      	ldrh	r3, [r7, #32]
 8008062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800806a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800806e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008072:	b29b      	uxth	r3, r3
 8008074:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d124      	bne.n	80080c8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	b29b      	uxth	r3, r3
 800808c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008094:	83bb      	strh	r3, [r7, #28]
 8008096:	8bbb      	ldrh	r3, [r7, #28]
 8008098:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800809c:	83bb      	strh	r3, [r7, #28]
 800809e:	8bbb      	ldrh	r3, [r7, #28]
 80080a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080a4:	83bb      	strh	r3, [r7, #28]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	441a      	add	r2, r3
 80080b0:	8bbb      	ldrh	r3, [r7, #28]
 80080b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	8013      	strh	r3, [r2, #0]
 80080c6:	e1ea      	b.n	800849e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080de:	83fb      	strh	r3, [r7, #30]
 80080e0:	8bfb      	ldrh	r3, [r7, #30]
 80080e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080e6:	83fb      	strh	r3, [r7, #30]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	441a      	add	r2, r3
 80080f2:	8bfb      	ldrh	r3, [r7, #30]
 80080f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008104:	b29b      	uxth	r3, r3
 8008106:	8013      	strh	r3, [r2, #0]
 8008108:	e1c9      	b.n	800849e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	78db      	ldrb	r3, [r3, #3]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d11e      	bne.n	8008150 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008128:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	441a      	add	r2, r3
 8008136:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800813a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800813e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008142:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800814a:	b29b      	uxth	r3, r3
 800814c:	8013      	strh	r3, [r2, #0]
 800814e:	e01d      	b.n	800818c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008166:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	441a      	add	r2, r3
 8008174:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800817c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008188:	b29b      	uxth	r3, r3
 800818a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008196:	b29b      	uxth	r3, r3
 8008198:	461a      	mov	r2, r3
 800819a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800819c:	4413      	add	r3, r2
 800819e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	011a      	lsls	r2, r3, #4
 80081a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	891b      	ldrh	r3, [r3, #8]
 80081b4:	085b      	lsrs	r3, r3, #1
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081be:	801a      	strh	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	657b      	str	r3, [r7, #84]	; 0x54
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	461a      	mov	r2, r3
 80081ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081d0:	4413      	add	r3, r2
 80081d2:	657b      	str	r3, [r7, #84]	; 0x54
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	011a      	lsls	r2, r3, #4
 80081da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80081e2:	653b      	str	r3, [r7, #80]	; 0x50
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	895b      	ldrh	r3, [r3, #10]
 80081e8:	085b      	lsrs	r3, r3, #1
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	785b      	ldrb	r3, [r3, #1]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f040 8093 	bne.w	8008324 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800820e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01b      	beq.n	8008252 <USB_ActivateEndpoint+0x52a>
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800822c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008230:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	441a      	add	r2, r3
 800823c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800823e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800824a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800824e:	b29b      	uxth	r3, r3
 8008250:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008260:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008266:	2b00      	cmp	r3, #0
 8008268:	d01b      	beq.n	80082a2 <USB_ActivateEndpoint+0x57a>
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008280:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	441a      	add	r2, r3
 800828c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800828e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800829a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800829e:	b29b      	uxth	r3, r3
 80082a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b8:	873b      	strh	r3, [r7, #56]	; 0x38
 80082ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082c0:	873b      	strh	r3, [r7, #56]	; 0x38
 80082c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	441a      	add	r2, r3
 80082d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008300:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	441a      	add	r2, r3
 800830c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800830e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800831a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800831e:	b29b      	uxth	r3, r3
 8008320:	8013      	strh	r3, [r2, #0]
 8008322:	e0bc      	b.n	800849e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008334:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01d      	beq.n	800837c <USB_ActivateEndpoint+0x654>
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	b29b      	uxth	r3, r3
 800834e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008356:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	441a      	add	r2, r3
 8008364:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800836c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008370:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008378:	b29b      	uxth	r3, r3
 800837a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800838c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008394:	2b00      	cmp	r3, #0
 8008396:	d01d      	beq.n	80083d4 <USB_ActivateEndpoint+0x6ac>
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	441a      	add	r2, r3
 80083bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80083c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	78db      	ldrb	r3, [r3, #3]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d024      	beq.n	8008426 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80083f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80083fa:	f083 0320 	eor.w	r3, r3, #32
 80083fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	441a      	add	r2, r3
 800840c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800841c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008420:	b29b      	uxth	r3, r3
 8008422:	8013      	strh	r3, [r2, #0]
 8008424:	e01d      	b.n	8008462 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	b29b      	uxth	r3, r3
 8008434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800843c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	441a      	add	r2, r3
 800844a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800844e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800845a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800845e:	b29b      	uxth	r3, r3
 8008460:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	b29b      	uxth	r3, r3
 8008470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008478:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800848a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800848e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800849a:	b29b      	uxth	r3, r3
 800849c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800849e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3774      	adds	r7, #116	; 0x74
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop

080084b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b08d      	sub	sp, #52	; 0x34
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	7b1b      	ldrb	r3, [r3, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f040 808e 	bne.w	80085e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	785b      	ldrb	r3, [r3, #1]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d044      	beq.n	8008556 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	81bb      	strh	r3, [r7, #12]
 80084da:	89bb      	ldrh	r3, [r7, #12]
 80084dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01b      	beq.n	800851c <USB_DeactivateEndpoint+0x6c>
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fa:	817b      	strh	r3, [r7, #10]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	441a      	add	r2, r3
 8008506:	897b      	ldrh	r3, [r7, #10]
 8008508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800850c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008514:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008518:	b29b      	uxth	r3, r3
 800851a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800852e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008532:	813b      	strh	r3, [r7, #8]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	441a      	add	r2, r3
 800853e:	893b      	ldrh	r3, [r7, #8]
 8008540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800854c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008550:	b29b      	uxth	r3, r3
 8008552:	8013      	strh	r3, [r2, #0]
 8008554:	e192      	b.n	800887c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	827b      	strh	r3, [r7, #18]
 8008564:	8a7b      	ldrh	r3, [r7, #18]
 8008566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d01b      	beq.n	80085a6 <USB_DeactivateEndpoint+0xf6>
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008584:	823b      	strh	r3, [r7, #16]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	441a      	add	r2, r3
 8008590:	8a3b      	ldrh	r3, [r7, #16]
 8008592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800859a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800859e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085bc:	81fb      	strh	r3, [r7, #14]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	441a      	add	r2, r3
 80085c8:	89fb      	ldrh	r3, [r7, #14]
 80085ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085da:	b29b      	uxth	r3, r3
 80085dc:	8013      	strh	r3, [r2, #0]
 80085de:	e14d      	b.n	800887c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	785b      	ldrb	r3, [r3, #1]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f040 80a5 	bne.w	8008734 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	843b      	strh	r3, [r7, #32]
 80085f8:	8c3b      	ldrh	r3, [r7, #32]
 80085fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d01b      	beq.n	800863a <USB_DeactivateEndpoint+0x18a>
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	b29b      	uxth	r3, r3
 8008610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008618:	83fb      	strh	r3, [r7, #30]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	441a      	add	r2, r3
 8008624:	8bfb      	ldrh	r3, [r7, #30]
 8008626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800862a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800862e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008636:	b29b      	uxth	r3, r3
 8008638:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	83bb      	strh	r3, [r7, #28]
 8008648:	8bbb      	ldrh	r3, [r7, #28]
 800864a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01b      	beq.n	800868a <USB_DeactivateEndpoint+0x1da>
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008668:	837b      	strh	r3, [r7, #26]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	441a      	add	r2, r3
 8008674:	8b7b      	ldrh	r3, [r7, #26]
 8008676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800867a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800867e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008682:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008686:	b29b      	uxth	r3, r3
 8008688:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a0:	833b      	strh	r3, [r7, #24]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	441a      	add	r2, r3
 80086ac:	8b3b      	ldrh	r3, [r7, #24]
 80086ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086be:	b29b      	uxth	r3, r3
 80086c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d8:	82fb      	strh	r3, [r7, #22]
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	441a      	add	r2, r3
 80086e4:	8afb      	ldrh	r3, [r7, #22]
 80086e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	b29b      	uxth	r3, r3
 8008708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800870c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008710:	82bb      	strh	r3, [r7, #20]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	441a      	add	r2, r3
 800871c:	8abb      	ldrh	r3, [r7, #20]
 800871e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800872a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872e:	b29b      	uxth	r3, r3
 8008730:	8013      	strh	r3, [r2, #0]
 8008732:	e0a3      	b.n	800887c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008742:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01b      	beq.n	8008784 <USB_DeactivateEndpoint+0x2d4>
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	b29b      	uxth	r3, r3
 800875a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800875e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008762:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	441a      	add	r2, r3
 800876e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800877c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008780:	b29b      	uxth	r3, r3
 8008782:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	881b      	ldrh	r3, [r3, #0]
 8008790:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008792:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01b      	beq.n	80087d4 <USB_DeactivateEndpoint+0x324>
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	441a      	add	r2, r3
 80087be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	441a      	add	r2, r3
 80087f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008808:	b29b      	uxth	r3, r3
 800880a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	b29b      	uxth	r3, r3
 800881a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800881e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008822:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	441a      	add	r2, r3
 800882e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800883c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008840:	b29b      	uxth	r3, r3
 8008842:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	b29b      	uxth	r3, r3
 8008852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885a:	847b      	strh	r3, [r7, #34]	; 0x22
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	441a      	add	r2, r3
 8008866:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800886c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008878:	b29b      	uxth	r3, r3
 800887a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3734      	adds	r7, #52	; 0x34
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b0c2      	sub	sp, #264	; 0x108
 800888e:	af00      	add	r7, sp, #0
 8008890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008898:	6018      	str	r0, [r3, #0]
 800889a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	785b      	ldrb	r3, [r3, #1]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	f040 86b7 	bne.w	8009624 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80088b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	699a      	ldr	r2, [r3, #24]
 80088c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d908      	bls.n	80088e4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80088d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80088e2:	e007      	b.n	80088f4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80088e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80088f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	7b1b      	ldrb	r3, [r3, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d13a      	bne.n	800897a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6959      	ldr	r1, [r3, #20]
 8008910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	88da      	ldrh	r2, [r3, #6]
 800891c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008920:	b29b      	uxth	r3, r3
 8008922:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008926:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800892a:	6800      	ldr	r0, [r0, #0]
 800892c:	f001 fc8c 	bl	800a248 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	613b      	str	r3, [r7, #16]
 800893c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800894a:	b29b      	uxth	r3, r3
 800894c:	461a      	mov	r2, r3
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	4413      	add	r3, r2
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	011a      	lsls	r2, r3, #4
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	4413      	add	r3, r2
 8008966:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008970:	b29a      	uxth	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	f000 be1f 	b.w	80095b8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800897a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	78db      	ldrb	r3, [r3, #3]
 8008986:	2b02      	cmp	r3, #2
 8008988:	f040 8462 	bne.w	8009250 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800898c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6a1a      	ldr	r2, [r3, #32]
 8008998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800899c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	f240 83df 	bls.w	8009168 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80089aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80089d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	441a      	add	r2, r3
 80089ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80089fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6a1a      	ldr	r2, [r3, #32]
 8008a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a16:	1ad2      	subs	r2, r2, r3
 8008a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f000 81c7 	beq.w	8008dda <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	633b      	str	r3, [r7, #48]	; 0x30
 8008a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	785b      	ldrb	r3, [r3, #1]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d177      	bne.n	8008b58 <USB_EPStartXfer+0x2ce>
 8008a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	461a      	mov	r2, r3
 8008a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a88:	4413      	add	r3, r2
 8008a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	011a      	lsls	r2, r3, #4
 8008a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	801a      	strh	r2, [r3, #0]
 8008ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab8:	2b3e      	cmp	r3, #62	; 0x3e
 8008aba:	d921      	bls.n	8008b00 <USB_EPStartXfer+0x276>
 8008abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ac0:	095b      	lsrs	r3, r3, #5
 8008ac2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aca:	f003 031f 	and.w	r3, r3, #31
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d104      	bne.n	8008adc <USB_EPStartXfer+0x252>
 8008ad2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	029b      	lsls	r3, r3, #10
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	4313      	orrs	r3, r2
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	801a      	strh	r2, [r3, #0]
 8008afe:	e050      	b.n	8008ba2 <USB_EPStartXfer+0x318>
 8008b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10a      	bne.n	8008b1e <USB_EPStartXfer+0x294>
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	881b      	ldrh	r3, [r3, #0]
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	801a      	strh	r2, [r3, #0]
 8008b1c:	e041      	b.n	8008ba2 <USB_EPStartXfer+0x318>
 8008b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b22:	085b      	lsrs	r3, r3, #1
 8008b24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d004      	beq.n	8008b3e <USB_EPStartXfer+0x2b4>
 8008b34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b38:	3301      	adds	r3, #1
 8008b3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	029b      	lsls	r3, r3, #10
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	801a      	strh	r2, [r3, #0]
 8008b56:	e024      	b.n	8008ba2 <USB_EPStartXfer+0x318>
 8008b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	785b      	ldrb	r3, [r3, #1]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d11c      	bne.n	8008ba2 <USB_EPStartXfer+0x318>
 8008b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	4413      	add	r3, r2
 8008b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	011a      	lsls	r2, r3, #4
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b90:	4413      	add	r3, r2
 8008b92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	895b      	ldrh	r3, [r3, #10]
 8008bae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6959      	ldr	r1, [r3, #20]
 8008bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008bc8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008bcc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008bd0:	6800      	ldr	r0, [r0, #0]
 8008bd2:	f001 fb39 	bl	800a248 <USB_WritePMA>
            ep->xfer_buff += len;
 8008bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	695a      	ldr	r2, [r3, #20]
 8008be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be6:	441a      	add	r2, r3
 8008be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6a1a      	ldr	r2, [r3, #32]
 8008c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d90f      	bls.n	8008c30 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6a1a      	ldr	r2, [r3, #32]
 8008c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c20:	1ad2      	subs	r2, r2, r3
 8008c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	621a      	str	r2, [r3, #32]
 8008c2e:	e00e      	b.n	8008c4e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
 8008c3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d177      	bne.n	8008d4e <USB_EPStartXfer+0x4c4>
 8008c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	61bb      	str	r3, [r7, #24]
 8008c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	4413      	add	r3, r2
 8008c80:	61bb      	str	r3, [r7, #24]
 8008c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	011a      	lsls	r2, r3, #4
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	4413      	add	r3, r2
 8008c94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	801a      	strh	r2, [r3, #0]
 8008caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cae:	2b3e      	cmp	r3, #62	; 0x3e
 8008cb0:	d921      	bls.n	8008cf6 <USB_EPStartXfer+0x46c>
 8008cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cb6:	095b      	lsrs	r3, r3, #5
 8008cb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc0:	f003 031f 	and.w	r3, r3, #31
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d104      	bne.n	8008cd2 <USB_EPStartXfer+0x448>
 8008cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	029b      	lsls	r3, r3, #10
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	801a      	strh	r2, [r3, #0]
 8008cf4:	e056      	b.n	8008da4 <USB_EPStartXfer+0x51a>
 8008cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10a      	bne.n	8008d14 <USB_EPStartXfer+0x48a>
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	801a      	strh	r2, [r3, #0]
 8008d12:	e047      	b.n	8008da4 <USB_EPStartXfer+0x51a>
 8008d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d18:	085b      	lsrs	r3, r3, #1
 8008d1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d004      	beq.n	8008d34 <USB_EPStartXfer+0x4aa>
 8008d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d2e:	3301      	adds	r3, #1
 8008d30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	029b      	lsls	r3, r3, #10
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	4313      	orrs	r3, r2
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	801a      	strh	r2, [r3, #0]
 8008d4c:	e02a      	b.n	8008da4 <USB_EPStartXfer+0x51a>
 8008d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	785b      	ldrb	r3, [r3, #1]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d122      	bne.n	8008da4 <USB_EPStartXfer+0x51a>
 8008d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	623b      	str	r3, [r7, #32]
 8008d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	4413      	add	r3, r2
 8008d80:	623b      	str	r3, [r7, #32]
 8008d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	011a      	lsls	r2, r3, #4
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	4413      	add	r3, r2
 8008d94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d98:	61fb      	str	r3, [r7, #28]
 8008d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	891b      	ldrh	r3, [r3, #8]
 8008db0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6959      	ldr	r1, [r3, #20]
 8008dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008dca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008dce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008dd2:	6800      	ldr	r0, [r0, #0]
 8008dd4:	f001 fa38 	bl	800a248 <USB_WritePMA>
 8008dd8:	e3ee      	b.n	80095b8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d177      	bne.n	8008eda <USB_EPStartXfer+0x650>
 8008dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	461a      	mov	r2, r3
 8008e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e0a:	4413      	add	r3, r2
 8008e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	011a      	lsls	r2, r3, #4
 8008e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e1e:	4413      	add	r3, r2
 8008e20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e24:	647b      	str	r3, [r7, #68]	; 0x44
 8008e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e34:	801a      	strh	r2, [r3, #0]
 8008e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3a:	2b3e      	cmp	r3, #62	; 0x3e
 8008e3c:	d921      	bls.n	8008e82 <USB_EPStartXfer+0x5f8>
 8008e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e42:	095b      	lsrs	r3, r3, #5
 8008e44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e4c:	f003 031f 	and.w	r3, r3, #31
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d104      	bne.n	8008e5e <USB_EPStartXfer+0x5d4>
 8008e54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	029b      	lsls	r3, r3, #10
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e7e:	801a      	strh	r2, [r3, #0]
 8008e80:	e056      	b.n	8008f30 <USB_EPStartXfer+0x6a6>
 8008e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10a      	bne.n	8008ea0 <USB_EPStartXfer+0x616>
 8008e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	e047      	b.n	8008f30 <USB_EPStartXfer+0x6a6>
 8008ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea4:	085b      	lsrs	r3, r3, #1
 8008ea6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d004      	beq.n	8008ec0 <USB_EPStartXfer+0x636>
 8008eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008eba:	3301      	adds	r3, #1
 8008ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	029b      	lsls	r3, r3, #10
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed6:	801a      	strh	r2, [r3, #0]
 8008ed8:	e02a      	b.n	8008f30 <USB_EPStartXfer+0x6a6>
 8008eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	785b      	ldrb	r3, [r3, #1]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d122      	bne.n	8008f30 <USB_EPStartXfer+0x6a6>
 8008eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	653b      	str	r3, [r7, #80]	; 0x50
 8008ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	461a      	mov	r2, r3
 8008f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f0a:	4413      	add	r3, r2
 8008f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8008f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	011a      	lsls	r2, r3, #4
 8008f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f1e:	4413      	add	r3, r2
 8008f20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	891b      	ldrh	r3, [r3, #8]
 8008f3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6959      	ldr	r1, [r3, #20]
 8008f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f5e:	6800      	ldr	r0, [r0, #0]
 8008f60:	f001 f972 	bl	800a248 <USB_WritePMA>
            ep->xfer_buff += len;
 8008f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	695a      	ldr	r2, [r3, #20]
 8008f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f74:	441a      	add	r2, r3
 8008f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6a1a      	ldr	r2, [r3, #32]
 8008f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d90f      	bls.n	8008fbe <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6a1a      	ldr	r2, [r3, #32]
 8008faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fae:	1ad2      	subs	r2, r2, r3
 8008fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	621a      	str	r2, [r3, #32]
 8008fbc:	e00e      	b.n	8008fdc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	643b      	str	r3, [r7, #64]	; 0x40
 8008fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	785b      	ldrb	r3, [r3, #1]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d177      	bne.n	80090e8 <USB_EPStartXfer+0x85e>
 8008ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	63bb      	str	r3, [r7, #56]	; 0x38
 8009004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009012:	b29b      	uxth	r3, r3
 8009014:	461a      	mov	r2, r3
 8009016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009018:	4413      	add	r3, r2
 800901a:	63bb      	str	r3, [r7, #56]	; 0x38
 800901c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	011a      	lsls	r2, r3, #4
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	4413      	add	r3, r2
 800902e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009032:	637b      	str	r3, [r7, #52]	; 0x34
 8009034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	b29b      	uxth	r3, r3
 800903a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800903e:	b29a      	uxth	r2, r3
 8009040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009042:	801a      	strh	r2, [r3, #0]
 8009044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009048:	2b3e      	cmp	r3, #62	; 0x3e
 800904a:	d921      	bls.n	8009090 <USB_EPStartXfer+0x806>
 800904c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009050:	095b      	lsrs	r3, r3, #5
 8009052:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800905a:	f003 031f 	and.w	r3, r3, #31
 800905e:	2b00      	cmp	r3, #0
 8009060:	d104      	bne.n	800906c <USB_EPStartXfer+0x7e2>
 8009062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009066:	3b01      	subs	r3, #1
 8009068:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800906c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	b29a      	uxth	r2, r3
 8009072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009076:	b29b      	uxth	r3, r3
 8009078:	029b      	lsls	r3, r3, #10
 800907a:	b29b      	uxth	r3, r3
 800907c:	4313      	orrs	r3, r2
 800907e:	b29b      	uxth	r3, r3
 8009080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009088:	b29a      	uxth	r2, r3
 800908a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908c:	801a      	strh	r2, [r3, #0]
 800908e:	e050      	b.n	8009132 <USB_EPStartXfer+0x8a8>
 8009090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10a      	bne.n	80090ae <USB_EPStartXfer+0x824>
 8009098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	b29b      	uxth	r3, r3
 800909e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090aa:	801a      	strh	r2, [r3, #0]
 80090ac:	e041      	b.n	8009132 <USB_EPStartXfer+0x8a8>
 80090ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b2:	085b      	lsrs	r3, r3, #1
 80090b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d004      	beq.n	80090ce <USB_EPStartXfer+0x844>
 80090c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090c8:	3301      	adds	r3, #1
 80090ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d8:	b29b      	uxth	r3, r3
 80090da:	029b      	lsls	r3, r3, #10
 80090dc:	b29b      	uxth	r3, r3
 80090de:	4313      	orrs	r3, r2
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e4:	801a      	strh	r2, [r3, #0]
 80090e6:	e024      	b.n	8009132 <USB_EPStartXfer+0x8a8>
 80090e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	785b      	ldrb	r3, [r3, #1]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d11c      	bne.n	8009132 <USB_EPStartXfer+0x8a8>
 80090f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009106:	b29b      	uxth	r3, r3
 8009108:	461a      	mov	r2, r3
 800910a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800910c:	4413      	add	r3, r2
 800910e:	643b      	str	r3, [r7, #64]	; 0x40
 8009110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	011a      	lsls	r2, r3, #4
 800911e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009120:	4413      	add	r3, r2
 8009122:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800912c:	b29a      	uxth	r2, r3
 800912e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009130:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	895b      	ldrh	r3, [r3, #10]
 800913e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6959      	ldr	r1, [r3, #20]
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009152:	b29b      	uxth	r3, r3
 8009154:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009158:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800915c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009160:	6800      	ldr	r0, [r0, #0]
 8009162:	f001 f871 	bl	800a248 <USB_WritePMA>
 8009166:	e227      	b.n	80095b8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800916c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800917c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	b29b      	uxth	r3, r3
 8009196:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800919a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800919e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80091a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	441a      	add	r2, r3
 80091bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80091c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	461a      	mov	r2, r3
 80091f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091f4:	4413      	add	r3, r2
 80091f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	011a      	lsls	r2, r3, #4
 8009206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009208:	4413      	add	r3, r2
 800920a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800920e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009214:	b29a      	uxth	r2, r3
 8009216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009218:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800921a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	891b      	ldrh	r3, [r3, #8]
 8009226:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800922a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6959      	ldr	r1, [r3, #20]
 8009236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800923a:	b29b      	uxth	r3, r3
 800923c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009240:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009244:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009248:	6800      	ldr	r0, [r0, #0]
 800924a:	f000 fffd 	bl	800a248 <USB_WritePMA>
 800924e:	e1b3      	b.n	80095b8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6a1a      	ldr	r2, [r3, #32]
 800925c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009260:	1ad2      	subs	r2, r2, r3
 8009262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800926e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	b29b      	uxth	r3, r3
 800928c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 80c6 	beq.w	8009422 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	673b      	str	r3, [r7, #112]	; 0x70
 80092a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	785b      	ldrb	r3, [r3, #1]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d177      	bne.n	80093a2 <USB_EPStartXfer+0xb18>
 80092b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80092be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	461a      	mov	r2, r3
 80092d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092d2:	4413      	add	r3, r2
 80092d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80092d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	011a      	lsls	r2, r3, #4
 80092e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092e6:	4413      	add	r3, r2
 80092e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092ec:	667b      	str	r3, [r7, #100]	; 0x64
 80092ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092fc:	801a      	strh	r2, [r3, #0]
 80092fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009302:	2b3e      	cmp	r3, #62	; 0x3e
 8009304:	d921      	bls.n	800934a <USB_EPStartXfer+0xac0>
 8009306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800930a:	095b      	lsrs	r3, r3, #5
 800930c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009314:	f003 031f 	and.w	r3, r3, #31
 8009318:	2b00      	cmp	r3, #0
 800931a:	d104      	bne.n	8009326 <USB_EPStartXfer+0xa9c>
 800931c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009320:	3b01      	subs	r3, #1
 8009322:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009328:	881b      	ldrh	r3, [r3, #0]
 800932a:	b29a      	uxth	r2, r3
 800932c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009330:	b29b      	uxth	r3, r3
 8009332:	029b      	lsls	r3, r3, #10
 8009334:	b29b      	uxth	r3, r3
 8009336:	4313      	orrs	r3, r2
 8009338:	b29b      	uxth	r3, r3
 800933a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800933e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009342:	b29a      	uxth	r2, r3
 8009344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009346:	801a      	strh	r2, [r3, #0]
 8009348:	e050      	b.n	80093ec <USB_EPStartXfer+0xb62>
 800934a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10a      	bne.n	8009368 <USB_EPStartXfer+0xade>
 8009352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009354:	881b      	ldrh	r3, [r3, #0]
 8009356:	b29b      	uxth	r3, r3
 8009358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800935c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009360:	b29a      	uxth	r2, r3
 8009362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009364:	801a      	strh	r2, [r3, #0]
 8009366:	e041      	b.n	80093ec <USB_EPStartXfer+0xb62>
 8009368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800936c:	085b      	lsrs	r3, r3, #1
 800936e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	d004      	beq.n	8009388 <USB_EPStartXfer+0xafe>
 800937e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009382:	3301      	adds	r3, #1
 8009384:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800938a:	881b      	ldrh	r3, [r3, #0]
 800938c:	b29a      	uxth	r2, r3
 800938e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009392:	b29b      	uxth	r3, r3
 8009394:	029b      	lsls	r3, r3, #10
 8009396:	b29b      	uxth	r3, r3
 8009398:	4313      	orrs	r3, r2
 800939a:	b29a      	uxth	r2, r3
 800939c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800939e:	801a      	strh	r2, [r3, #0]
 80093a0:	e024      	b.n	80093ec <USB_EPStartXfer+0xb62>
 80093a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	785b      	ldrb	r3, [r3, #1]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d11c      	bne.n	80093ec <USB_EPStartXfer+0xb62>
 80093b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	461a      	mov	r2, r3
 80093c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093c6:	4413      	add	r3, r2
 80093c8:	673b      	str	r3, [r7, #112]	; 0x70
 80093ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	011a      	lsls	r2, r3, #4
 80093d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093da:	4413      	add	r3, r2
 80093dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80093ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	895b      	ldrh	r3, [r3, #10]
 80093f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6959      	ldr	r1, [r3, #20]
 8009408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800940c:	b29b      	uxth	r3, r3
 800940e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009412:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009416:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800941a:	6800      	ldr	r0, [r0, #0]
 800941c:	f000 ff14 	bl	800a248 <USB_WritePMA>
 8009420:	e0ca      	b.n	80095b8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	785b      	ldrb	r3, [r3, #1]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d177      	bne.n	8009522 <USB_EPStartXfer+0xc98>
 8009432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800943e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800944c:	b29b      	uxth	r3, r3
 800944e:	461a      	mov	r2, r3
 8009450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009452:	4413      	add	r3, r2
 8009454:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	011a      	lsls	r2, r3, #4
 8009464:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009466:	4413      	add	r3, r2
 8009468:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800946c:	67bb      	str	r3, [r7, #120]	; 0x78
 800946e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	b29b      	uxth	r3, r3
 8009474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009478:	b29a      	uxth	r2, r3
 800947a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800947c:	801a      	strh	r2, [r3, #0]
 800947e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009482:	2b3e      	cmp	r3, #62	; 0x3e
 8009484:	d921      	bls.n	80094ca <USB_EPStartXfer+0xc40>
 8009486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800948a:	095b      	lsrs	r3, r3, #5
 800948c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009494:	f003 031f 	and.w	r3, r3, #31
 8009498:	2b00      	cmp	r3, #0
 800949a:	d104      	bne.n	80094a6 <USB_EPStartXfer+0xc1c>
 800949c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094a0:	3b01      	subs	r3, #1
 80094a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094a8:	881b      	ldrh	r3, [r3, #0]
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	029b      	lsls	r3, r3, #10
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	4313      	orrs	r3, r2
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094c6:	801a      	strh	r2, [r3, #0]
 80094c8:	e05c      	b.n	8009584 <USB_EPStartXfer+0xcfa>
 80094ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10a      	bne.n	80094e8 <USB_EPStartXfer+0xc5e>
 80094d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094d4:	881b      	ldrh	r3, [r3, #0]
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094e4:	801a      	strh	r2, [r3, #0]
 80094e6:	e04d      	b.n	8009584 <USB_EPStartXfer+0xcfa>
 80094e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ec:	085b      	lsrs	r3, r3, #1
 80094ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d004      	beq.n	8009508 <USB_EPStartXfer+0xc7e>
 80094fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009502:	3301      	adds	r3, #1
 8009504:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	b29a      	uxth	r2, r3
 800950e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009512:	b29b      	uxth	r3, r3
 8009514:	029b      	lsls	r3, r3, #10
 8009516:	b29b      	uxth	r3, r3
 8009518:	4313      	orrs	r3, r2
 800951a:	b29a      	uxth	r2, r3
 800951c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800951e:	801a      	strh	r2, [r3, #0]
 8009520:	e030      	b.n	8009584 <USB_EPStartXfer+0xcfa>
 8009522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	785b      	ldrb	r3, [r3, #1]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d128      	bne.n	8009584 <USB_EPStartXfer+0xcfa>
 8009532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800954e:	b29b      	uxth	r3, r3
 8009550:	461a      	mov	r2, r3
 8009552:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009556:	4413      	add	r3, r2
 8009558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800955c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	011a      	lsls	r2, r3, #4
 800956a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800956e:	4413      	add	r3, r2
 8009570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800957c:	b29a      	uxth	r2, r3
 800957e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009582:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	891b      	ldrh	r3, [r3, #8]
 8009590:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6959      	ldr	r1, [r3, #20]
 80095a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80095aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80095ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80095b2:	6800      	ldr	r0, [r0, #0]
 80095b4:	f000 fe48 	bl	800a248 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80095b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095de:	817b      	strh	r3, [r7, #10]
 80095e0:	897b      	ldrh	r3, [r7, #10]
 80095e2:	f083 0310 	eor.w	r3, r3, #16
 80095e6:	817b      	strh	r3, [r7, #10]
 80095e8:	897b      	ldrh	r3, [r7, #10]
 80095ea:	f083 0320 	eor.w	r3, r3, #32
 80095ee:	817b      	strh	r3, [r7, #10]
 80095f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	441a      	add	r2, r3
 800960a:	897b      	ldrh	r3, [r7, #10]
 800960c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961c:	b29b      	uxth	r3, r3
 800961e:	8013      	strh	r3, [r2, #0]
 8009620:	f000 bcde 	b.w	8009fe0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	7b1b      	ldrb	r3, [r3, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	f040 80bb 	bne.w	80097ac <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800963a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	699a      	ldr	r2, [r3, #24]
 8009642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	429a      	cmp	r2, r3
 8009650:	d917      	bls.n	8009682 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699a      	ldr	r2, [r3, #24]
 800966e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009672:	1ad2      	subs	r2, r2, r3
 8009674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	619a      	str	r2, [r3, #24]
 8009680:	e00e      	b.n	80096a0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2200      	movs	r2, #0
 800969e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80096a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096bc:	b29b      	uxth	r3, r3
 80096be:	461a      	mov	r2, r3
 80096c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096c4:	4413      	add	r3, r2
 80096c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	011a      	lsls	r2, r3, #4
 80096d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096dc:	4413      	add	r3, r2
 80096de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80096e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096f8:	801a      	strh	r2, [r3, #0]
 80096fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096fe:	2b3e      	cmp	r3, #62	; 0x3e
 8009700:	d924      	bls.n	800974c <USB_EPStartXfer+0xec2>
 8009702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009706:	095b      	lsrs	r3, r3, #5
 8009708:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800970c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009710:	f003 031f 	and.w	r3, r3, #31
 8009714:	2b00      	cmp	r3, #0
 8009716:	d104      	bne.n	8009722 <USB_EPStartXfer+0xe98>
 8009718:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800971c:	3b01      	subs	r3, #1
 800971e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	b29a      	uxth	r2, r3
 800972a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800972e:	b29b      	uxth	r3, r3
 8009730:	029b      	lsls	r3, r3, #10
 8009732:	b29b      	uxth	r3, r3
 8009734:	4313      	orrs	r3, r2
 8009736:	b29b      	uxth	r3, r3
 8009738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800973c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009740:	b29a      	uxth	r2, r3
 8009742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009746:	801a      	strh	r2, [r3, #0]
 8009748:	f000 bc10 	b.w	8009f6c <USB_EPStartXfer+0x16e2>
 800974c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10c      	bne.n	800976e <USB_EPStartXfer+0xee4>
 8009754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009758:	881b      	ldrh	r3, [r3, #0]
 800975a:	b29b      	uxth	r3, r3
 800975c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009764:	b29a      	uxth	r2, r3
 8009766:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800976a:	801a      	strh	r2, [r3, #0]
 800976c:	e3fe      	b.n	8009f6c <USB_EPStartXfer+0x16e2>
 800976e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009772:	085b      	lsrs	r3, r3, #1
 8009774:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800977c:	f003 0301 	and.w	r3, r3, #1
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <USB_EPStartXfer+0xf04>
 8009784:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009788:	3301      	adds	r3, #1
 800978a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800978e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	b29a      	uxth	r2, r3
 8009796:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800979a:	b29b      	uxth	r3, r3
 800979c:	029b      	lsls	r3, r3, #10
 800979e:	b29b      	uxth	r3, r3
 80097a0:	4313      	orrs	r3, r2
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097a8:	801a      	strh	r2, [r3, #0]
 80097aa:	e3df      	b.n	8009f6c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80097ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	78db      	ldrb	r3, [r3, #3]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	f040 8218 	bne.w	8009bee <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80097be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	785b      	ldrb	r3, [r3, #1]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f040 809d 	bne.w	800990a <USB_EPStartXfer+0x1080>
 80097d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	461a      	mov	r2, r3
 80097f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097f4:	4413      	add	r3, r2
 80097f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	011a      	lsls	r2, r3, #4
 8009808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800980c:	4413      	add	r3, r2
 800980e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009812:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009816:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800981a:	881b      	ldrh	r3, [r3, #0]
 800981c:	b29b      	uxth	r3, r3
 800981e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009822:	b29a      	uxth	r2, r3
 8009824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009828:	801a      	strh	r2, [r3, #0]
 800982a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800982e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	2b3e      	cmp	r3, #62	; 0x3e
 8009838:	d92b      	bls.n	8009892 <USB_EPStartXfer+0x1008>
 800983a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800983e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	095b      	lsrs	r3, r3, #5
 8009848:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800984c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	f003 031f 	and.w	r3, r3, #31
 800985c:	2b00      	cmp	r3, #0
 800985e:	d104      	bne.n	800986a <USB_EPStartXfer+0xfe0>
 8009860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009864:	3b01      	subs	r3, #1
 8009866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800986a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	b29a      	uxth	r2, r3
 8009872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009876:	b29b      	uxth	r3, r3
 8009878:	029b      	lsls	r3, r3, #10
 800987a:	b29b      	uxth	r3, r3
 800987c:	4313      	orrs	r3, r2
 800987e:	b29b      	uxth	r3, r3
 8009880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009888:	b29a      	uxth	r2, r3
 800988a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	e070      	b.n	8009974 <USB_EPStartXfer+0x10ea>
 8009892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10c      	bne.n	80098bc <USB_EPStartXfer+0x1032>
 80098a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098b8:	801a      	strh	r2, [r3, #0]
 80098ba:	e05b      	b.n	8009974 <USB_EPStartXfer+0x10ea>
 80098bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	085b      	lsrs	r3, r3, #1
 80098ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d004      	beq.n	80098ec <USB_EPStartXfer+0x1062>
 80098e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e6:	3301      	adds	r3, #1
 80098e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	029b      	lsls	r3, r3, #10
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	4313      	orrs	r3, r2
 8009900:	b29a      	uxth	r2, r3
 8009902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009906:	801a      	strh	r2, [r3, #0]
 8009908:	e034      	b.n	8009974 <USB_EPStartXfer+0x10ea>
 800990a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800990e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	785b      	ldrb	r3, [r3, #1]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d12c      	bne.n	8009974 <USB_EPStartXfer+0x10ea>
 800991a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009936:	b29b      	uxth	r3, r3
 8009938:	461a      	mov	r2, r3
 800993a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800993e:	4413      	add	r3, r2
 8009940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	011a      	lsls	r2, r3, #4
 8009952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009956:	4413      	add	r3, r2
 8009958:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800995c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	b29a      	uxth	r2, r3
 800996e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009972:	801a      	strh	r2, [r3, #0]
 8009974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	785b      	ldrb	r3, [r3, #1]
 800998e:	2b00      	cmp	r3, #0
 8009990:	f040 809d 	bne.w	8009ace <USB_EPStartXfer+0x1244>
 8009994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80099a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	461a      	mov	r2, r3
 80099b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099b8:	4413      	add	r3, r2
 80099ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80099be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	011a      	lsls	r2, r3, #4
 80099cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099d0:	4413      	add	r3, r2
 80099d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80099da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099ec:	801a      	strh	r2, [r3, #0]
 80099ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	2b3e      	cmp	r3, #62	; 0x3e
 80099fc:	d92b      	bls.n	8009a56 <USB_EPStartXfer+0x11cc>
 80099fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	095b      	lsrs	r3, r3, #5
 8009a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	f003 031f 	and.w	r3, r3, #31
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d104      	bne.n	8009a2e <USB_EPStartXfer+0x11a4>
 8009a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	029b      	lsls	r3, r3, #10
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	4313      	orrs	r3, r2
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a52:	801a      	strh	r2, [r3, #0]
 8009a54:	e069      	b.n	8009b2a <USB_EPStartXfer+0x12a0>
 8009a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10c      	bne.n	8009a80 <USB_EPStartXfer+0x11f6>
 8009a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a7c:	801a      	strh	r2, [r3, #0]
 8009a7e:	e054      	b.n	8009b2a <USB_EPStartXfer+0x12a0>
 8009a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	085b      	lsrs	r3, r3, #1
 8009a8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d004      	beq.n	8009ab0 <USB_EPStartXfer+0x1226>
 8009aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aaa:	3301      	adds	r3, #1
 8009aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	029b      	lsls	r3, r3, #10
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009aca:	801a      	strh	r2, [r3, #0]
 8009acc:	e02d      	b.n	8009b2a <USB_EPStartXfer+0x12a0>
 8009ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	785b      	ldrb	r3, [r3, #1]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d125      	bne.n	8009b2a <USB_EPStartXfer+0x12a0>
 8009ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	461a      	mov	r2, r3
 8009af0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009af4:	4413      	add	r3, r2
 8009af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	011a      	lsls	r2, r3, #4
 8009b08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b28:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f000 8218 	beq.w	8009f6c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d005      	beq.n	8009b74 <USB_EPStartXfer+0x12ea>
 8009b68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10d      	bne.n	8009b90 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f040 81f5 	bne.w	8009f6c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f040 81ee 	bne.w	8009f6c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	441a      	add	r2, r3
 8009bd4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009be4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	8013      	strh	r3, [r2, #0]
 8009bec:	e1be      	b.n	8009f6c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	78db      	ldrb	r3, [r3, #3]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	f040 81b4 	bne.w	8009f68 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	699a      	ldr	r2, [r3, #24]
 8009c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d917      	bls.n	8009c4c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	699a      	ldr	r2, [r3, #24]
 8009c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c3c:	1ad2      	subs	r2, r2, r3
 8009c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	619a      	str	r2, [r3, #24]
 8009c4a:	e00e      	b.n	8009c6a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2200      	movs	r2, #0
 8009c68:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	785b      	ldrb	r3, [r3, #1]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f040 8085 	bne.w	8009d86 <USB_EPStartXfer+0x14fc>
 8009c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	011a      	lsls	r2, r3, #4
 8009cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009cb8:	4413      	add	r3, r2
 8009cba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cd4:	801a      	strh	r2, [r3, #0]
 8009cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cda:	2b3e      	cmp	r3, #62	; 0x3e
 8009cdc:	d923      	bls.n	8009d26 <USB_EPStartXfer+0x149c>
 8009cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce2:	095b      	lsrs	r3, r3, #5
 8009ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cec:	f003 031f 	and.w	r3, r3, #31
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d104      	bne.n	8009cfe <USB_EPStartXfer+0x1474>
 8009cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009cfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d02:	881b      	ldrh	r3, [r3, #0]
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	029b      	lsls	r3, r3, #10
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	4313      	orrs	r3, r2
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	e060      	b.n	8009de8 <USB_EPStartXfer+0x155e>
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10c      	bne.n	8009d48 <USB_EPStartXfer+0x14be>
 8009d2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d32:	881b      	ldrh	r3, [r3, #0]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d44:	801a      	strh	r2, [r3, #0]
 8009d46:	e04f      	b.n	8009de8 <USB_EPStartXfer+0x155e>
 8009d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d4c:	085b      	lsrs	r3, r3, #1
 8009d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d004      	beq.n	8009d68 <USB_EPStartXfer+0x14de>
 8009d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d62:	3301      	adds	r3, #1
 8009d64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	029b      	lsls	r3, r3, #10
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d82:	801a      	strh	r2, [r3, #0]
 8009d84:	e030      	b.n	8009de8 <USB_EPStartXfer+0x155e>
 8009d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	785b      	ldrb	r3, [r3, #1]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d128      	bne.n	8009de8 <USB_EPStartXfer+0x155e>
 8009d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	461a      	mov	r2, r3
 8009db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dba:	4413      	add	r3, r2
 8009dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	011a      	lsls	r2, r3, #4
 8009dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009de6:	801a      	strh	r2, [r3, #0]
 8009de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	785b      	ldrb	r3, [r3, #1]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f040 8085 	bne.w	8009f12 <USB_EPStartXfer+0x1688>
 8009e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	461a      	mov	r2, r3
 8009e28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e2c:	4413      	add	r3, r2
 8009e2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	011a      	lsls	r2, r3, #4
 8009e40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e44:	4413      	add	r3, r2
 8009e46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e60:	801a      	strh	r2, [r3, #0]
 8009e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e66:	2b3e      	cmp	r3, #62	; 0x3e
 8009e68:	d923      	bls.n	8009eb2 <USB_EPStartXfer+0x1628>
 8009e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6e:	095b      	lsrs	r3, r3, #5
 8009e70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e78:	f003 031f 	and.w	r3, r3, #31
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d104      	bne.n	8009e8a <USB_EPStartXfer+0x1600>
 8009e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e84:	3b01      	subs	r3, #1
 8009e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	029b      	lsls	r3, r3, #10
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009eae:	801a      	strh	r2, [r3, #0]
 8009eb0:	e05c      	b.n	8009f6c <USB_EPStartXfer+0x16e2>
 8009eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10c      	bne.n	8009ed4 <USB_EPStartXfer+0x164a>
 8009eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ed0:	801a      	strh	r2, [r3, #0]
 8009ed2:	e04b      	b.n	8009f6c <USB_EPStartXfer+0x16e2>
 8009ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed8:	085b      	lsrs	r3, r3, #1
 8009eda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d004      	beq.n	8009ef4 <USB_EPStartXfer+0x166a>
 8009eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009eee:	3301      	adds	r3, #1
 8009ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ef4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	029b      	lsls	r3, r3, #10
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	4313      	orrs	r3, r2
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f0e:	801a      	strh	r2, [r3, #0]
 8009f10:	e02c      	b.n	8009f6c <USB_EPStartXfer+0x16e2>
 8009f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	785b      	ldrb	r3, [r3, #1]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d124      	bne.n	8009f6c <USB_EPStartXfer+0x16e2>
 8009f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	461a      	mov	r2, r3
 8009f34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f38:	4413      	add	r3, r2
 8009f3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	011a      	lsls	r2, r3, #4
 8009f4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f50:	4413      	add	r3, r2
 8009f52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f64:	801a      	strh	r2, [r3, #0]
 8009f66:	e001      	b.n	8009f6c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e03a      	b.n	8009fe2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f92:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009f96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009f9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009fa2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009fa6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009faa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	441a      	add	r2, r3
 8009fc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	785b      	ldrb	r3, [r3, #1]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d020      	beq.n	800a040 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a014:	81bb      	strh	r3, [r7, #12]
 800a016:	89bb      	ldrh	r3, [r7, #12]
 800a018:	f083 0310 	eor.w	r3, r3, #16
 800a01c:	81bb      	strh	r3, [r7, #12]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	441a      	add	r2, r3
 800a028:	89bb      	ldrh	r3, [r7, #12]
 800a02a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a02e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	8013      	strh	r3, [r2, #0]
 800a03e:	e01f      	b.n	800a080 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a056:	81fb      	strh	r3, [r7, #14]
 800a058:	89fb      	ldrh	r3, [r7, #14]
 800a05a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a05e:	81fb      	strh	r3, [r7, #14]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	441a      	add	r2, r3
 800a06a:	89fb      	ldrh	r3, [r7, #14]
 800a06c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a08e:	b480      	push	{r7}
 800a090:	b087      	sub	sp, #28
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	7b1b      	ldrb	r3, [r3, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f040 809d 	bne.w	800a1dc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	785b      	ldrb	r3, [r3, #1]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d04c      	beq.n	800a144 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	881b      	ldrh	r3, [r3, #0]
 800a0b6:	823b      	strh	r3, [r7, #16]
 800a0b8:	8a3b      	ldrh	r3, [r7, #16]
 800a0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d01b      	beq.n	800a0fa <USB_EPClearStall+0x6c>
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	881b      	ldrh	r3, [r3, #0]
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0d8:	81fb      	strh	r3, [r7, #14]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	441a      	add	r2, r3
 800a0e4:	89fb      	ldrh	r3, [r7, #14]
 800a0e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	78db      	ldrb	r3, [r3, #3]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d06c      	beq.n	800a1dc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	b29b      	uxth	r3, r3
 800a110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a118:	81bb      	strh	r3, [r7, #12]
 800a11a:	89bb      	ldrh	r3, [r7, #12]
 800a11c:	f083 0320 	eor.w	r3, r3, #32
 800a120:	81bb      	strh	r3, [r7, #12]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	441a      	add	r2, r3
 800a12c:	89bb      	ldrh	r3, [r7, #12]
 800a12e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a13e:	b29b      	uxth	r3, r3
 800a140:	8013      	strh	r3, [r2, #0]
 800a142:	e04b      	b.n	800a1dc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	82fb      	strh	r3, [r7, #22]
 800a152:	8afb      	ldrh	r3, [r7, #22]
 800a154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d01b      	beq.n	800a194 <USB_EPClearStall+0x106>
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	4413      	add	r3, r2
 800a166:	881b      	ldrh	r3, [r3, #0]
 800a168:	b29b      	uxth	r3, r3
 800a16a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a16e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a172:	82bb      	strh	r3, [r7, #20]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	441a      	add	r2, r3
 800a17e:	8abb      	ldrh	r3, [r7, #20]
 800a180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a18c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a190:	b29b      	uxth	r3, r3
 800a192:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1aa:	827b      	strh	r3, [r7, #18]
 800a1ac:	8a7b      	ldrh	r3, [r7, #18]
 800a1ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1b2:	827b      	strh	r3, [r7, #18]
 800a1b4:	8a7b      	ldrh	r3, [r7, #18]
 800a1b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a1ba:	827b      	strh	r3, [r7, #18]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	441a      	add	r2, r3
 800a1c6:	8a7b      	ldrh	r3, [r7, #18]
 800a1c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	371c      	adds	r7, #28
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b083      	sub	sp, #12
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a1f6:	78fb      	ldrb	r3, [r7, #3]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d103      	bne.n	800a204 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2280      	movs	r2, #128	; 0x80
 800a200:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a212:	b480      	push	{r7}
 800a214:	b083      	sub	sp, #12
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a236:	b29b      	uxth	r3, r3
 800a238:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a23a:	68fb      	ldr	r3, [r7, #12]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a248:	b480      	push	{r7}
 800a24a:	b08b      	sub	sp, #44	; 0x2c
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	4611      	mov	r1, r2
 800a254:	461a      	mov	r2, r3
 800a256:	460b      	mov	r3, r1
 800a258:	80fb      	strh	r3, [r7, #6]
 800a25a:	4613      	mov	r3, r2
 800a25c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a25e:	88bb      	ldrh	r3, [r7, #4]
 800a260:	3301      	adds	r3, #1
 800a262:	085b      	lsrs	r3, r3, #1
 800a264:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a26e:	88fb      	ldrh	r3, [r7, #6]
 800a270:	005a      	lsls	r2, r3, #1
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a27a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	627b      	str	r3, [r7, #36]	; 0x24
 800a280:	e01e      	b.n	800a2c0 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	3301      	adds	r3, #1
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	021b      	lsls	r3, r3, #8
 800a290:	b21a      	sxth	r2, r3
 800a292:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a296:	4313      	orrs	r3, r2
 800a298:	b21b      	sxth	r3, r3
 800a29a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	8a7a      	ldrh	r2, [r7, #18]
 800a2a0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a2a2:	6a3b      	ldr	r3, [r7, #32]
 800a2a4:	3302      	adds	r3, #2
 800a2a6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	3302      	adds	r3, #2
 800a2ac:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1dd      	bne.n	800a282 <USB_WritePMA+0x3a>
  }
}
 800a2c6:	bf00      	nop
 800a2c8:	bf00      	nop
 800a2ca:	372c      	adds	r7, #44	; 0x2c
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b08b      	sub	sp, #44	; 0x2c
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	4611      	mov	r1, r2
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	80fb      	strh	r3, [r7, #6]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a2ea:	88bb      	ldrh	r3, [r7, #4]
 800a2ec:	085b      	lsrs	r3, r3, #1
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a2fa:	88fb      	ldrh	r3, [r7, #6]
 800a2fc:	005a      	lsls	r2, r3, #1
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	4413      	add	r3, r2
 800a302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a306:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	627b      	str	r3, [r7, #36]	; 0x24
 800a30c:	e01b      	b.n	800a346 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	b29b      	uxth	r3, r3
 800a314:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	3302      	adds	r3, #2
 800a31a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	3301      	adds	r3, #1
 800a328:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	0a1b      	lsrs	r3, r3, #8
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	3301      	adds	r3, #1
 800a338:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	3302      	adds	r3, #2
 800a33e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	3b01      	subs	r3, #1
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e0      	bne.n	800a30e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a34c:	88bb      	ldrh	r3, [r7, #4]
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	b29b      	uxth	r3, r3
 800a354:	2b00      	cmp	r3, #0
 800a356:	d007      	beq.n	800a368 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	b2da      	uxtb	r2, r3
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	701a      	strb	r2, [r3, #0]
  }
}
 800a368:	bf00      	nop
 800a36a:	372c      	adds	r7, #44	; 0x2c
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a380:	2300      	movs	r3, #0
 800a382:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	7c1b      	ldrb	r3, [r3, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d115      	bne.n	800a3b8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a38c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a390:	2202      	movs	r2, #2
 800a392:	2181      	movs	r1, #129	; 0x81
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f001 ff7a 	bl	800c28e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2201      	movs	r2, #1
 800a39e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3a4:	2202      	movs	r2, #2
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f001 ff70 	bl	800c28e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a3b6:	e012      	b.n	800a3de <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a3b8:	2340      	movs	r3, #64	; 0x40
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	2181      	movs	r1, #129	; 0x81
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f001 ff65 	bl	800c28e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3ca:	2340      	movs	r3, #64	; 0x40
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f001 ff5c 	bl	800c28e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a3de:	2308      	movs	r3, #8
 800a3e0:	2203      	movs	r2, #3
 800a3e2:	2182      	movs	r1, #130	; 0x82
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f001 ff52 	bl	800c28e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a3f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a3f4:	f002 f874 	bl	800c4e0 <USBD_static_malloc>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a406:	2b00      	cmp	r3, #0
 800a408:	d102      	bne.n	800a410 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a40a:	2301      	movs	r3, #1
 800a40c:	73fb      	strb	r3, [r7, #15]
 800a40e:	e026      	b.n	800a45e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a416:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	2200      	movs	r2, #0
 800a426:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	7c1b      	ldrb	r3, [r3, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d109      	bne.n	800a44e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a440:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a444:	2101      	movs	r1, #1
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f002 f813 	bl	800c472 <USBD_LL_PrepareReceive>
 800a44c:	e007      	b.n	800a45e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a454:	2340      	movs	r3, #64	; 0x40
 800a456:	2101      	movs	r1, #1
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f002 f80a 	bl	800c472 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	460b      	mov	r3, r1
 800a472:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a474:	2300      	movs	r3, #0
 800a476:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a478:	2181      	movs	r1, #129	; 0x81
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f001 ff2d 	bl	800c2da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a486:	2101      	movs	r1, #1
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 ff26 	bl	800c2da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a496:	2182      	movs	r1, #130	; 0x82
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 ff1e 	bl	800c2da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00e      	beq.n	800a4cc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f002 f81c 	bl	800c4fc <USBD_static_free>
    pdev->pClassData = NULL;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b086      	sub	sp, #24
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d039      	beq.n	800a574 <USBD_CDC_Setup+0x9e>
 800a500:	2b20      	cmp	r3, #32
 800a502:	d17f      	bne.n	800a604 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	88db      	ldrh	r3, [r3, #6]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d029      	beq.n	800a560 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	b25b      	sxtb	r3, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	da11      	bge.n	800a53a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a522:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	88d2      	ldrh	r2, [r2, #6]
 800a528:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a52a:	6939      	ldr	r1, [r7, #16]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	88db      	ldrh	r3, [r3, #6]
 800a530:	461a      	mov	r2, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 fa13 	bl	800b95e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a538:	e06b      	b.n	800a612 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	785a      	ldrb	r2, [r3, #1]
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	88db      	ldrh	r3, [r3, #6]
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a550:	6939      	ldr	r1, [r7, #16]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	88db      	ldrh	r3, [r3, #6]
 800a556:	461a      	mov	r2, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f001 fa2e 	bl	800b9ba <USBD_CtlPrepareRx>
      break;
 800a55e:	e058      	b.n	800a612 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	7850      	ldrb	r0, [r2, #1]
 800a56c:	2200      	movs	r2, #0
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	4798      	blx	r3
      break;
 800a572:	e04e      	b.n	800a612 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	785b      	ldrb	r3, [r3, #1]
 800a578:	2b0b      	cmp	r3, #11
 800a57a:	d02e      	beq.n	800a5da <USBD_CDC_Setup+0x104>
 800a57c:	2b0b      	cmp	r3, #11
 800a57e:	dc38      	bgt.n	800a5f2 <USBD_CDC_Setup+0x11c>
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <USBD_CDC_Setup+0xb4>
 800a584:	2b0a      	cmp	r3, #10
 800a586:	d014      	beq.n	800a5b2 <USBD_CDC_Setup+0xdc>
 800a588:	e033      	b.n	800a5f2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a590:	2b03      	cmp	r3, #3
 800a592:	d107      	bne.n	800a5a4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a594:	f107 030c 	add.w	r3, r7, #12
 800a598:	2202      	movs	r2, #2
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f001 f9de 	bl	800b95e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5a2:	e02e      	b.n	800a602 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a5a4:	6839      	ldr	r1, [r7, #0]
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f001 f96e 	bl	800b888 <USBD_CtlError>
            ret = USBD_FAIL;
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	75fb      	strb	r3, [r7, #23]
          break;
 800a5b0:	e027      	b.n	800a602 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5b8:	2b03      	cmp	r3, #3
 800a5ba:	d107      	bne.n	800a5cc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a5bc:	f107 030f 	add.w	r3, r7, #15
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f001 f9ca 	bl	800b95e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5ca:	e01a      	b.n	800a602 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f001 f95a 	bl	800b888 <USBD_CtlError>
            ret = USBD_FAIL;
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	75fb      	strb	r3, [r7, #23]
          break;
 800a5d8:	e013      	b.n	800a602 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e0:	2b03      	cmp	r3, #3
 800a5e2:	d00d      	beq.n	800a600 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a5e4:	6839      	ldr	r1, [r7, #0]
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f001 f94e 	bl	800b888 <USBD_CtlError>
            ret = USBD_FAIL;
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a5f0:	e006      	b.n	800a600 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f001 f947 	bl	800b888 <USBD_CtlError>
          ret = USBD_FAIL;
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a5fe:	e000      	b.n	800a602 <USBD_CDC_Setup+0x12c>
          break;
 800a600:	bf00      	nop
      }
      break;
 800a602:	e006      	b.n	800a612 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a604:	6839      	ldr	r1, [r7, #0]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f001 f93e 	bl	800b888 <USBD_CtlError>
      ret = USBD_FAIL;
 800a60c:	2302      	movs	r3, #2
 800a60e:	75fb      	strb	r3, [r7, #23]
      break;
 800a610:	bf00      	nop
  }

  return ret;
 800a612:	7dfb      	ldrb	r3, [r7, #23]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a62e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a636:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d03a      	beq.n	800a6b8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a642:	78fa      	ldrb	r2, [r7, #3]
 800a644:	6879      	ldr	r1, [r7, #4]
 800a646:	4613      	mov	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	440b      	add	r3, r1
 800a650:	331c      	adds	r3, #28
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d029      	beq.n	800a6ac <USBD_CDC_DataIn+0x90>
 800a658:	78fa      	ldrb	r2, [r7, #3]
 800a65a:	6879      	ldr	r1, [r7, #4]
 800a65c:	4613      	mov	r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	4413      	add	r3, r2
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	440b      	add	r3, r1
 800a666:	331c      	adds	r3, #28
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	78f9      	ldrb	r1, [r7, #3]
 800a66c:	68b8      	ldr	r0, [r7, #8]
 800a66e:	460b      	mov	r3, r1
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	440b      	add	r3, r1
 800a674:	00db      	lsls	r3, r3, #3
 800a676:	4403      	add	r3, r0
 800a678:	3338      	adds	r3, #56	; 0x38
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a680:	fb01 f303 	mul.w	r3, r1, r3
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d110      	bne.n	800a6ac <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a68a:	78fa      	ldrb	r2, [r7, #3]
 800a68c:	6879      	ldr	r1, [r7, #4]
 800a68e:	4613      	mov	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	440b      	add	r3, r1
 800a698:	331c      	adds	r3, #28
 800a69a:	2200      	movs	r2, #0
 800a69c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a69e:	78f9      	ldrb	r1, [r7, #3]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f001 fec1 	bl	800c42c <USBD_LL_Transmit>
 800a6aa:	e003      	b.n	800a6b4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	e000      	b.n	800a6ba <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a6b8:	2302      	movs	r3, #2
  }
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6d4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6d6:	78fb      	ldrb	r3, [r7, #3]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f001 feec 	bl	800c4b8 <USBD_LL_GetRxDataSize>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00d      	beq.n	800a70e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a706:	4611      	mov	r1, r2
 800a708:	4798      	blx	r3

    return USBD_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	e000      	b.n	800a710 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a70e:	2302      	movs	r3, #2
  }
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a726:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d015      	beq.n	800a75e <USBD_CDC_EP0_RxReady+0x46>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a738:	2bff      	cmp	r3, #255	; 0xff
 800a73a:	d010      	beq.n	800a75e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a74a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a752:	b292      	uxth	r2, r2
 800a754:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	22ff      	movs	r2, #255	; 0xff
 800a75a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2243      	movs	r2, #67	; 0x43
 800a774:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a776:	4b03      	ldr	r3, [pc, #12]	; (800a784 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a778:	4618      	mov	r0, r3
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	200000ec 	.word	0x200000ec

0800a788 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2243      	movs	r2, #67	; 0x43
 800a794:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a796:	4b03      	ldr	r3, [pc, #12]	; (800a7a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a798:	4618      	mov	r0, r3
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	200000a8 	.word	0x200000a8

0800a7a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2243      	movs	r2, #67	; 0x43
 800a7b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a7b6:	4b03      	ldr	r3, [pc, #12]	; (800a7c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	20000130 	.word	0x20000130

0800a7c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	220a      	movs	r2, #10
 800a7d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a7d6:	4b03      	ldr	r3, [pc, #12]	; (800a7e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	20000064 	.word	0x20000064

0800a7e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d005      	beq.n	800a808 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a804:	2300      	movs	r3, #0
 800a806:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a808:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3714      	adds	r7, #20
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a816:	b480      	push	{r7}
 800a818:	b087      	sub	sp, #28
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	60f8      	str	r0, [r7, #12]
 800a81e:	60b9      	str	r1, [r7, #8]
 800a820:	4613      	mov	r3, r2
 800a822:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a834:	88fa      	ldrh	r2, [r7, #6]
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	371c      	adds	r7, #28
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a84a:	b480      	push	{r7}
 800a84c:	b085      	sub	sp, #20
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a85a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b084      	sub	sp, #16
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a880:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d01c      	beq.n	800a8c6 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a892:	2b00      	cmp	r3, #0
 800a894:	d115      	bne.n	800a8c2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2201      	movs	r2, #1
 800a89a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	2181      	movs	r1, #129	; 0x81
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f001 fdb7 	bl	800c42c <USBD_LL_Transmit>

      return USBD_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	e002      	b.n	800a8c8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e000      	b.n	800a8c8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a8c6:	2302      	movs	r3, #2
  }
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8de:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d017      	beq.n	800a91a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	7c1b      	ldrb	r3, [r3, #16]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d109      	bne.n	800a906 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f001 fdb7 	bl	800c472 <USBD_LL_PrepareReceive>
 800a904:	e007      	b.n	800a916 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a90c:	2340      	movs	r3, #64	; 0x40
 800a90e:	2101      	movs	r1, #1
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f001 fdae 	bl	800c472 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	e000      	b.n	800a91c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a91a:	2302      	movs	r3, #2
  }
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	4613      	mov	r3, r2
 800a930:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d101      	bne.n	800a93c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a938:	2302      	movs	r3, #2
 800a93a:	e01a      	b.n	800a972 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d003      	beq.n	800a95c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	79fa      	ldrb	r2, [r7, #7]
 800a968:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f001 fc1a 	bl	800c1a4 <USBD_LL_Init>

  return USBD_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a97a:	b480      	push	{r7}
 800a97c:	b085      	sub	sp, #20
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d006      	beq.n	800a99c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	73fb      	strb	r3, [r7, #15]
 800a99a:	e001      	b.n	800a9a0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a99c:	2302      	movs	r3, #2
 800a99e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f001 fc4e 	bl	800c258 <USBD_LL_Start>

  return USBD_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b083      	sub	sp, #12
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00c      	beq.n	800aa10 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	4611      	mov	r1, r2
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	4798      	blx	r3
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	460b      	mov	r3, r1
 800aa24:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	78fa      	ldrb	r2, [r7, #3]
 800aa30:	4611      	mov	r1, r2
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	4798      	blx	r3

  return USBD_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f000 fedb 	bl	800b80e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aa66:	461a      	mov	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aa74:	f003 031f 	and.w	r3, r3, #31
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d016      	beq.n	800aaaa <USBD_LL_SetupStage+0x6a>
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d81c      	bhi.n	800aaba <USBD_LL_SetupStage+0x7a>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d002      	beq.n	800aa8a <USBD_LL_SetupStage+0x4a>
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d008      	beq.n	800aa9a <USBD_LL_SetupStage+0x5a>
 800aa88:	e017      	b.n	800aaba <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aa90:	4619      	mov	r1, r3
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f9ce 	bl	800ae34 <USBD_StdDevReq>
      break;
 800aa98:	e01a      	b.n	800aad0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fa30 	bl	800af08 <USBD_StdItfReq>
      break;
 800aaa8:	e012      	b.n	800aad0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aab0:	4619      	mov	r1, r3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fa70 	bl	800af98 <USBD_StdEPReq>
      break;
 800aab8:	e00a      	b.n	800aad0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aac0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f001 fc25 	bl	800c318 <USBD_LL_StallEP>
      break;
 800aace:	bf00      	nop
  }

  return USBD_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b086      	sub	sp, #24
 800aade:	af00      	add	r7, sp, #0
 800aae0:	60f8      	str	r0, [r7, #12]
 800aae2:	460b      	mov	r3, r1
 800aae4:	607a      	str	r2, [r7, #4]
 800aae6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aae8:	7afb      	ldrb	r3, [r7, #11]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d14b      	bne.n	800ab86 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aaf4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d134      	bne.n	800ab6a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	68da      	ldr	r2, [r3, #12]
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d919      	bls.n	800ab40 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	68da      	ldr	r2, [r3, #12]
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	1ad2      	subs	r2, r2, r3
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	68da      	ldr	r2, [r3, #12]
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d203      	bcs.n	800ab2e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	e002      	b.n	800ab34 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	461a      	mov	r2, r3
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f000 ff5c 	bl	800b9f6 <USBD_CtlContinueRx>
 800ab3e:	e038      	b.n	800abb2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00a      	beq.n	800ab62 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d105      	bne.n	800ab62 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 ff59 	bl	800ba1a <USBD_CtlSendStatus>
 800ab68:	e023      	b.n	800abb2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab70:	2b05      	cmp	r3, #5
 800ab72:	d11e      	bne.n	800abb2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f001 fbca 	bl	800c318 <USBD_LL_StallEP>
 800ab84:	e015      	b.n	800abb2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab8c:	699b      	ldr	r3, [r3, #24]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00d      	beq.n	800abae <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ab98:	2b03      	cmp	r3, #3
 800ab9a:	d108      	bne.n	800abae <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	7afa      	ldrb	r2, [r7, #11]
 800aba6:	4611      	mov	r1, r2
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	4798      	blx	r3
 800abac:	e001      	b.n	800abb2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800abae:	2302      	movs	r3, #2
 800abb0:	e000      	b.n	800abb4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	460b      	mov	r3, r1
 800abc6:	607a      	str	r2, [r7, #4]
 800abc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800abca:	7afb      	ldrb	r3, [r7, #11]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d17f      	bne.n	800acd0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3314      	adds	r3, #20
 800abd4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d15c      	bne.n	800ac9a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	68da      	ldr	r2, [r3, #12]
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d915      	bls.n	800ac18 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	68da      	ldr	r2, [r3, #12]
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	691b      	ldr	r3, [r3, #16]
 800abf4:	1ad2      	subs	r2, r2, r3
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	461a      	mov	r2, r3
 800ac02:	6879      	ldr	r1, [r7, #4]
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 fec6 	bl	800b996 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2100      	movs	r1, #0
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f001 fc2e 	bl	800c472 <USBD_LL_PrepareReceive>
 800ac16:	e04e      	b.n	800acb6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	6912      	ldr	r2, [r2, #16]
 800ac20:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac24:	fb01 f202 	mul.w	r2, r1, r2
 800ac28:	1a9b      	subs	r3, r3, r2
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d11c      	bne.n	800ac68 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	689a      	ldr	r2, [r3, #8]
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d316      	bcc.n	800ac68 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	689a      	ldr	r2, [r3, #8]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d20f      	bcs.n	800ac68 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ac48:	2200      	movs	r2, #0
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 fea2 	bl	800b996 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	2100      	movs	r1, #0
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f001 fc06 	bl	800c472 <USBD_LL_PrepareReceive>
 800ac66:	e026      	b.n	800acb6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00a      	beq.n	800ac8a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	d105      	bne.n	800ac8a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ac8a:	2180      	movs	r1, #128	; 0x80
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f001 fb43 	bl	800c318 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 fed4 	bl	800ba40 <USBD_CtlReceiveStatus>
 800ac98:	e00d      	b.n	800acb6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aca0:	2b04      	cmp	r3, #4
 800aca2:	d004      	beq.n	800acae <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d103      	bne.n	800acb6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800acae:	2180      	movs	r1, #128	; 0x80
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f001 fb31 	bl	800c318 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d11d      	bne.n	800acfc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7ff fe80 	bl	800a9c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800acce:	e015      	b.n	800acfc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00d      	beq.n	800acf8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d108      	bne.n	800acf8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	7afa      	ldrb	r2, [r7, #11]
 800acf0:	4611      	mov	r1, r2
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	4798      	blx	r3
 800acf6:	e001      	b.n	800acfc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800acf8:	2302      	movs	r3, #2
 800acfa:	e000      	b.n	800acfe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b082      	sub	sp, #8
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad0e:	2340      	movs	r3, #64	; 0x40
 800ad10:	2200      	movs	r2, #0
 800ad12:	2100      	movs	r1, #0
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f001 faba 	bl	800c28e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2240      	movs	r2, #64	; 0x40
 800ad26:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad2a:	2340      	movs	r3, #64	; 0x40
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2180      	movs	r1, #128	; 0x80
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f001 faac 	bl	800c28e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2240      	movs	r2, #64	; 0x40
 800ad40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d009      	beq.n	800ad7e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	6852      	ldr	r2, [r2, #4]
 800ad76:	b2d2      	uxtb	r2, r2
 800ad78:	4611      	mov	r1, r2
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	4798      	blx	r3
  }

  return USBD_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	78fa      	ldrb	r2, [r7, #3]
 800ad98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2204      	movs	r2, #4
 800adc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800add2:	b480      	push	{r7}
 800add4:	b083      	sub	sp, #12
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade0:	2b04      	cmp	r3, #4
 800ade2:	d105      	bne.n	800adf0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b082      	sub	sp, #8
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae0c:	2b03      	cmp	r3, #3
 800ae0e:	d10b      	bne.n	800ae28 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae16:	69db      	ldr	r3, [r3, #28]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d005      	beq.n	800ae28 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae22:	69db      	ldr	r3, [r3, #28]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
	...

0800ae34 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae4a:	2b40      	cmp	r3, #64	; 0x40
 800ae4c:	d005      	beq.n	800ae5a <USBD_StdDevReq+0x26>
 800ae4e:	2b40      	cmp	r3, #64	; 0x40
 800ae50:	d84f      	bhi.n	800aef2 <USBD_StdDevReq+0xbe>
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d009      	beq.n	800ae6a <USBD_StdDevReq+0x36>
 800ae56:	2b20      	cmp	r3, #32
 800ae58:	d14b      	bne.n	800aef2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	4798      	blx	r3
      break;
 800ae68:	e048      	b.n	800aefc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	785b      	ldrb	r3, [r3, #1]
 800ae6e:	2b09      	cmp	r3, #9
 800ae70:	d839      	bhi.n	800aee6 <USBD_StdDevReq+0xb2>
 800ae72:	a201      	add	r2, pc, #4	; (adr r2, 800ae78 <USBD_StdDevReq+0x44>)
 800ae74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae78:	0800aec9 	.word	0x0800aec9
 800ae7c:	0800aedd 	.word	0x0800aedd
 800ae80:	0800aee7 	.word	0x0800aee7
 800ae84:	0800aed3 	.word	0x0800aed3
 800ae88:	0800aee7 	.word	0x0800aee7
 800ae8c:	0800aeab 	.word	0x0800aeab
 800ae90:	0800aea1 	.word	0x0800aea1
 800ae94:	0800aee7 	.word	0x0800aee7
 800ae98:	0800aebf 	.word	0x0800aebf
 800ae9c:	0800aeb5 	.word	0x0800aeb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f9dc 	bl	800b260 <USBD_GetDescriptor>
          break;
 800aea8:	e022      	b.n	800aef0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aeaa:	6839      	ldr	r1, [r7, #0]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fb3f 	bl	800b530 <USBD_SetAddress>
          break;
 800aeb2:	e01d      	b.n	800aef0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fb7e 	bl	800b5b8 <USBD_SetConfig>
          break;
 800aebc:	e018      	b.n	800aef0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fc07 	bl	800b6d4 <USBD_GetConfig>
          break;
 800aec6:	e013      	b.n	800aef0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fc37 	bl	800b73e <USBD_GetStatus>
          break;
 800aed0:	e00e      	b.n	800aef0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fc65 	bl	800b7a4 <USBD_SetFeature>
          break;
 800aeda:	e009      	b.n	800aef0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fc74 	bl	800b7cc <USBD_ClrFeature>
          break;
 800aee4:	e004      	b.n	800aef0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fccd 	bl	800b888 <USBD_CtlError>
          break;
 800aeee:	bf00      	nop
      }
      break;
 800aef0:	e004      	b.n	800aefc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fcc7 	bl	800b888 <USBD_CtlError>
      break;
 800aefa:	bf00      	nop
  }

  return ret;
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop

0800af08 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af12:	2300      	movs	r3, #0
 800af14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af1e:	2b40      	cmp	r3, #64	; 0x40
 800af20:	d005      	beq.n	800af2e <USBD_StdItfReq+0x26>
 800af22:	2b40      	cmp	r3, #64	; 0x40
 800af24:	d82e      	bhi.n	800af84 <USBD_StdItfReq+0x7c>
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <USBD_StdItfReq+0x26>
 800af2a:	2b20      	cmp	r3, #32
 800af2c:	d12a      	bne.n	800af84 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af34:	3b01      	subs	r3, #1
 800af36:	2b02      	cmp	r3, #2
 800af38:	d81d      	bhi.n	800af76 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	889b      	ldrh	r3, [r3, #4]
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b01      	cmp	r3, #1
 800af42:	d813      	bhi.n	800af6c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	4798      	blx	r3
 800af52:	4603      	mov	r3, r0
 800af54:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	88db      	ldrh	r3, [r3, #6]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d110      	bne.n	800af80 <USBD_StdItfReq+0x78>
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10d      	bne.n	800af80 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fd58 	bl	800ba1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af6a:	e009      	b.n	800af80 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fc8a 	bl	800b888 <USBD_CtlError>
          break;
 800af74:	e004      	b.n	800af80 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fc85 	bl	800b888 <USBD_CtlError>
          break;
 800af7e:	e000      	b.n	800af82 <USBD_StdItfReq+0x7a>
          break;
 800af80:	bf00      	nop
      }
      break;
 800af82:	e004      	b.n	800af8e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fc7e 	bl	800b888 <USBD_CtlError>
      break;
 800af8c:	bf00      	nop
  }

  return USBD_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800afa2:	2300      	movs	r3, #0
 800afa4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	889b      	ldrh	r3, [r3, #4]
 800afaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afb4:	2b40      	cmp	r3, #64	; 0x40
 800afb6:	d007      	beq.n	800afc8 <USBD_StdEPReq+0x30>
 800afb8:	2b40      	cmp	r3, #64	; 0x40
 800afba:	f200 8146 	bhi.w	800b24a <USBD_StdEPReq+0x2b2>
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00a      	beq.n	800afd8 <USBD_StdEPReq+0x40>
 800afc2:	2b20      	cmp	r3, #32
 800afc4:	f040 8141 	bne.w	800b24a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	4798      	blx	r3
      break;
 800afd6:	e13d      	b.n	800b254 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afe0:	2b20      	cmp	r3, #32
 800afe2:	d10a      	bne.n	800affa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	4798      	blx	r3
 800aff2:	4603      	mov	r3, r0
 800aff4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
 800aff8:	e12d      	b.n	800b256 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	785b      	ldrb	r3, [r3, #1]
 800affe:	2b03      	cmp	r3, #3
 800b000:	d007      	beq.n	800b012 <USBD_StdEPReq+0x7a>
 800b002:	2b03      	cmp	r3, #3
 800b004:	f300 811b 	bgt.w	800b23e <USBD_StdEPReq+0x2a6>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d072      	beq.n	800b0f2 <USBD_StdEPReq+0x15a>
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d03a      	beq.n	800b086 <USBD_StdEPReq+0xee>
 800b010:	e115      	b.n	800b23e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d002      	beq.n	800b022 <USBD_StdEPReq+0x8a>
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d015      	beq.n	800b04c <USBD_StdEPReq+0xb4>
 800b020:	e02b      	b.n	800b07a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00c      	beq.n	800b042 <USBD_StdEPReq+0xaa>
 800b028:	7bbb      	ldrb	r3, [r7, #14]
 800b02a:	2b80      	cmp	r3, #128	; 0x80
 800b02c:	d009      	beq.n	800b042 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b02e:	7bbb      	ldrb	r3, [r7, #14]
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f001 f970 	bl	800c318 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b038:	2180      	movs	r1, #128	; 0x80
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f001 f96c 	bl	800c318 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b040:	e020      	b.n	800b084 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fc1f 	bl	800b888 <USBD_CtlError>
              break;
 800b04a:	e01b      	b.n	800b084 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	885b      	ldrh	r3, [r3, #2]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10e      	bne.n	800b072 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00b      	beq.n	800b072 <USBD_StdEPReq+0xda>
 800b05a:	7bbb      	ldrb	r3, [r7, #14]
 800b05c:	2b80      	cmp	r3, #128	; 0x80
 800b05e:	d008      	beq.n	800b072 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	88db      	ldrh	r3, [r3, #6]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d104      	bne.n	800b072 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b068:	7bbb      	ldrb	r3, [r7, #14]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 f953 	bl	800c318 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fcd1 	bl	800ba1a <USBD_CtlSendStatus>

              break;
 800b078:	e004      	b.n	800b084 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fc03 	bl	800b888 <USBD_CtlError>
              break;
 800b082:	bf00      	nop
          }
          break;
 800b084:	e0e0      	b.n	800b248 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d002      	beq.n	800b096 <USBD_StdEPReq+0xfe>
 800b090:	2b03      	cmp	r3, #3
 800b092:	d015      	beq.n	800b0c0 <USBD_StdEPReq+0x128>
 800b094:	e026      	b.n	800b0e4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b096:	7bbb      	ldrb	r3, [r7, #14]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00c      	beq.n	800b0b6 <USBD_StdEPReq+0x11e>
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	2b80      	cmp	r3, #128	; 0x80
 800b0a0:	d009      	beq.n	800b0b6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f001 f936 	bl	800c318 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b0ac:	2180      	movs	r1, #128	; 0x80
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f001 f932 	bl	800c318 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0b4:	e01c      	b.n	800b0f0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b0b6:	6839      	ldr	r1, [r7, #0]
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 fbe5 	bl	800b888 <USBD_CtlError>
              break;
 800b0be:	e017      	b.n	800b0f0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	885b      	ldrh	r3, [r3, #2]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d112      	bne.n	800b0ee <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0c8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d004      	beq.n	800b0dc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0d2:	7bbb      	ldrb	r3, [r7, #14]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f001 f93d 	bl	800c356 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fc9c 	bl	800ba1a <USBD_CtlSendStatus>
              }
              break;
 800b0e2:	e004      	b.n	800b0ee <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fbce 	bl	800b888 <USBD_CtlError>
              break;
 800b0ec:	e000      	b.n	800b0f0 <USBD_StdEPReq+0x158>
              break;
 800b0ee:	bf00      	nop
          }
          break;
 800b0f0:	e0aa      	b.n	800b248 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d002      	beq.n	800b102 <USBD_StdEPReq+0x16a>
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d032      	beq.n	800b166 <USBD_StdEPReq+0x1ce>
 800b100:	e097      	b.n	800b232 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b102:	7bbb      	ldrb	r3, [r7, #14]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d007      	beq.n	800b118 <USBD_StdEPReq+0x180>
 800b108:	7bbb      	ldrb	r3, [r7, #14]
 800b10a:	2b80      	cmp	r3, #128	; 0x80
 800b10c:	d004      	beq.n	800b118 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fbb9 	bl	800b888 <USBD_CtlError>
                break;
 800b116:	e091      	b.n	800b23c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	da0b      	bge.n	800b138 <USBD_StdEPReq+0x1a0>
 800b120:	7bbb      	ldrb	r3, [r7, #14]
 800b122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b126:	4613      	mov	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	3310      	adds	r3, #16
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	4413      	add	r3, r2
 800b134:	3304      	adds	r3, #4
 800b136:	e00b      	b.n	800b150 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b138:	7bbb      	ldrb	r3, [r7, #14]
 800b13a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b13e:	4613      	mov	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4413      	add	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	4413      	add	r3, r2
 800b14e:	3304      	adds	r3, #4
 800b150:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	2200      	movs	r2, #0
 800b156:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2202      	movs	r2, #2
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fbfd 	bl	800b95e <USBD_CtlSendData>
              break;
 800b164:	e06a      	b.n	800b23c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	da11      	bge.n	800b192 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b16e:	7bbb      	ldrb	r3, [r7, #14]
 800b170:	f003 020f 	and.w	r2, r3, #15
 800b174:	6879      	ldr	r1, [r7, #4]
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	440b      	add	r3, r1
 800b180:	3318      	adds	r3, #24
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d117      	bne.n	800b1b8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b188:	6839      	ldr	r1, [r7, #0]
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fb7c 	bl	800b888 <USBD_CtlError>
                  break;
 800b190:	e054      	b.n	800b23c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b192:	7bbb      	ldrb	r3, [r7, #14]
 800b194:	f003 020f 	and.w	r2, r3, #15
 800b198:	6879      	ldr	r1, [r7, #4]
 800b19a:	4613      	mov	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d104      	bne.n	800b1b8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fb69 	bl	800b888 <USBD_CtlError>
                  break;
 800b1b6:	e041      	b.n	800b23c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	da0b      	bge.n	800b1d8 <USBD_StdEPReq+0x240>
 800b1c0:	7bbb      	ldrb	r3, [r7, #14]
 800b1c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4413      	add	r3, r2
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	3310      	adds	r3, #16
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	e00b      	b.n	800b1f0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1de:	4613      	mov	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d002      	beq.n	800b1fe <USBD_StdEPReq+0x266>
 800b1f8:	7bbb      	ldrb	r3, [r7, #14]
 800b1fa:	2b80      	cmp	r3, #128	; 0x80
 800b1fc:	d103      	bne.n	800b206 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	2200      	movs	r2, #0
 800b202:	601a      	str	r2, [r3, #0]
 800b204:	e00e      	b.n	800b224 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b206:	7bbb      	ldrb	r3, [r7, #14]
 800b208:	4619      	mov	r1, r3
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f001 f8c2 	bl	800c394 <USBD_LL_IsStallEP>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	2201      	movs	r2, #1
 800b21a:	601a      	str	r2, [r3, #0]
 800b21c:	e002      	b.n	800b224 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	2202      	movs	r2, #2
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fb97 	bl	800b95e <USBD_CtlSendData>
              break;
 800b230:	e004      	b.n	800b23c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b232:	6839      	ldr	r1, [r7, #0]
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fb27 	bl	800b888 <USBD_CtlError>
              break;
 800b23a:	bf00      	nop
          }
          break;
 800b23c:	e004      	b.n	800b248 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fb21 	bl	800b888 <USBD_CtlError>
          break;
 800b246:	bf00      	nop
      }
      break;
 800b248:	e004      	b.n	800b254 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b24a:	6839      	ldr	r1, [r7, #0]
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 fb1b 	bl	800b888 <USBD_CtlError>
      break;
 800b252:	bf00      	nop
  }

  return ret;
 800b254:	7bfb      	ldrb	r3, [r7, #15]
}
 800b256:	4618      	mov	r0, r3
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
	...

0800b260 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b26a:	2300      	movs	r3, #0
 800b26c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b272:	2300      	movs	r3, #0
 800b274:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	885b      	ldrh	r3, [r3, #2]
 800b27a:	0a1b      	lsrs	r3, r3, #8
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	3b01      	subs	r3, #1
 800b280:	2b06      	cmp	r3, #6
 800b282:	f200 8128 	bhi.w	800b4d6 <USBD_GetDescriptor+0x276>
 800b286:	a201      	add	r2, pc, #4	; (adr r2, 800b28c <USBD_GetDescriptor+0x2c>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b2a9 	.word	0x0800b2a9
 800b290:	0800b2c1 	.word	0x0800b2c1
 800b294:	0800b301 	.word	0x0800b301
 800b298:	0800b4d7 	.word	0x0800b4d7
 800b29c:	0800b4d7 	.word	0x0800b4d7
 800b2a0:	0800b477 	.word	0x0800b477
 800b2a4:	0800b4a3 	.word	0x0800b4a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	7c12      	ldrb	r2, [r2, #16]
 800b2b4:	f107 0108 	add.w	r1, r7, #8
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4798      	blx	r3
 800b2bc:	60f8      	str	r0, [r7, #12]
      break;
 800b2be:	e112      	b.n	800b4e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	7c1b      	ldrb	r3, [r3, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10d      	bne.n	800b2e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d0:	f107 0208 	add.w	r2, r7, #8
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	4798      	blx	r3
 800b2d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	2202      	movs	r2, #2
 800b2e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b2e2:	e100      	b.n	800b4e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ec:	f107 0208 	add.w	r2, r7, #8
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	4798      	blx	r3
 800b2f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	701a      	strb	r2, [r3, #0]
      break;
 800b2fe:	e0f2      	b.n	800b4e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	885b      	ldrh	r3, [r3, #2]
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b05      	cmp	r3, #5
 800b308:	f200 80ac 	bhi.w	800b464 <USBD_GetDescriptor+0x204>
 800b30c:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <USBD_GetDescriptor+0xb4>)
 800b30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b312:	bf00      	nop
 800b314:	0800b32d 	.word	0x0800b32d
 800b318:	0800b361 	.word	0x0800b361
 800b31c:	0800b395 	.word	0x0800b395
 800b320:	0800b3c9 	.word	0x0800b3c9
 800b324:	0800b3fd 	.word	0x0800b3fd
 800b328:	0800b431 	.word	0x0800b431
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00b      	beq.n	800b350 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	7c12      	ldrb	r2, [r2, #16]
 800b344:	f107 0108 	add.w	r1, r7, #8
 800b348:	4610      	mov	r0, r2
 800b34a:	4798      	blx	r3
 800b34c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b34e:	e091      	b.n	800b474 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b350:	6839      	ldr	r1, [r7, #0]
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 fa98 	bl	800b888 <USBD_CtlError>
            err++;
 800b358:	7afb      	ldrb	r3, [r7, #11]
 800b35a:	3301      	adds	r3, #1
 800b35c:	72fb      	strb	r3, [r7, #11]
          break;
 800b35e:	e089      	b.n	800b474 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00b      	beq.n	800b384 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	7c12      	ldrb	r2, [r2, #16]
 800b378:	f107 0108 	add.w	r1, r7, #8
 800b37c:	4610      	mov	r0, r2
 800b37e:	4798      	blx	r3
 800b380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b382:	e077      	b.n	800b474 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fa7e 	bl	800b888 <USBD_CtlError>
            err++;
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	3301      	adds	r3, #1
 800b390:	72fb      	strb	r3, [r7, #11]
          break;
 800b392:	e06f      	b.n	800b474 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00b      	beq.n	800b3b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	7c12      	ldrb	r2, [r2, #16]
 800b3ac:	f107 0108 	add.w	r1, r7, #8
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	4798      	blx	r3
 800b3b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3b6:	e05d      	b.n	800b474 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fa64 	bl	800b888 <USBD_CtlError>
            err++;
 800b3c0:	7afb      	ldrb	r3, [r7, #11]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3c6:	e055      	b.n	800b474 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00b      	beq.n	800b3ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	7c12      	ldrb	r2, [r2, #16]
 800b3e0:	f107 0108 	add.w	r1, r7, #8
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4798      	blx	r3
 800b3e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ea:	e043      	b.n	800b474 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa4a 	bl	800b888 <USBD_CtlError>
            err++;
 800b3f4:	7afb      	ldrb	r3, [r7, #11]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3fa:	e03b      	b.n	800b474 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b402:	695b      	ldr	r3, [r3, #20]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b40e:	695b      	ldr	r3, [r3, #20]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	7c12      	ldrb	r2, [r2, #16]
 800b414:	f107 0108 	add.w	r1, r7, #8
 800b418:	4610      	mov	r0, r2
 800b41a:	4798      	blx	r3
 800b41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b41e:	e029      	b.n	800b474 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fa30 	bl	800b888 <USBD_CtlError>
            err++;
 800b428:	7afb      	ldrb	r3, [r7, #11]
 800b42a:	3301      	adds	r3, #1
 800b42c:	72fb      	strb	r3, [r7, #11]
          break;
 800b42e:	e021      	b.n	800b474 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00b      	beq.n	800b454 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b442:	699b      	ldr	r3, [r3, #24]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	7c12      	ldrb	r2, [r2, #16]
 800b448:	f107 0108 	add.w	r1, r7, #8
 800b44c:	4610      	mov	r0, r2
 800b44e:	4798      	blx	r3
 800b450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b452:	e00f      	b.n	800b474 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fa16 	bl	800b888 <USBD_CtlError>
            err++;
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	3301      	adds	r3, #1
 800b460:	72fb      	strb	r3, [r7, #11]
          break;
 800b462:	e007      	b.n	800b474 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b464:	6839      	ldr	r1, [r7, #0]
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 fa0e 	bl	800b888 <USBD_CtlError>
          err++;
 800b46c:	7afb      	ldrb	r3, [r7, #11]
 800b46e:	3301      	adds	r3, #1
 800b470:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b472:	e038      	b.n	800b4e6 <USBD_GetDescriptor+0x286>
 800b474:	e037      	b.n	800b4e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	7c1b      	ldrb	r3, [r3, #16]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d109      	bne.n	800b492 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b486:	f107 0208 	add.w	r2, r7, #8
 800b48a:	4610      	mov	r0, r2
 800b48c:	4798      	blx	r3
 800b48e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b490:	e029      	b.n	800b4e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f9f7 	bl	800b888 <USBD_CtlError>
        err++;
 800b49a:	7afb      	ldrb	r3, [r7, #11]
 800b49c:	3301      	adds	r3, #1
 800b49e:	72fb      	strb	r3, [r7, #11]
      break;
 800b4a0:	e021      	b.n	800b4e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	7c1b      	ldrb	r3, [r3, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10d      	bne.n	800b4c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b2:	f107 0208 	add.w	r2, r7, #8
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	4798      	blx	r3
 800b4ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	2207      	movs	r2, #7
 800b4c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4c4:	e00f      	b.n	800b4e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f9dd 	bl	800b888 <USBD_CtlError>
        err++;
 800b4ce:	7afb      	ldrb	r3, [r7, #11]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	72fb      	strb	r3, [r7, #11]
      break;
 800b4d4:	e007      	b.n	800b4e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 f9d5 	bl	800b888 <USBD_CtlError>
      err++;
 800b4de:	7afb      	ldrb	r3, [r7, #11]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	72fb      	strb	r3, [r7, #11]
      break;
 800b4e4:	bf00      	nop
  }

  if (err != 0U)
 800b4e6:	7afb      	ldrb	r3, [r7, #11]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d11c      	bne.n	800b526 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b4ec:	893b      	ldrh	r3, [r7, #8]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d011      	beq.n	800b516 <USBD_GetDescriptor+0x2b6>
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	88db      	ldrh	r3, [r3, #6]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00d      	beq.n	800b516 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	88da      	ldrh	r2, [r3, #6]
 800b4fe:	893b      	ldrh	r3, [r7, #8]
 800b500:	4293      	cmp	r3, r2
 800b502:	bf28      	it	cs
 800b504:	4613      	movcs	r3, r2
 800b506:	b29b      	uxth	r3, r3
 800b508:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b50a:	893b      	ldrh	r3, [r7, #8]
 800b50c:	461a      	mov	r2, r3
 800b50e:	68f9      	ldr	r1, [r7, #12]
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fa24 	bl	800b95e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	88db      	ldrh	r3, [r3, #6]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d104      	bne.n	800b528 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fa7b 	bl	800ba1a <USBD_CtlSendStatus>
 800b524:	e000      	b.n	800b528 <USBD_GetDescriptor+0x2c8>
    return;
 800b526:	bf00      	nop
    }
  }
}
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop

0800b530 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	889b      	ldrh	r3, [r3, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d130      	bne.n	800b5a4 <USBD_SetAddress+0x74>
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	88db      	ldrh	r3, [r3, #6]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d12c      	bne.n	800b5a4 <USBD_SetAddress+0x74>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	885b      	ldrh	r3, [r3, #2]
 800b54e:	2b7f      	cmp	r3, #127	; 0x7f
 800b550:	d828      	bhi.n	800b5a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	885b      	ldrh	r3, [r3, #2]
 800b556:	b2db      	uxtb	r3, r3
 800b558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b55c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b564:	2b03      	cmp	r3, #3
 800b566:	d104      	bne.n	800b572 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f98c 	bl	800b888 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b570:	e01d      	b.n	800b5ae <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	7bfa      	ldrb	r2, [r7, #15]
 800b576:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 ff35 	bl	800c3ee <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fa48 	bl	800ba1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d004      	beq.n	800b59a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2202      	movs	r2, #2
 800b594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b598:	e009      	b.n	800b5ae <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5a2:	e004      	b.n	800b5ae <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f96e 	bl	800b888 <USBD_CtlError>
  }
}
 800b5ac:	bf00      	nop
 800b5ae:	bf00      	nop
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
	...

0800b5b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	885b      	ldrh	r3, [r3, #2]
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	4b41      	ldr	r3, [pc, #260]	; (800b6d0 <USBD_SetConfig+0x118>)
 800b5ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5cc:	4b40      	ldr	r3, [pc, #256]	; (800b6d0 <USBD_SetConfig+0x118>)
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d904      	bls.n	800b5de <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f956 	bl	800b888 <USBD_CtlError>
 800b5dc:	e075      	b.n	800b6ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d002      	beq.n	800b5ee <USBD_SetConfig+0x36>
 800b5e8:	2b03      	cmp	r3, #3
 800b5ea:	d023      	beq.n	800b634 <USBD_SetConfig+0x7c>
 800b5ec:	e062      	b.n	800b6b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b5ee:	4b38      	ldr	r3, [pc, #224]	; (800b6d0 <USBD_SetConfig+0x118>)
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d01a      	beq.n	800b62c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b5f6:	4b36      	ldr	r3, [pc, #216]	; (800b6d0 <USBD_SetConfig+0x118>)
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2203      	movs	r2, #3
 800b604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b608:	4b31      	ldr	r3, [pc, #196]	; (800b6d0 <USBD_SetConfig+0x118>)
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff f9e4 	bl	800a9dc <USBD_SetClassConfig>
 800b614:	4603      	mov	r3, r0
 800b616:	2b02      	cmp	r3, #2
 800b618:	d104      	bne.n	800b624 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b61a:	6839      	ldr	r1, [r7, #0]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f933 	bl	800b888 <USBD_CtlError>
            return;
 800b622:	e052      	b.n	800b6ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f9f8 	bl	800ba1a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b62a:	e04e      	b.n	800b6ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f9f4 	bl	800ba1a <USBD_CtlSendStatus>
        break;
 800b632:	e04a      	b.n	800b6ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b634:	4b26      	ldr	r3, [pc, #152]	; (800b6d0 <USBD_SetConfig+0x118>)
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d112      	bne.n	800b662 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2202      	movs	r2, #2
 800b640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b644:	4b22      	ldr	r3, [pc, #136]	; (800b6d0 <USBD_SetConfig+0x118>)
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	461a      	mov	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b64e:	4b20      	ldr	r3, [pc, #128]	; (800b6d0 <USBD_SetConfig+0x118>)
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	4619      	mov	r1, r3
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff f9e0 	bl	800aa1a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f9dd 	bl	800ba1a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b660:	e033      	b.n	800b6ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b662:	4b1b      	ldr	r3, [pc, #108]	; (800b6d0 <USBD_SetConfig+0x118>)
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	461a      	mov	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d01d      	beq.n	800b6ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	b2db      	uxtb	r3, r3
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff f9ce 	bl	800aa1a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b67e:	4b14      	ldr	r3, [pc, #80]	; (800b6d0 <USBD_SetConfig+0x118>)
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	461a      	mov	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b688:	4b11      	ldr	r3, [pc, #68]	; (800b6d0 <USBD_SetConfig+0x118>)
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	4619      	mov	r1, r3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7ff f9a4 	bl	800a9dc <USBD_SetClassConfig>
 800b694:	4603      	mov	r3, r0
 800b696:	2b02      	cmp	r3, #2
 800b698:	d104      	bne.n	800b6a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b69a:	6839      	ldr	r1, [r7, #0]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f8f3 	bl	800b888 <USBD_CtlError>
            return;
 800b6a2:	e012      	b.n	800b6ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f9b8 	bl	800ba1a <USBD_CtlSendStatus>
        break;
 800b6aa:	e00e      	b.n	800b6ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f9b4 	bl	800ba1a <USBD_CtlSendStatus>
        break;
 800b6b2:	e00a      	b.n	800b6ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f8e6 	bl	800b888 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b6bc:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <USBD_SetConfig+0x118>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7ff f9a9 	bl	800aa1a <USBD_ClrClassConfig>
        break;
 800b6c8:	bf00      	nop
    }
  }
}
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	20000484 	.word	0x20000484

0800b6d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	88db      	ldrh	r3, [r3, #6]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d004      	beq.n	800b6f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6e6:	6839      	ldr	r1, [r7, #0]
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f8cd 	bl	800b888 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6ee:	e022      	b.n	800b736 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	dc02      	bgt.n	800b700 <USBD_GetConfig+0x2c>
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	dc03      	bgt.n	800b706 <USBD_GetConfig+0x32>
 800b6fe:	e015      	b.n	800b72c <USBD_GetConfig+0x58>
 800b700:	2b03      	cmp	r3, #3
 800b702:	d00b      	beq.n	800b71c <USBD_GetConfig+0x48>
 800b704:	e012      	b.n	800b72c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	3308      	adds	r3, #8
 800b710:	2201      	movs	r2, #1
 800b712:	4619      	mov	r1, r3
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f922 	bl	800b95e <USBD_CtlSendData>
        break;
 800b71a:	e00c      	b.n	800b736 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	3304      	adds	r3, #4
 800b720:	2201      	movs	r2, #1
 800b722:	4619      	mov	r1, r3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f91a 	bl	800b95e <USBD_CtlSendData>
        break;
 800b72a:	e004      	b.n	800b736 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f8aa 	bl	800b888 <USBD_CtlError>
        break;
 800b734:	bf00      	nop
}
 800b736:	bf00      	nop
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b082      	sub	sp, #8
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b74e:	3b01      	subs	r3, #1
 800b750:	2b02      	cmp	r3, #2
 800b752:	d81e      	bhi.n	800b792 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	88db      	ldrh	r3, [r3, #6]
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d004      	beq.n	800b766 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f892 	bl	800b888 <USBD_CtlError>
        break;
 800b764:	e01a      	b.n	800b79c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b772:	2b00      	cmp	r3, #0
 800b774:	d005      	beq.n	800b782 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	f043 0202 	orr.w	r2, r3, #2
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	330c      	adds	r3, #12
 800b786:	2202      	movs	r2, #2
 800b788:	4619      	mov	r1, r3
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 f8e7 	bl	800b95e <USBD_CtlSendData>
      break;
 800b790:	e004      	b.n	800b79c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f877 	bl	800b888 <USBD_CtlError>
      break;
 800b79a:	bf00      	nop
  }
}
 800b79c:	bf00      	nop
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	885b      	ldrh	r3, [r3, #2]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d106      	bne.n	800b7c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f92b 	bl	800ba1a <USBD_CtlSendStatus>
  }
}
 800b7c4:	bf00      	nop
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d80b      	bhi.n	800b7fa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	885b      	ldrh	r3, [r3, #2]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d10c      	bne.n	800b804 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 f911 	bl	800ba1a <USBD_CtlSendStatus>
      }
      break;
 800b7f8:	e004      	b.n	800b804 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b7fa:	6839      	ldr	r1, [r7, #0]
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f843 	bl	800b888 <USBD_CtlError>
      break;
 800b802:	e000      	b.n	800b806 <USBD_ClrFeature+0x3a>
      break;
 800b804:	bf00      	nop
  }
}
 800b806:	bf00      	nop
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b80e:	b480      	push	{r7}
 800b810:	b083      	sub	sp, #12
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	781a      	ldrb	r2, [r3, #0]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	785a      	ldrb	r2, [r3, #1]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	3302      	adds	r3, #2
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	b29a      	uxth	r2, r3
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	3303      	adds	r3, #3
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	b29b      	uxth	r3, r3
 800b838:	021b      	lsls	r3, r3, #8
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	4413      	add	r3, r2
 800b83e:	b29a      	uxth	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	3304      	adds	r3, #4
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	3305      	adds	r3, #5
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	b29b      	uxth	r3, r3
 800b854:	021b      	lsls	r3, r3, #8
 800b856:	b29b      	uxth	r3, r3
 800b858:	4413      	add	r3, r2
 800b85a:	b29a      	uxth	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	3306      	adds	r3, #6
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	b29a      	uxth	r2, r3
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	3307      	adds	r3, #7
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	b29b      	uxth	r3, r3
 800b870:	021b      	lsls	r3, r3, #8
 800b872:	b29b      	uxth	r3, r3
 800b874:	4413      	add	r3, r2
 800b876:	b29a      	uxth	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	80da      	strh	r2, [r3, #6]

}
 800b87c:	bf00      	nop
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b892:	2180      	movs	r1, #128	; 0x80
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 fd3f 	bl	800c318 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b89a:	2100      	movs	r1, #0
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fd3b 	bl	800c318 <USBD_LL_StallEP>
}
 800b8a2:	bf00      	nop
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b086      	sub	sp, #24
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	60f8      	str	r0, [r7, #12]
 800b8b2:	60b9      	str	r1, [r7, #8]
 800b8b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d032      	beq.n	800b926 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 f834 	bl	800b92e <USBD_GetLen>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b8d4:	7dfb      	ldrb	r3, [r7, #23]
 800b8d6:	1c5a      	adds	r2, r3, #1
 800b8d8:	75fa      	strb	r2, [r7, #23]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	4413      	add	r3, r2
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	7812      	ldrb	r2, [r2, #0]
 800b8e4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	1c5a      	adds	r2, r3, #1
 800b8ea:	75fa      	strb	r2, [r7, #23]
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b8f6:	e012      	b.n	800b91e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	60fa      	str	r2, [r7, #12]
 800b8fe:	7dfa      	ldrb	r2, [r7, #23]
 800b900:	1c51      	adds	r1, r2, #1
 800b902:	75f9      	strb	r1, [r7, #23]
 800b904:	4611      	mov	r1, r2
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	440a      	add	r2, r1
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b90e:	7dfb      	ldrb	r3, [r7, #23]
 800b910:	1c5a      	adds	r2, r3, #1
 800b912:	75fa      	strb	r2, [r7, #23]
 800b914:	461a      	mov	r2, r3
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	4413      	add	r3, r2
 800b91a:	2200      	movs	r2, #0
 800b91c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1e8      	bne.n	800b8f8 <USBD_GetString+0x4e>
    }
  }
}
 800b926:	bf00      	nop
 800b928:	3718      	adds	r7, #24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b92e:	b480      	push	{r7}
 800b930:	b085      	sub	sp, #20
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b936:	2300      	movs	r3, #0
 800b938:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b93a:	e005      	b.n	800b948 <USBD_GetLen+0x1a>
  {
    len++;
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
 800b93e:	3301      	adds	r3, #1
 800b940:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3301      	adds	r3, #1
 800b946:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1f5      	bne.n	800b93c <USBD_GetLen+0xe>
  }

  return len;
 800b950:	7bfb      	ldrb	r3, [r7, #15]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b084      	sub	sp, #16
 800b962:	af00      	add	r7, sp, #0
 800b964:	60f8      	str	r0, [r7, #12]
 800b966:	60b9      	str	r1, [r7, #8]
 800b968:	4613      	mov	r3, r2
 800b96a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2202      	movs	r2, #2
 800b970:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b974:	88fa      	ldrh	r2, [r7, #6]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b97a:	88fa      	ldrh	r2, [r7, #6]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b980:	88fb      	ldrh	r3, [r7, #6]
 800b982:	68ba      	ldr	r2, [r7, #8]
 800b984:	2100      	movs	r1, #0
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 fd50 	bl	800c42c <USBD_LL_Transmit>

  return USBD_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b084      	sub	sp, #16
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	60b9      	str	r1, [r7, #8]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9a4:	88fb      	ldrh	r3, [r7, #6]
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f000 fd3e 	bl	800c42c <USBD_LL_Transmit>

  return USBD_OK;
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b084      	sub	sp, #16
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	60f8      	str	r0, [r7, #12]
 800b9c2:	60b9      	str	r1, [r7, #8]
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2203      	movs	r2, #3
 800b9cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b9d0:	88fa      	ldrh	r2, [r7, #6]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b9d8:	88fa      	ldrh	r2, [r7, #6]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9e0:	88fb      	ldrh	r3, [r7, #6]
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	f000 fd43 	bl	800c472 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b084      	sub	sp, #16
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	60f8      	str	r0, [r7, #12]
 800b9fe:	60b9      	str	r1, [r7, #8]
 800ba00:	4613      	mov	r3, r2
 800ba02:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba04:	88fb      	ldrh	r3, [r7, #6]
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	2100      	movs	r1, #0
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f000 fd31 	bl	800c472 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b082      	sub	sp, #8
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2204      	movs	r2, #4
 800ba26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2100      	movs	r1, #0
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fcfb 	bl	800c42c <USBD_LL_Transmit>

  return USBD_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2205      	movs	r2, #5
 800ba4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba50:	2300      	movs	r3, #0
 800ba52:	2200      	movs	r2, #0
 800ba54:	2100      	movs	r1, #0
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 fd0b 	bl	800c472 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3708      	adds	r7, #8
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
	...

0800ba68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	4912      	ldr	r1, [pc, #72]	; (800bab8 <MX_USB_DEVICE_Init+0x50>)
 800ba70:	4812      	ldr	r0, [pc, #72]	; (800babc <MX_USB_DEVICE_Init+0x54>)
 800ba72:	f7fe ff57 	bl	800a924 <USBD_Init>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba7c:	f7f6 fb14 	bl	80020a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba80:	490f      	ldr	r1, [pc, #60]	; (800bac0 <MX_USB_DEVICE_Init+0x58>)
 800ba82:	480e      	ldr	r0, [pc, #56]	; (800babc <MX_USB_DEVICE_Init+0x54>)
 800ba84:	f7fe ff79 	bl	800a97a <USBD_RegisterClass>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d001      	beq.n	800ba92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba8e:	f7f6 fb0b 	bl	80020a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ba92:	490c      	ldr	r1, [pc, #48]	; (800bac4 <MX_USB_DEVICE_Init+0x5c>)
 800ba94:	4809      	ldr	r0, [pc, #36]	; (800babc <MX_USB_DEVICE_Init+0x54>)
 800ba96:	f7fe fea7 	bl	800a7e8 <USBD_CDC_RegisterInterface>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d001      	beq.n	800baa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800baa0:	f7f6 fb02 	bl	80020a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800baa4:	4805      	ldr	r0, [pc, #20]	; (800babc <MX_USB_DEVICE_Init+0x54>)
 800baa6:	f7fe ff82 	bl	800a9ae <USBD_Start>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d001      	beq.n	800bab4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bab0:	f7f6 fafa 	bl	80020a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bab4:	bf00      	nop
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	2000018c 	.word	0x2000018c
 800babc:	20000488 	.word	0x20000488
 800bac0:	20000070 	.word	0x20000070
 800bac4:	2000017c 	.word	0x2000017c

0800bac8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bacc:	2200      	movs	r2, #0
 800bace:	4905      	ldr	r1, [pc, #20]	; (800bae4 <CDC_Init_FS+0x1c>)
 800bad0:	4805      	ldr	r0, [pc, #20]	; (800bae8 <CDC_Init_FS+0x20>)
 800bad2:	f7fe fea0 	bl	800a816 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bad6:	4905      	ldr	r1, [pc, #20]	; (800baec <CDC_Init_FS+0x24>)
 800bad8:	4803      	ldr	r0, [pc, #12]	; (800bae8 <CDC_Init_FS+0x20>)
 800bada:	f7fe feb6 	bl	800a84a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bade:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20000b90 	.word	0x20000b90
 800bae8:	20000488 	.word	0x20000488
 800baec:	20000790 	.word	0x20000790

0800baf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800baf0:	b480      	push	{r7}
 800baf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800baf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	4603      	mov	r3, r0
 800bb08:	6039      	str	r1, [r7, #0]
 800bb0a:	71fb      	strb	r3, [r7, #7]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb10:	79fb      	ldrb	r3, [r7, #7]
 800bb12:	2b23      	cmp	r3, #35	; 0x23
 800bb14:	f200 80a2 	bhi.w	800bc5c <CDC_Control_FS+0x15c>
 800bb18:	a201      	add	r2, pc, #4	; (adr r2, 800bb20 <CDC_Control_FS+0x20>)
 800bb1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb1e:	bf00      	nop
 800bb20:	0800bc5d 	.word	0x0800bc5d
 800bb24:	0800bc5d 	.word	0x0800bc5d
 800bb28:	0800bc5d 	.word	0x0800bc5d
 800bb2c:	0800bc5d 	.word	0x0800bc5d
 800bb30:	0800bc5d 	.word	0x0800bc5d
 800bb34:	0800bc5d 	.word	0x0800bc5d
 800bb38:	0800bc5d 	.word	0x0800bc5d
 800bb3c:	0800bc5d 	.word	0x0800bc5d
 800bb40:	0800bc5d 	.word	0x0800bc5d
 800bb44:	0800bc5d 	.word	0x0800bc5d
 800bb48:	0800bc5d 	.word	0x0800bc5d
 800bb4c:	0800bc5d 	.word	0x0800bc5d
 800bb50:	0800bc5d 	.word	0x0800bc5d
 800bb54:	0800bc5d 	.word	0x0800bc5d
 800bb58:	0800bc5d 	.word	0x0800bc5d
 800bb5c:	0800bc5d 	.word	0x0800bc5d
 800bb60:	0800bc5d 	.word	0x0800bc5d
 800bb64:	0800bc5d 	.word	0x0800bc5d
 800bb68:	0800bc5d 	.word	0x0800bc5d
 800bb6c:	0800bc5d 	.word	0x0800bc5d
 800bb70:	0800bc5d 	.word	0x0800bc5d
 800bb74:	0800bc5d 	.word	0x0800bc5d
 800bb78:	0800bc5d 	.word	0x0800bc5d
 800bb7c:	0800bc5d 	.word	0x0800bc5d
 800bb80:	0800bc5d 	.word	0x0800bc5d
 800bb84:	0800bc5d 	.word	0x0800bc5d
 800bb88:	0800bc5d 	.word	0x0800bc5d
 800bb8c:	0800bc5d 	.word	0x0800bc5d
 800bb90:	0800bc5d 	.word	0x0800bc5d
 800bb94:	0800bc5d 	.word	0x0800bc5d
 800bb98:	0800bc5d 	.word	0x0800bc5d
 800bb9c:	0800bc5d 	.word	0x0800bc5d
 800bba0:	0800bbb1 	.word	0x0800bbb1
 800bba4:	0800bbff 	.word	0x0800bbff
 800bba8:	0800bc5d 	.word	0x0800bc5d
 800bbac:	0800bc5d 	.word	0x0800bc5d
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    {

    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	2120      	movs	r1, #32
 800bbb4:	482c      	ldr	r0, [pc, #176]	; (800bc68 <CDC_Control_FS+0x168>)
 800bbb6:	f7f7 ff0f 	bl	80039d8 <HAL_GPIO_WritePin>
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	021b      	lsls	r3, r3, #8
 800bbc8:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	3302      	adds	r3, #2
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800bbd2:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	3303      	adds	r3, #3
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	061b      	lsls	r3, r3, #24
 800bbdc:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800bbde:	461a      	mov	r2, r3
 800bbe0:	4b22      	ldr	r3, [pc, #136]	; (800bc6c <CDC_Control_FS+0x16c>)
 800bbe2:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	791a      	ldrb	r2, [r3, #4]
 800bbe8:	4b20      	ldr	r3, [pc, #128]	; (800bc6c <CDC_Control_FS+0x16c>)
 800bbea:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	795a      	ldrb	r2, [r3, #5]
 800bbf0:	4b1e      	ldr	r3, [pc, #120]	; (800bc6c <CDC_Control_FS+0x16c>)
 800bbf2:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	799a      	ldrb	r2, [r3, #6]
 800bbf8:	4b1c      	ldr	r3, [pc, #112]	; (800bc6c <CDC_Control_FS+0x16c>)
 800bbfa:	719a      	strb	r2, [r3, #6]
    }
    break;
 800bbfc:	e02f      	b.n	800bc5e <CDC_Control_FS+0x15e>

    case CDC_GET_LINE_CODING:
    {


    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 800bbfe:	2201      	movs	r2, #1
 800bc00:	2120      	movs	r1, #32
 800bc02:	4819      	ldr	r0, [pc, #100]	; (800bc68 <CDC_Control_FS+0x168>)
 800bc04:	f7f7 fee8 	bl	80039d8 <HAL_GPIO_WritePin>
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800bc08:	4b18      	ldr	r3, [pc, #96]	; (800bc6c <CDC_Control_FS+0x16c>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800bc12:	4b16      	ldr	r3, [pc, #88]	; (800bc6c <CDC_Control_FS+0x16c>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	0a1a      	lsrs	r2, r3, #8
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	b2d2      	uxtb	r2, r2
 800bc1e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800bc20:	4b12      	ldr	r3, [pc, #72]	; (800bc6c <CDC_Control_FS+0x16c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	0c1a      	lsrs	r2, r3, #16
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	3302      	adds	r3, #2
 800bc2a:	b2d2      	uxtb	r2, r2
 800bc2c:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800bc2e:	4b0f      	ldr	r3, [pc, #60]	; (800bc6c <CDC_Control_FS+0x16c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	0e1a      	lsrs	r2, r3, #24
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	3303      	adds	r3, #3
 800bc38:	b2d2      	uxtb	r2, r2
 800bc3a:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	3304      	adds	r3, #4
 800bc40:	4a0a      	ldr	r2, [pc, #40]	; (800bc6c <CDC_Control_FS+0x16c>)
 800bc42:	7912      	ldrb	r2, [r2, #4]
 800bc44:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	3305      	adds	r3, #5
 800bc4a:	4a08      	ldr	r2, [pc, #32]	; (800bc6c <CDC_Control_FS+0x16c>)
 800bc4c:	7952      	ldrb	r2, [r2, #5]
 800bc4e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	3306      	adds	r3, #6
 800bc54:	4a05      	ldr	r2, [pc, #20]	; (800bc6c <CDC_Control_FS+0x16c>)
 800bc56:	7992      	ldrb	r2, [r2, #6]
 800bc58:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bc5a:	e000      	b.n	800bc5e <CDC_Control_FS+0x15e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc5c:	bf00      	nop
  }

  return (USBD_OK);
 800bc5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	48000400 	.word	0x48000400
 800bc6c:	20000174 	.word	0x20000174

0800bc70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc7a:	6879      	ldr	r1, [r7, #4]
 800bc7c:	4831      	ldr	r0, [pc, #196]	; (800bd44 <CDC_Receive_FS+0xd4>)
 800bc7e:	f7fe fde4 	bl	800a84a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc82:	4830      	ldr	r0, [pc, #192]	; (800bd44 <CDC_Receive_FS+0xd4>)
 800bc84:	f7fe fe24 	bl	800a8d0 <USBD_CDC_ReceivePacket>
  //COBS decode
  for(uint32_t i=0;i<*Len;i++)
 800bc88:	2300      	movs	r3, #0
 800bc8a:	60fb      	str	r3, [r7, #12]
 800bc8c:	e050      	b.n	800bd30 <CDC_Receive_FS+0xc0>
  {
	zero_count--;
 800bc8e:	4b2e      	ldr	r3, [pc, #184]	; (800bd48 <CDC_Receive_FS+0xd8>)
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	3b01      	subs	r3, #1
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	4b2c      	ldr	r3, [pc, #176]	; (800bd48 <CDC_Receive_FS+0xd8>)
 800bc98:	701a      	strb	r2, [r3, #0]
    if(Buf[i]=='\0'){
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d114      	bne.n	800bcd0 <CDC_Receive_FS+0x60>
      is_first = 1;
 800bca6:	4b29      	ldr	r3, [pc, #164]	; (800bd4c <CDC_Receive_FS+0xdc>)
 800bca8:	2201      	movs	r2, #1
 800bcaa:	701a      	strb	r2, [r3, #0]
      if(zero_count==0){
 800bcac:	4b26      	ldr	r3, [pc, #152]	; (800bd48 <CDC_Receive_FS+0xd8>)
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d106      	bne.n	800bcc2 <CDC_Receive_FS+0x52>
    	//last byte
    	usb_process(DecodedData,data_index);
 800bcb4:	4b26      	ldr	r3, [pc, #152]	; (800bd50 <CDC_Receive_FS+0xe0>)
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4826      	ldr	r0, [pc, #152]	; (800bd54 <CDC_Receive_FS+0xe4>)
 800bcbc:	f7f5 fe64 	bl	8001988 <usb_process>
 800bcc0:	e002      	b.n	800bcc8 <CDC_Receive_FS+0x58>
      }else{
        //error
        //reset
        zero_count=0;
 800bcc2:	4b21      	ldr	r3, [pc, #132]	; (800bd48 <CDC_Receive_FS+0xd8>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	701a      	strb	r2, [r3, #0]
      }
      data_index=0;
 800bcc8:	4b21      	ldr	r3, [pc, #132]	; (800bd50 <CDC_Receive_FS+0xe0>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	701a      	strb	r2, [r3, #0]
 800bcce:	e02c      	b.n	800bd2a <CDC_Receive_FS+0xba>
    }else{
      if(is_first==1){
 800bcd0:	4b1e      	ldr	r3, [pc, #120]	; (800bd4c <CDC_Receive_FS+0xdc>)
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d109      	bne.n	800bcec <CDC_Receive_FS+0x7c>
    	  zero_count = Buf[i];
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	4413      	add	r3, r2
 800bcde:	781a      	ldrb	r2, [r3, #0]
 800bce0:	4b19      	ldr	r3, [pc, #100]	; (800bd48 <CDC_Receive_FS+0xd8>)
 800bce2:	701a      	strb	r2, [r3, #0]
    	  is_first = 0;
 800bce4:	4b19      	ldr	r3, [pc, #100]	; (800bd4c <CDC_Receive_FS+0xdc>)
 800bce6:	2200      	movs	r2, #0
 800bce8:	701a      	strb	r2, [r3, #0]
    	  continue;
 800bcea:	e01e      	b.n	800bd2a <CDC_Receive_FS+0xba>
      }
      if(zero_count==0){
 800bcec:	4b16      	ldr	r3, [pc, #88]	; (800bd48 <CDC_Receive_FS+0xd8>)
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10c      	bne.n	800bd0e <CDC_Receive_FS+0x9e>
    	DecodedData[data_index]=0x00;
 800bcf4:	4b16      	ldr	r3, [pc, #88]	; (800bd50 <CDC_Receive_FS+0xe0>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	4b16      	ldr	r3, [pc, #88]	; (800bd54 <CDC_Receive_FS+0xe4>)
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	5499      	strb	r1, [r3, r2]
        zero_count=Buf[i];
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	4413      	add	r3, r2
 800bd06:	781a      	ldrb	r2, [r3, #0]
 800bd08:	4b0f      	ldr	r3, [pc, #60]	; (800bd48 <CDC_Receive_FS+0xd8>)
 800bd0a:	701a      	strb	r2, [r3, #0]
 800bd0c:	e007      	b.n	800bd1e <CDC_Receive_FS+0xae>
      }else{
    	DecodedData[data_index]=Buf[i];
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	4413      	add	r3, r2
 800bd14:	4a0e      	ldr	r2, [pc, #56]	; (800bd50 <CDC_Receive_FS+0xe0>)
 800bd16:	7812      	ldrb	r2, [r2, #0]
 800bd18:	7819      	ldrb	r1, [r3, #0]
 800bd1a:	4b0e      	ldr	r3, [pc, #56]	; (800bd54 <CDC_Receive_FS+0xe4>)
 800bd1c:	5499      	strb	r1, [r3, r2]
      }
      data_index++;
 800bd1e:	4b0c      	ldr	r3, [pc, #48]	; (800bd50 <CDC_Receive_FS+0xe0>)
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	3301      	adds	r3, #1
 800bd24:	b2da      	uxtb	r2, r3
 800bd26:	4b0a      	ldr	r3, [pc, #40]	; (800bd50 <CDC_Receive_FS+0xe0>)
 800bd28:	701a      	strb	r2, [r3, #0]
  for(uint32_t i=0;i<*Len;i++)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	60fb      	str	r3, [r7, #12]
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d3a9      	bcc.n	800bc8e <CDC_Receive_FS+0x1e>
    }
  }

  return (USBD_OK);
 800bd3a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	20000488 	.word	0x20000488
 800bd48:	20000173 	.word	0x20000173
 800bd4c:	2000078d 	.word	0x2000078d
 800bd50:	2000078c 	.word	0x2000078c
 800bd54:	2000074c 	.word	0x2000074c

0800bd58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	460b      	mov	r3, r1
 800bd62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bd68:	4b0d      	ldr	r3, [pc, #52]	; (800bda0 <CDC_Transmit_FS+0x48>)
 800bd6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d001      	beq.n	800bd7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e00b      	b.n	800bd96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd7e:	887b      	ldrh	r3, [r7, #2]
 800bd80:	461a      	mov	r2, r3
 800bd82:	6879      	ldr	r1, [r7, #4]
 800bd84:	4806      	ldr	r0, [pc, #24]	; (800bda0 <CDC_Transmit_FS+0x48>)
 800bd86:	f7fe fd46 	bl	800a816 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bd8a:	4805      	ldr	r0, [pc, #20]	; (800bda0 <CDC_Transmit_FS+0x48>)
 800bd8c:	f7fe fd71 	bl	800a872 <USBD_CDC_TransmitPacket>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	20000488 	.word	0x20000488

0800bda4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	4603      	mov	r3, r0
 800bdac:	6039      	str	r1, [r7, #0]
 800bdae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	2212      	movs	r2, #18
 800bdb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bdb6:	4b03      	ldr	r3, [pc, #12]	; (800bdc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	200001a8 	.word	0x200001a8

0800bdc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	6039      	str	r1, [r7, #0]
 800bdd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	2204      	movs	r2, #4
 800bdd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdda:	4b03      	ldr	r3, [pc, #12]	; (800bde8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr
 800bde8:	200001bc 	.word	0x200001bc

0800bdec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	6039      	str	r1, [r7, #0]
 800bdf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdf8:	79fb      	ldrb	r3, [r7, #7]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d105      	bne.n	800be0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	4907      	ldr	r1, [pc, #28]	; (800be20 <USBD_FS_ProductStrDescriptor+0x34>)
 800be02:	4808      	ldr	r0, [pc, #32]	; (800be24 <USBD_FS_ProductStrDescriptor+0x38>)
 800be04:	f7ff fd51 	bl	800b8aa <USBD_GetString>
 800be08:	e004      	b.n	800be14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	4904      	ldr	r1, [pc, #16]	; (800be20 <USBD_FS_ProductStrDescriptor+0x34>)
 800be0e:	4805      	ldr	r0, [pc, #20]	; (800be24 <USBD_FS_ProductStrDescriptor+0x38>)
 800be10:	f7ff fd4b 	bl	800b8aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800be14:	4b02      	ldr	r3, [pc, #8]	; (800be20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be16:	4618      	mov	r0, r3
 800be18:	3708      	adds	r7, #8
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20000f90 	.word	0x20000f90
 800be24:	0800c640 	.word	0x0800c640

0800be28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	4603      	mov	r3, r0
 800be30:	6039      	str	r1, [r7, #0]
 800be32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be34:	683a      	ldr	r2, [r7, #0]
 800be36:	4904      	ldr	r1, [pc, #16]	; (800be48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be38:	4804      	ldr	r0, [pc, #16]	; (800be4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be3a:	f7ff fd36 	bl	800b8aa <USBD_GetString>
  return USBD_StrDesc;
 800be3e:	4b02      	ldr	r3, [pc, #8]	; (800be48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be40:	4618      	mov	r0, r3
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	20000f90 	.word	0x20000f90
 800be4c:	0800c658 	.word	0x0800c658

0800be50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	6039      	str	r1, [r7, #0]
 800be5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	221a      	movs	r2, #26
 800be60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be62:	f000 f843 	bl	800beec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be66:	4b02      	ldr	r3, [pc, #8]	; (800be70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	200001c0 	.word	0x200001c0

0800be74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	4603      	mov	r3, r0
 800be7c:	6039      	str	r1, [r7, #0]
 800be7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be80:	79fb      	ldrb	r3, [r7, #7]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d105      	bne.n	800be92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	4907      	ldr	r1, [pc, #28]	; (800bea8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be8a:	4808      	ldr	r0, [pc, #32]	; (800beac <USBD_FS_ConfigStrDescriptor+0x38>)
 800be8c:	f7ff fd0d 	bl	800b8aa <USBD_GetString>
 800be90:	e004      	b.n	800be9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	4904      	ldr	r1, [pc, #16]	; (800bea8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be96:	4805      	ldr	r0, [pc, #20]	; (800beac <USBD_FS_ConfigStrDescriptor+0x38>)
 800be98:	f7ff fd07 	bl	800b8aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800be9c:	4b02      	ldr	r3, [pc, #8]	; (800bea8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20000f90 	.word	0x20000f90
 800beac:	0800c65c 	.word	0x0800c65c

0800beb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	4603      	mov	r3, r0
 800beb8:	6039      	str	r1, [r7, #0]
 800beba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bebc:	79fb      	ldrb	r3, [r7, #7]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d105      	bne.n	800bece <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	4907      	ldr	r1, [pc, #28]	; (800bee4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bec6:	4808      	ldr	r0, [pc, #32]	; (800bee8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bec8:	f7ff fcef 	bl	800b8aa <USBD_GetString>
 800becc:	e004      	b.n	800bed8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	4904      	ldr	r1, [pc, #16]	; (800bee4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bed2:	4805      	ldr	r0, [pc, #20]	; (800bee8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bed4:	f7ff fce9 	bl	800b8aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800bed8:	4b02      	ldr	r3, [pc, #8]	; (800bee4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	20000f90 	.word	0x20000f90
 800bee8:	0800c668 	.word	0x0800c668

0800beec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bef2:	4b0f      	ldr	r3, [pc, #60]	; (800bf30 <Get_SerialNum+0x44>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bef8:	4b0e      	ldr	r3, [pc, #56]	; (800bf34 <Get_SerialNum+0x48>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800befe:	4b0e      	ldr	r3, [pc, #56]	; (800bf38 <Get_SerialNum+0x4c>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4413      	add	r3, r2
 800bf0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d009      	beq.n	800bf26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf12:	2208      	movs	r2, #8
 800bf14:	4909      	ldr	r1, [pc, #36]	; (800bf3c <Get_SerialNum+0x50>)
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f000 f814 	bl	800bf44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf1c:	2204      	movs	r2, #4
 800bf1e:	4908      	ldr	r1, [pc, #32]	; (800bf40 <Get_SerialNum+0x54>)
 800bf20:	68b8      	ldr	r0, [r7, #8]
 800bf22:	f000 f80f 	bl	800bf44 <IntToUnicode>
  }
}
 800bf26:	bf00      	nop
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	1ffff7ac 	.word	0x1ffff7ac
 800bf34:	1ffff7b0 	.word	0x1ffff7b0
 800bf38:	1ffff7b4 	.word	0x1ffff7b4
 800bf3c:	200001c2 	.word	0x200001c2
 800bf40:	200001d2 	.word	0x200001d2

0800bf44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b087      	sub	sp, #28
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf52:	2300      	movs	r3, #0
 800bf54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf56:	2300      	movs	r3, #0
 800bf58:	75fb      	strb	r3, [r7, #23]
 800bf5a:	e027      	b.n	800bfac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	0f1b      	lsrs	r3, r3, #28
 800bf60:	2b09      	cmp	r3, #9
 800bf62:	d80b      	bhi.n	800bf7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	0f1b      	lsrs	r3, r3, #28
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
 800bf6c:	005b      	lsls	r3, r3, #1
 800bf6e:	4619      	mov	r1, r3
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	440b      	add	r3, r1
 800bf74:	3230      	adds	r2, #48	; 0x30
 800bf76:	b2d2      	uxtb	r2, r2
 800bf78:	701a      	strb	r2, [r3, #0]
 800bf7a:	e00a      	b.n	800bf92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	0f1b      	lsrs	r3, r3, #28
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	7dfb      	ldrb	r3, [r7, #23]
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	4619      	mov	r1, r3
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	440b      	add	r3, r1
 800bf8c:	3237      	adds	r2, #55	; 0x37
 800bf8e:	b2d2      	uxtb	r2, r2
 800bf90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	011b      	lsls	r3, r3, #4
 800bf96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf98:	7dfb      	ldrb	r3, [r7, #23]
 800bf9a:	005b      	lsls	r3, r3, #1
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	75fb      	strb	r3, [r7, #23]
 800bfac:	7dfa      	ldrb	r2, [r7, #23]
 800bfae:	79fb      	ldrb	r3, [r7, #7]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d3d3      	bcc.n	800bf5c <IntToUnicode+0x18>
  }
}
 800bfb4:	bf00      	nop
 800bfb6:	bf00      	nop
 800bfb8:	371c      	adds	r7, #28
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr
	...

0800bfc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b08a      	sub	sp, #40	; 0x28
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfcc:	f107 0314 	add.w	r3, r7, #20
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	605a      	str	r2, [r3, #4]
 800bfd6:	609a      	str	r2, [r3, #8]
 800bfd8:	60da      	str	r2, [r3, #12]
 800bfda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a1f      	ldr	r2, [pc, #124]	; (800c060 <HAL_PCD_MspInit+0x9c>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d137      	bne.n	800c056 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfe6:	4b1f      	ldr	r3, [pc, #124]	; (800c064 <HAL_PCD_MspInit+0xa0>)
 800bfe8:	695b      	ldr	r3, [r3, #20]
 800bfea:	4a1e      	ldr	r2, [pc, #120]	; (800c064 <HAL_PCD_MspInit+0xa0>)
 800bfec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bff0:	6153      	str	r3, [r2, #20]
 800bff2:	4b1c      	ldr	r3, [pc, #112]	; (800c064 <HAL_PCD_MspInit+0xa0>)
 800bff4:	695b      	ldr	r3, [r3, #20]
 800bff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bffa:	613b      	str	r3, [r7, #16]
 800bffc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bffe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c004:	2302      	movs	r3, #2
 800c006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c008:	2300      	movs	r3, #0
 800c00a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c00c:	2303      	movs	r3, #3
 800c00e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800c010:	230e      	movs	r3, #14
 800c012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c014:	f107 0314 	add.w	r3, r7, #20
 800c018:	4619      	mov	r1, r3
 800c01a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c01e:	f7f7 fb49 	bl	80036b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c022:	4b10      	ldr	r3, [pc, #64]	; (800c064 <HAL_PCD_MspInit+0xa0>)
 800c024:	69db      	ldr	r3, [r3, #28]
 800c026:	4a0f      	ldr	r2, [pc, #60]	; (800c064 <HAL_PCD_MspInit+0xa0>)
 800c028:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c02c:	61d3      	str	r3, [r2, #28]
 800c02e:	4b0d      	ldr	r3, [pc, #52]	; (800c064 <HAL_PCD_MspInit+0xa0>)
 800c030:	69db      	ldr	r3, [r3, #28]
 800c032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c036:	60fb      	str	r3, [r7, #12]
 800c038:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 800c03a:	4b0b      	ldr	r3, [pc, #44]	; (800c068 <HAL_PCD_MspInit+0xa4>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a0a      	ldr	r2, [pc, #40]	; (800c068 <HAL_PCD_MspInit+0xa4>)
 800c040:	f043 0320 	orr.w	r3, r3, #32
 800c044:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c046:	2200      	movs	r2, #0
 800c048:	2100      	movs	r1, #0
 800c04a:	204b      	movs	r0, #75	; 0x4b
 800c04c:	f7f7 fafb 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c050:	204b      	movs	r0, #75	; 0x4b
 800c052:	f7f7 fb14 	bl	800367e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c056:	bf00      	nop
 800c058:	3728      	adds	r7, #40	; 0x28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	40005c00 	.word	0x40005c00
 800c064:	40021000 	.word	0x40021000
 800c068:	40010000 	.word	0x40010000

0800c06c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c080:	4619      	mov	r1, r3
 800c082:	4610      	mov	r0, r2
 800c084:	f7fe fcdc 	bl	800aa40 <USBD_LL_SetupStage>
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	460b      	mov	r3, r1
 800c09a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c0a2:	78fa      	ldrb	r2, [r7, #3]
 800c0a4:	6879      	ldr	r1, [r7, #4]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	4413      	add	r3, r2
 800c0ac:	00db      	lsls	r3, r3, #3
 800c0ae:	440b      	add	r3, r1
 800c0b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	78fb      	ldrb	r3, [r7, #3]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	f7fe fd0e 	bl	800aada <USBD_LL_DataOutStage>
}
 800c0be:	bf00      	nop
 800c0c0:	3708      	adds	r7, #8
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c0d8:	78fa      	ldrb	r2, [r7, #3]
 800c0da:	6879      	ldr	r1, [r7, #4]
 800c0dc:	4613      	mov	r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	00db      	lsls	r3, r3, #3
 800c0e4:	440b      	add	r3, r1
 800c0e6:	333c      	adds	r3, #60	; 0x3c
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	78fb      	ldrb	r3, [r7, #3]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	f7fe fd65 	bl	800abbc <USBD_LL_DataInStage>
}
 800c0f2:	bf00      	nop
 800c0f4:	3708      	adds	r7, #8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b082      	sub	sp, #8
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe fe78 	bl	800adfe <USBD_LL_SOF>
}
 800c10e:	bf00      	nop
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b084      	sub	sp, #16
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c11e:	2301      	movs	r3, #1
 800c120:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	2b02      	cmp	r3, #2
 800c128:	d001      	beq.n	800c12e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c12a:	f7f5 ffbd 	bl	80020a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c134:	7bfa      	ldrb	r2, [r7, #15]
 800c136:	4611      	mov	r1, r2
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fe fe25 	bl	800ad88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c144:	4618      	mov	r0, r3
 800c146:	f7fe fdde 	bl	800ad06 <USBD_LL_Reset>
}
 800c14a:	bf00      	nop
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
	...

0800c154 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe fe20 	bl	800ada8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	699b      	ldr	r3, [r3, #24]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d005      	beq.n	800c17c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c170:	4b04      	ldr	r3, [pc, #16]	; (800c184 <HAL_PCD_SuspendCallback+0x30>)
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	4a03      	ldr	r2, [pc, #12]	; (800c184 <HAL_PCD_SuspendCallback+0x30>)
 800c176:	f043 0306 	orr.w	r3, r3, #6
 800c17a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c17c:	bf00      	nop
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	e000ed00 	.word	0xe000ed00

0800c188 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c196:	4618      	mov	r0, r3
 800c198:	f7fe fe1b 	bl	800add2 <USBD_LL_Resume>
}
 800c19c:	bf00      	nop
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c1ac:	4a28      	ldr	r2, [pc, #160]	; (800c250 <USBD_LL_Init+0xac>)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4a26      	ldr	r2, [pc, #152]	; (800c250 <USBD_LL_Init+0xac>)
 800c1b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c1bc:	4b24      	ldr	r3, [pc, #144]	; (800c250 <USBD_LL_Init+0xac>)
 800c1be:	4a25      	ldr	r2, [pc, #148]	; (800c254 <USBD_LL_Init+0xb0>)
 800c1c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c1c2:	4b23      	ldr	r3, [pc, #140]	; (800c250 <USBD_LL_Init+0xac>)
 800c1c4:	2208      	movs	r2, #8
 800c1c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c1c8:	4b21      	ldr	r3, [pc, #132]	; (800c250 <USBD_LL_Init+0xac>)
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c1ce:	4b20      	ldr	r3, [pc, #128]	; (800c250 <USBD_LL_Init+0xac>)
 800c1d0:	2202      	movs	r2, #2
 800c1d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c1d4:	4b1e      	ldr	r3, [pc, #120]	; (800c250 <USBD_LL_Init+0xac>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c1da:	4b1d      	ldr	r3, [pc, #116]	; (800c250 <USBD_LL_Init+0xac>)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c1e0:	481b      	ldr	r0, [pc, #108]	; (800c250 <USBD_LL_Init+0xac>)
 800c1e2:	f7f7 fc29 	bl	8003a38 <HAL_PCD_Init>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d001      	beq.n	800c1f0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c1ec:	f7f5 ff5c 	bl	80020a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1f6:	2318      	movs	r3, #24
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	f7f9 f8b2 	bl	8005364 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c206:	2358      	movs	r3, #88	; 0x58
 800c208:	2200      	movs	r2, #0
 800c20a:	2180      	movs	r1, #128	; 0x80
 800c20c:	f7f9 f8aa 	bl	8005364 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c216:	23c0      	movs	r3, #192	; 0xc0
 800c218:	2200      	movs	r2, #0
 800c21a:	2181      	movs	r1, #129	; 0x81
 800c21c:	f7f9 f8a2 	bl	8005364 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c226:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c22a:	2200      	movs	r2, #0
 800c22c:	2101      	movs	r1, #1
 800c22e:	f7f9 f899 	bl	8005364 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c23c:	2200      	movs	r2, #0
 800c23e:	2182      	movs	r1, #130	; 0x82
 800c240:	f7f9 f890 	bl	8005364 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20001190 	.word	0x20001190
 800c254:	40005c00 	.word	0x40005c00

0800c258 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c26e:	4618      	mov	r0, r3
 800c270:	f7f7 fcb4 	bl	8003bdc <HAL_PCD_Start>
 800c274:	4603      	mov	r3, r0
 800c276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c278:	7bfb      	ldrb	r3, [r7, #15]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 f964 	bl	800c548 <USBD_Get_USB_Status>
 800c280:	4603      	mov	r3, r0
 800c282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c284:	7bbb      	ldrb	r3, [r7, #14]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b084      	sub	sp, #16
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
 800c296:	4608      	mov	r0, r1
 800c298:	4611      	mov	r1, r2
 800c29a:	461a      	mov	r2, r3
 800c29c:	4603      	mov	r3, r0
 800c29e:	70fb      	strb	r3, [r7, #3]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	70bb      	strb	r3, [r7, #2]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c2b6:	78bb      	ldrb	r3, [r7, #2]
 800c2b8:	883a      	ldrh	r2, [r7, #0]
 800c2ba:	78f9      	ldrb	r1, [r7, #3]
 800c2bc:	f7f7 fdad 	bl	8003e1a <HAL_PCD_EP_Open>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 f93e 	bl	800c548 <USBD_Get_USB_Status>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b084      	sub	sp, #16
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2f4:	78fa      	ldrb	r2, [r7, #3]
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7f7 fdeb 	bl	8003ed4 <HAL_PCD_EP_Close>
 800c2fe:	4603      	mov	r3, r0
 800c300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c302:	7bfb      	ldrb	r3, [r7, #15]
 800c304:	4618      	mov	r0, r3
 800c306:	f000 f91f 	bl	800c548 <USBD_Get_USB_Status>
 800c30a:	4603      	mov	r3, r0
 800c30c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c30e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	460b      	mov	r3, r1
 800c322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c328:	2300      	movs	r3, #0
 800c32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c332:	78fa      	ldrb	r2, [r7, #3]
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f7f7 fe94 	bl	8004064 <HAL_PCD_EP_SetStall>
 800c33c:	4603      	mov	r3, r0
 800c33e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	4618      	mov	r0, r3
 800c344:	f000 f900 	bl	800c548 <USBD_Get_USB_Status>
 800c348:	4603      	mov	r3, r0
 800c34a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	460b      	mov	r3, r1
 800c360:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c366:	2300      	movs	r3, #0
 800c368:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c370:	78fa      	ldrb	r2, [r7, #3]
 800c372:	4611      	mov	r1, r2
 800c374:	4618      	mov	r0, r3
 800c376:	f7f7 fec7 	bl	8004108 <HAL_PCD_EP_ClrStall>
 800c37a:	4603      	mov	r3, r0
 800c37c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
 800c380:	4618      	mov	r0, r3
 800c382:	f000 f8e1 	bl	800c548 <USBD_Get_USB_Status>
 800c386:	4603      	mov	r3, r0
 800c388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c38a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	460b      	mov	r3, r1
 800c39e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	da0c      	bge.n	800c3ca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3b0:	78fb      	ldrb	r3, [r7, #3]
 800c3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3b6:	68f9      	ldr	r1, [r7, #12]
 800c3b8:	1c5a      	adds	r2, r3, #1
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	4413      	add	r3, r2
 800c3c0:	00db      	lsls	r3, r3, #3
 800c3c2:	440b      	add	r3, r1
 800c3c4:	3302      	adds	r3, #2
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	e00b      	b.n	800c3e2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3ca:	78fb      	ldrb	r3, [r7, #3]
 800c3cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3d0:	68f9      	ldr	r1, [r7, #12]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	4413      	add	r3, r2
 800c3d8:	00db      	lsls	r3, r3, #3
 800c3da:	440b      	add	r3, r1
 800c3dc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c3e0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3714      	adds	r7, #20
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b084      	sub	sp, #16
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c408:	78fa      	ldrb	r2, [r7, #3]
 800c40a:	4611      	mov	r1, r2
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7f7 fcdf 	bl	8003dd0 <HAL_PCD_SetAddress>
 800c412:	4603      	mov	r3, r0
 800c414:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 f895 	bl	800c548 <USBD_Get_USB_Status>
 800c41e:	4603      	mov	r3, r0
 800c420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c422:	7bbb      	ldrb	r3, [r7, #14]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3710      	adds	r7, #16
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	607a      	str	r2, [r7, #4]
 800c436:	461a      	mov	r2, r3
 800c438:	460b      	mov	r3, r1
 800c43a:	72fb      	strb	r3, [r7, #11]
 800c43c:	4613      	mov	r3, r2
 800c43e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c440:	2300      	movs	r3, #0
 800c442:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c444:	2300      	movs	r3, #0
 800c446:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c44e:	893b      	ldrh	r3, [r7, #8]
 800c450:	7af9      	ldrb	r1, [r7, #11]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	f7f7 fdcf 	bl	8003ff6 <HAL_PCD_EP_Transmit>
 800c458:	4603      	mov	r3, r0
 800c45a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c45c:	7dfb      	ldrb	r3, [r7, #23]
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 f872 	bl	800c548 <USBD_Get_USB_Status>
 800c464:	4603      	mov	r3, r0
 800c466:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c468:	7dbb      	ldrb	r3, [r7, #22]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3718      	adds	r7, #24
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b086      	sub	sp, #24
 800c476:	af00      	add	r7, sp, #0
 800c478:	60f8      	str	r0, [r7, #12]
 800c47a:	607a      	str	r2, [r7, #4]
 800c47c:	461a      	mov	r2, r3
 800c47e:	460b      	mov	r3, r1
 800c480:	72fb      	strb	r3, [r7, #11]
 800c482:	4613      	mov	r3, r2
 800c484:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c486:	2300      	movs	r3, #0
 800c488:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c494:	893b      	ldrh	r3, [r7, #8]
 800c496:	7af9      	ldrb	r1, [r7, #11]
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	f7f7 fd63 	bl	8003f64 <HAL_PCD_EP_Receive>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4a2:	7dfb      	ldrb	r3, [r7, #23]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f000 f84f 	bl	800c548 <USBD_Get_USB_Status>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3718      	adds	r7, #24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c4ca:	78fa      	ldrb	r2, [r7, #3]
 800c4cc:	4611      	mov	r1, r2
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7f7 fd79 	bl	8003fc6 <HAL_PCD_EP_GetRxCount>
 800c4d4:	4603      	mov	r3, r0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c4e8:	4b03      	ldr	r3, [pc, #12]	; (800c4f8 <USBD_static_malloc+0x18>)
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	2000147c 	.word	0x2000147c

0800c4fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]

}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	460b      	mov	r3, r1
 800c51a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800c51c:	78fb      	ldrb	r3, [r7, #3]
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d107      	bne.n	800c532 <HAL_PCDEx_SetConnectionState+0x22>
  {
    /* Configure Low connection state. */
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_SET);
 800c522:	2201      	movs	r2, #1
 800c524:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c52c:	f7f7 fa54 	bl	80039d8 <HAL_GPIO_WritePin>
    /* Configure High connection state. */
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_RESET);

  }
  /* USER CODE END 6 */
}
 800c530:	e006      	b.n	800c540 <HAL_PCDEx_SetConnectionState+0x30>
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_RESET);
 800c532:	2200      	movs	r2, #0
 800c534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c53c:	f7f7 fa4c 	bl	80039d8 <HAL_GPIO_WritePin>
}
 800c540:	bf00      	nop
 800c542:	3708      	adds	r7, #8
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	4603      	mov	r3, r0
 800c550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c556:	79fb      	ldrb	r3, [r7, #7]
 800c558:	2b03      	cmp	r3, #3
 800c55a:	d817      	bhi.n	800c58c <USBD_Get_USB_Status+0x44>
 800c55c:	a201      	add	r2, pc, #4	; (adr r2, 800c564 <USBD_Get_USB_Status+0x1c>)
 800c55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c562:	bf00      	nop
 800c564:	0800c575 	.word	0x0800c575
 800c568:	0800c57b 	.word	0x0800c57b
 800c56c:	0800c581 	.word	0x0800c581
 800c570:	0800c587 	.word	0x0800c587
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c574:	2300      	movs	r3, #0
 800c576:	73fb      	strb	r3, [r7, #15]
    break;
 800c578:	e00b      	b.n	800c592 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c57a:	2302      	movs	r3, #2
 800c57c:	73fb      	strb	r3, [r7, #15]
    break;
 800c57e:	e008      	b.n	800c592 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c580:	2301      	movs	r3, #1
 800c582:	73fb      	strb	r3, [r7, #15]
    break;
 800c584:	e005      	b.n	800c592 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c586:	2302      	movs	r3, #2
 800c588:	73fb      	strb	r3, [r7, #15]
    break;
 800c58a:	e002      	b.n	800c592 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c58c:	2302      	movs	r3, #2
 800c58e:	73fb      	strb	r3, [r7, #15]
    break;
 800c590:	bf00      	nop
  }
  return usb_status;
 800c592:	7bfb      	ldrb	r3, [r7, #15]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3714      	adds	r7, #20
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <memset>:
 800c5a0:	4402      	add	r2, r0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d100      	bne.n	800c5aa <memset+0xa>
 800c5a8:	4770      	bx	lr
 800c5aa:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ae:	e7f9      	b.n	800c5a4 <memset+0x4>

0800c5b0 <__libc_init_array>:
 800c5b0:	b570      	push	{r4, r5, r6, lr}
 800c5b2:	4d0d      	ldr	r5, [pc, #52]	; (800c5e8 <__libc_init_array+0x38>)
 800c5b4:	4c0d      	ldr	r4, [pc, #52]	; (800c5ec <__libc_init_array+0x3c>)
 800c5b6:	1b64      	subs	r4, r4, r5
 800c5b8:	10a4      	asrs	r4, r4, #2
 800c5ba:	2600      	movs	r6, #0
 800c5bc:	42a6      	cmp	r6, r4
 800c5be:	d109      	bne.n	800c5d4 <__libc_init_array+0x24>
 800c5c0:	4d0b      	ldr	r5, [pc, #44]	; (800c5f0 <__libc_init_array+0x40>)
 800c5c2:	4c0c      	ldr	r4, [pc, #48]	; (800c5f4 <__libc_init_array+0x44>)
 800c5c4:	f000 f818 	bl	800c5f8 <_init>
 800c5c8:	1b64      	subs	r4, r4, r5
 800c5ca:	10a4      	asrs	r4, r4, #2
 800c5cc:	2600      	movs	r6, #0
 800c5ce:	42a6      	cmp	r6, r4
 800c5d0:	d105      	bne.n	800c5de <__libc_init_array+0x2e>
 800c5d2:	bd70      	pop	{r4, r5, r6, pc}
 800c5d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5d8:	4798      	blx	r3
 800c5da:	3601      	adds	r6, #1
 800c5dc:	e7ee      	b.n	800c5bc <__libc_init_array+0xc>
 800c5de:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5e2:	4798      	blx	r3
 800c5e4:	3601      	adds	r6, #1
 800c5e6:	e7f2      	b.n	800c5ce <__libc_init_array+0x1e>
 800c5e8:	0800c6a8 	.word	0x0800c6a8
 800c5ec:	0800c6a8 	.word	0x0800c6a8
 800c5f0:	0800c6a8 	.word	0x0800c6a8
 800c5f4:	0800c6b0 	.word	0x0800c6b0

0800c5f8 <_init>:
 800c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fa:	bf00      	nop
 800c5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5fe:	bc08      	pop	{r3}
 800c600:	469e      	mov	lr, r3
 800c602:	4770      	bx	lr

0800c604 <_fini>:
 800c604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c606:	bf00      	nop
 800c608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c60a:	bc08      	pop	{r3}
 800c60c:	469e      	mov	lr, r3
 800c60e:	4770      	bx	lr
