
robomas_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be10  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800bf98  0800bf98  0001bf98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c050  0800c050  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c050  0800c050  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c050  0800c050  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c050  0800c050  0001c050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c058  0800c058  0001c058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  200001dc  0800c238  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000163c  0800c238  0002163c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019547  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004323  00000000  00000000  00039796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  0003dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de6  00000000  00000000  0003ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ad0  00000000  00000000  0003fb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019eed  00000000  00000000  000625d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b29ec  00000000  00000000  0007c4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c20  00000000  00000000  0012eeb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00133ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bf80 	.word	0x0800bf80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	0800bf80 	.word	0x0800bf80

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <cobs_encode>:
#ifdef __cplusplus
extern "C"
{
#endif
    inline void cobs_encode(const uint8_t data[], uint8_t return_data[], int data_size)
    {
 8000a04:	b480      	push	{r7}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
        int zero_index = data_size + 1; // this is return_data index
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3301      	adds	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
        return_data[zero_index] = 0x00;
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
        for (int i = data_size; i > 0; i--)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	e01f      	b.n	8000a66 <cobs_encode+0x62>
        {
            if (data[i - 1] == 0x00)
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d10c      	bne.n	8000a4e <cobs_encode+0x4a>
            {
                return_data[i] = (uint8_t)(zero_index - i);
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	b2d9      	uxtb	r1, r3
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	68b8      	ldr	r0, [r7, #8]
 8000a40:	4403      	add	r3, r0
 8000a42:	1a8a      	subs	r2, r1, r2
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	701a      	strb	r2, [r3, #0]
                zero_index = i;
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e008      	b.n	8000a60 <cobs_encode+0x5c>
            }
            else
            {
                return_data[i] = data[i - 1];
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	441a      	add	r2, r3
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	440b      	add	r3, r1
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	701a      	strb	r2, [r3, #0]
        for (int i = data_size; i > 0; i--)
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	dcdc      	bgt.n	8000a26 <cobs_encode+0x22>
            }
        }
        return_data[0] = zero_index;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	701a      	strb	r2, [r3, #0]
    }
 8000a74:	bf00      	nop
 8000a76:	371c      	adds	r7, #28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_ZN9MotorCtrl7setModeEPh>:
		param.e_pre[ReceiveID-0x201] = e;
	}
	return true;
}

inline void MotorCtrl::setMode(uint8_t usb_msg[]){
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	e031      	b.n	8000af4 <_ZN9MotorCtrl7setModeEPh+0x74>
		if(usb_msg[i]==0){
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	4413      	add	r3, r2
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d105      	bne.n	8000aa8 <_ZN9MotorCtrl7setModeEPh+0x28>
			param.mode[i] = Mode::dis;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000aa6:	e022      	b.n	8000aee <_ZN9MotorCtrl7setModeEPh+0x6e>
		}else if(usb_msg[i]==1){
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d105      	bne.n	8000ac0 <_ZN9MotorCtrl7setModeEPh+0x40>
			param.mode[i] = Mode::vel;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	2101      	movs	r1, #1
 8000aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000abe:	e016      	b.n	8000aee <_ZN9MotorCtrl7setModeEPh+0x6e>
		}else if(usb_msg[i]==2){
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d105      	bne.n	8000ad8 <_ZN9MotorCtrl7setModeEPh+0x58>
			param.mode[i] = Mode::pos;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000ad6:	e00a      	b.n	8000aee <_ZN9MotorCtrl7setModeEPh+0x6e>
		}else if(usb_msg[i]==3){
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	683a      	ldr	r2, [r7, #0]
 8000adc:	4413      	add	r3, r2
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d104      	bne.n	8000aee <_ZN9MotorCtrl7setModeEPh+0x6e>
			param.mode[i] = Mode::hom;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	2103      	movs	r1, #3
 8000aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i =0;i<8;i++){
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3301      	adds	r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b07      	cmp	r3, #7
 8000af8:	ddca      	ble.n	8000a90 <_ZN9MotorCtrl7setModeEPh+0x10>
		}
	}
	if(usb_msg[8] == 1){
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3308      	adds	r3, #8
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d104      	bne.n	8000b0e <_ZN9MotorCtrl7setModeEPh+0x8e>
		diag=1;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2201      	movs	r2, #1
 8000b08:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	}else if(usb_msg[8] == 1){
		diag=0;
	}
}
 8000b0c:	e008      	b.n	8000b20 <_ZN9MotorCtrl7setModeEPh+0xa0>
	}else if(usb_msg[8] == 1){
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	3308      	adds	r3, #8
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d103      	bne.n	8000b20 <_ZN9MotorCtrl7setModeEPh+0xa0>
		diag=0;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <_ZN9MotorCtrl7setTempEPh>:

inline void MotorCtrl::setTemp(uint8_t usb_msg[]){
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	for(int i = 0;i<8;i++){
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	e00c      	b.n	8000b56 <_ZN9MotorCtrl7setTempEPh+0x2a>
		param.limitTemp[i]=usb_msg[i];
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	7819      	ldrb	r1, [r3, #0]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	33e8      	adds	r3, #232	; 0xe8
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<8;i++){
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	3301      	adds	r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2b07      	cmp	r3, #7
 8000b5a:	ddef      	ble.n	8000b3c <_ZN9MotorCtrl7setTempEPh+0x10>
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_ZN9MotorCtrl9setTargetEPh>:

inline void MotorCtrl::setTarget(uint8_t usb_msg[]){
 8000b6a:	b480      	push	{r7}
 8000b6c:	b085      	sub	sp, #20
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	e028      	b.n	8000bcc <_ZN9MotorCtrl9setTargetEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	3301      	adds	r3, #1
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	061a      	lsls	r2, r3, #24
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	6839      	ldr	r1, [r7, #0]
 8000b90:	440b      	add	r3, r1
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	041b      	lsls	r3, r3, #16
 8000b96:	431a      	orrs	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	3303      	adds	r3, #3
 8000b9e:	6839      	ldr	r1, [r7, #0]
 8000ba0:	440b      	add	r3, r1
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	0092      	lsls	r2, r2, #2
 8000bac:	3204      	adds	r2, #4
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	440a      	add	r2, r1
 8000bb2:	7812      	ldrb	r2, [r2, #0]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.target[i],&buf,1);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3310      	adds	r3, #16
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	7a3a      	ldrb	r2, [r7, #8]
 8000bc4:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b07      	cmp	r3, #7
 8000bd0:	ddd3      	ble.n	8000b7a <_ZN9MotorCtrl9setTargetEPh+0x10>
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_ZN9MotorCtrl5setKpEPh>:

inline void MotorCtrl::setKp(uint8_t usb_msg[]){
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e028      	b.n	8000c42 <_ZN9MotorCtrl5setKpEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	061a      	lsls	r2, r3, #24
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	6839      	ldr	r1, [r7, #0]
 8000c06:	440b      	add	r3, r1
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	041b      	lsls	r3, r3, #16
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	3303      	adds	r3, #3
 8000c14:	6839      	ldr	r1, [r7, #0]
 8000c16:	440b      	add	r3, r1
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	0092      	lsls	r2, r2, #2
 8000c22:	3204      	adds	r2, #4
 8000c24:	6839      	ldr	r1, [r7, #0]
 8000c26:	440a      	add	r2, r1
 8000c28:	7812      	ldrb	r2, [r2, #0]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.Kp[i],&buf,1);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	333c      	adds	r3, #60	; 0x3c
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	7a3a      	ldrb	r2, [r7, #8]
 8000c3a:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	ddd3      	ble.n	8000bf0 <_ZN9MotorCtrl5setKpEPh+0x10>
	}
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_ZN9MotorCtrl5setKiEPh>:

inline void MotorCtrl::setKi(uint8_t usb_msg[]){
 8000c56:	b480      	push	{r7}
 8000c58:	b085      	sub	sp, #20
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e028      	b.n	8000cb8 <_ZN9MotorCtrl5setKiEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	061a      	lsls	r2, r3, #24
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	3302      	adds	r3, #2
 8000c7a:	6839      	ldr	r1, [r7, #0]
 8000c7c:	440b      	add	r3, r1
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	041b      	lsls	r3, r3, #16
 8000c82:	431a      	orrs	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	3303      	adds	r3, #3
 8000c8a:	6839      	ldr	r1, [r7, #0]
 8000c8c:	440b      	add	r3, r1
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	4313      	orrs	r3, r2
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	0092      	lsls	r2, r2, #2
 8000c98:	3204      	adds	r2, #4
 8000c9a:	6839      	ldr	r1, [r7, #0]
 8000c9c:	440a      	add	r2, r1
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.Ki[i],&buf,1);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3344      	adds	r3, #68	; 0x44
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	7a3a      	ldrb	r2, [r7, #8]
 8000cb0:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b07      	cmp	r3, #7
 8000cbc:	ddd3      	ble.n	8000c66 <_ZN9MotorCtrl5setKiEPh+0x10>
	}
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_ZN9MotorCtrl5setKdEPh>:

inline void MotorCtrl::setKd(uint8_t usb_msg[]){
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	e028      	b.n	8000d2e <_ZN9MotorCtrl5setKdEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	061a      	lsls	r2, r3, #24
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	3302      	adds	r3, #2
 8000cf0:	6839      	ldr	r1, [r7, #0]
 8000cf2:	440b      	add	r3, r1
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	041b      	lsls	r3, r3, #16
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	3303      	adds	r3, #3
 8000d00:	6839      	ldr	r1, [r7, #0]
 8000d02:	440b      	add	r3, r1
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	3204      	adds	r2, #4
 8000d10:	6839      	ldr	r1, [r7, #0]
 8000d12:	440a      	add	r2, r1
 8000d14:	7812      	ldrb	r2, [r2, #0]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.Kp[i],&buf,1);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	333c      	adds	r3, #60	; 0x3c
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	7a3a      	ldrb	r2, [r7, #8]
 8000d26:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	ddd3      	ble.n	8000cdc <_ZN9MotorCtrl5setKdEPh+0x10>
	}
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <usb_process>:
void usb_to_can(uint8_t usb_msg[], const uint8_t len);
void robomaster(uint8_t usb_msg[], const uint8_t len);

// it process  all usb messages
void usb_process(uint8_t usb_msg[], const uint8_t len)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]
    ... : some data
    */

    // if you want to add new command, you can add it here
    // attention: it is called in interrupt, so it should be short
    switch (usb_msg[0] >> 4)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d010      	beq.n	8000d7e <usb_process+0x3a>
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	dc13      	bgt.n	8000d88 <usb_process+0x44>
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <usb_process+0x26>
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d006      	beq.n	8000d76 <usb_process+0x32>
    case 0x03: //robomaster_set_parameter
    {
    	robomaster(usb_msg, len);
    }
    default:
        break;
 8000d68:	e00e      	b.n	8000d88 <usb_process+0x44>
        usb_to_can(usb_msg, len);
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f888 	bl	8000e84 <_Z10usb_to_canPhh>
    break;
 8000d74:	e009      	b.n	8000d8a <usb_process+0x46>
        CDC_Transmit_FS(HelloSLCAN_encoded, 11 + 2);
 8000d76:	210d      	movs	r1, #13
 8000d78:	4806      	ldr	r0, [pc, #24]	; (8000d94 <usb_process+0x50>)
 8000d7a:	f00a fcb1 	bl	800b6e0 <CDC_Transmit_FS>
    	robomaster(usb_msg, len);
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	4619      	mov	r1, r3
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f8f0 	bl	8000f68 <_Z10robomasterPhh>
        break;
 8000d88:	bf00      	nop
    }
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000000 	.word	0x20000000

08000d98 <can_process>:

// it process all can messages
// the Data is used for USB buffer. can_process set header information to Data[0~5].
// It is a terrible code. Sorry for hard work to read the code.
void can_process(const CAN_RxHeaderTypeDef *RxHeader, uint8_t Data[])
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
    uint8_t id[4] : can id
    uint8_t dlc : data length
    uint8_t data[8] : data (it is pre-writtten.)
    */

    if (RxHeader->IDE == CAN_ID_STD)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d11e      	bne.n	8000de8 <can_process+0x50>
    {
        // standard id
        Data[1] = (RxHeader->StdId >> 24) & 0xFF;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	0e1a      	lsrs	r2, r3, #24
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	701a      	strb	r2, [r3, #0]
        Data[2] = (RxHeader->StdId >> 16) & 0xFF;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	0c1a      	lsrs	r2, r3, #16
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	701a      	strb	r2, [r3, #0]
        Data[3] = (RxHeader->StdId >> 8) & 0xFF;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	0a1a      	lsrs	r2, r3, #8
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	3303      	adds	r3, #3
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	701a      	strb	r2, [r3, #0]
        Data[4] = (RxHeader->StdId >> 0) & 0xFF;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	3304      	adds	r3, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	701a      	strb	r2, [r3, #0]

        // is_extended not set
        Data[0] = 0x00;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e01d      	b.n	8000e24 <can_process+0x8c>
    }
    else
    {
        // extended id
        Data[1] = (RxHeader->ExtId >> 24) & 0xFF;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	0e1a      	lsrs	r2, r3, #24
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	701a      	strb	r2, [r3, #0]
        Data[2] = (RxHeader->ExtId >> 16) & 0xFF;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	0c1a      	lsrs	r2, r3, #16
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	3302      	adds	r3, #2
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	701a      	strb	r2, [r3, #0]
        Data[3] = (RxHeader->ExtId >> 8) & 0xFF;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	0a1a      	lsrs	r2, r3, #8
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	3303      	adds	r3, #3
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	701a      	strb	r2, [r3, #0]
        Data[4] = (RxHeader->ExtId >> 0) & 0xFF;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	701a      	strb	r2, [r3, #0]

        // is_extended set
        Data[0] = 0x1 << 1;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	2202      	movs	r2, #2
 8000e22:	701a      	strb	r2, [r3, #0]
    }

    // is_rtr
    if (RxHeader->RTR == CAN_RTR_REMOTE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d106      	bne.n	8000e3a <can_process+0xa2>
    {
        Data[0] |= 0x1 << 2;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	701a      	strb	r2, [r3, #0]

    // is_error
    //?

    // dlc
    Data[5] = RxHeader->DLC;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	691a      	ldr	r2, [r3, #16]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	3305      	adds	r3, #5
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	701a      	strb	r2, [r3, #0]

    // encode data
    uint8_t encoded_data[14 + 2];

    cobs_encode(Data, encoded_data, 14);
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	220e      	movs	r2, #14
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	f7ff fdd8 	bl	8000a04 <cobs_encode>
    led_on(green);
 8000e54:	2001      	movs	r0, #1
 8000e56:	f000 f8c7 	bl	8000fe8 <led_on>
    if (CDC_Transmit_FS(encoded_data, 14 + 2) == USBD_OK)
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	2110      	movs	r1, #16
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00a fc3d 	bl	800b6e0 <CDC_Transmit_FS>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf0c      	ite	eq
 8000e6c:	2301      	moveq	r3, #1
 8000e6e:	2300      	movne	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <can_process+0xe4>
    {
        led_on(green);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 f8b6 	bl	8000fe8 <led_on>
    }
    else
    {
        // transmit fail
    }
}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_Z10usb_to_canPhh>:

CAN_TxHeaderTypeDef TxHeader;
uint32_t TxMailbox;
// it process usb messages to normal can messages
void usb_to_can(uint8_t usb_msg[], const uint8_t len)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
    uint8_t command & frame_type: (command: if it is normal can frame, it is 0x00.)<<4 | is_rtr << 2 | is_extended << 1 | is_error
    uint8_t id[4] : can id
    uint8_t dlc : data length
    uint8_t data[8] : data
    */
    if (usb_msg[0] & 0x02)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d018      	beq.n	8000ece <_Z10usb_to_canPhh+0x4a>
    {
        // extended id
        TxHeader.IDE = CAN_ID_EXT;
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <_Z10usb_to_canPhh+0xd8>)
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	609a      	str	r2, [r3, #8]
        TxHeader.ExtId = (usb_msg[1] << 24) | (usb_msg[2] << 16) | (usb_msg[3] << 8) | (usb_msg[4] << 0);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	061a      	lsls	r2, r3, #24
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3302      	adds	r3, #2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	041b      	lsls	r3, r3, #16
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3303      	adds	r3, #3
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	021b      	lsls	r3, r3, #8
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	3204      	adds	r2, #4
 8000ec2:	7812      	ldrb	r2, [r2, #0]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <_Z10usb_to_canPhh+0xd8>)
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	e017      	b.n	8000efe <_Z10usb_to_canPhh+0x7a>
    }
    else
    {
        // standard id
        TxHeader.IDE = CAN_ID_STD;
 8000ece:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <_Z10usb_to_canPhh+0xd8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
        TxHeader.StdId = (usb_msg[1] << 24) | (usb_msg[2] << 16) | (usb_msg[3] << 8) | (usb_msg[4] << 0);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	061a      	lsls	r2, r3, #24
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3302      	adds	r3, #2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	041b      	lsls	r3, r3, #16
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3303      	adds	r3, #3
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	3204      	adds	r2, #4
 8000ef4:	7812      	ldrb	r2, [r2, #0]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <_Z10usb_to_canPhh+0xd8>)
 8000efc:	601a      	str	r2, [r3, #0]
    }

    // is_rtr
    if (usb_msg[0] & 0x04)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <_Z10usb_to_canPhh+0x8e>
    {
        TxHeader.RTR = CAN_RTR_REMOTE;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <_Z10usb_to_canPhh+0xd8>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	e002      	b.n	8000f18 <_Z10usb_to_canPhh+0x94>
    }
    else
    {
        TxHeader.RTR = CAN_RTR_DATA;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <_Z10usb_to_canPhh+0xd8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
    }

    // is_error
    //?

    TxHeader.TransmitGlobalTime = DISABLE;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_Z10usb_to_canPhh+0xd8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	751a      	strb	r2, [r3, #20]
    // dlc
    TxHeader.DLC = usb_msg[5];
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3305      	adds	r3, #5
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <_Z10usb_to_canPhh+0xd8>)
 8000f28:	611a      	str	r2, [r3, #16]

    if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan))
 8000f2a:	480d      	ldr	r0, [pc, #52]	; (8000f60 <_Z10usb_to_canPhh+0xdc>)
 8000f2c:	f001 fbc7 	bl	80026be <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf14      	ite	ne
 8000f36:	2301      	movne	r3, #1
 8000f38:	2300      	moveq	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d009      	beq.n	8000f54 <_Z10usb_to_canPhh+0xd0>
    {
        led_on(can);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 f851 	bl	8000fe8 <led_on>
        HAL_CAN_AddTxMessage(&hcan, &TxHeader, usb_msg + 6, &TxMailbox);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	1d9a      	adds	r2, r3, #6
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <_Z10usb_to_canPhh+0xe0>)
 8000f4c:	4903      	ldr	r1, [pc, #12]	; (8000f5c <_Z10usb_to_canPhh+0xd8>)
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <_Z10usb_to_canPhh+0xdc>)
 8000f50:	f001 fae5 	bl	800251e <HAL_CAN_AddTxMessage>
    }
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200001f8 	.word	0x200001f8
 8000f60:	20000214 	.word	0x20000214
 8000f64:	20000210 	.word	0x20000210

08000f68 <_Z10robomasterPhh>:

void robomaster(uint8_t usb_msg[], const uint8_t len){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
	// data structure
	/*
	uint8_t command & prosess_id: (command: if it is normal can frame,
	uint8_t data[8or9or32] : data
    */
	switch (usb_msg[0] & 0x0f){
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f003 030f 	and.w	r3, r3, #15
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d82d      	bhi.n	8000fdc <_Z10robomasterPhh+0x74>
 8000f80:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <_Z10robomasterPhh+0x20>)
 8000f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f86:	bf00      	nop
 8000f88:	08000fa1 	.word	0x08000fa1
 8000f8c:	08000fab 	.word	0x08000fab
 8000f90:	08000fb5 	.word	0x08000fb5
 8000f94:	08000fbf 	.word	0x08000fbf
 8000f98:	08000fc9 	.word	0x08000fc9
 8000f9c:	08000fd3 	.word	0x08000fd3
	case 0x00:{
		motor.setMode(usb_msg);
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <_Z10robomasterPhh+0x7c>)
 8000fa4:	f7ff fd6c 	bl	8000a80 <_ZN9MotorCtrl7setModeEPh>
		break;
 8000fa8:	e018      	b.n	8000fdc <_Z10robomasterPhh+0x74>
	}case 0x01:{
		motor.setTemp(usb_msg);
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <_Z10robomasterPhh+0x7c>)
 8000fae:	f7ff fdbd 	bl	8000b2c <_ZN9MotorCtrl7setTempEPh>
		break;
 8000fb2:	e013      	b.n	8000fdc <_Z10robomasterPhh+0x74>
	}case 0x02:{
		motor.setTarget(usb_msg);
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <_Z10robomasterPhh+0x7c>)
 8000fb8:	f7ff fdd7 	bl	8000b6a <_ZN9MotorCtrl9setTargetEPh>
		break;
 8000fbc:	e00e      	b.n	8000fdc <_Z10robomasterPhh+0x74>
	}case 0x03:{
		motor.setKp(usb_msg);
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <_Z10robomasterPhh+0x7c>)
 8000fc2:	f7ff fe0d 	bl	8000be0 <_ZN9MotorCtrl5setKpEPh>
		break;
 8000fc6:	e009      	b.n	8000fdc <_Z10robomasterPhh+0x74>
	}case 0x04:{
		motor.setKi(usb_msg);
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <_Z10robomasterPhh+0x7c>)
 8000fcc:	f7ff fe43 	bl	8000c56 <_ZN9MotorCtrl5setKiEPh>
		break;
 8000fd0:	e004      	b.n	8000fdc <_Z10robomasterPhh+0x74>
	}case 0x05:{
		motor.setKd(usb_msg);
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <_Z10robomasterPhh+0x7c>)
 8000fd6:	f7ff fe79 	bl	8000ccc <_ZN9MotorCtrl5setKdEPh>
	}
	}
}
 8000fda:	e7ff      	b.n	8000fdc <_Z10robomasterPhh+0x74>
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000288 	.word	0x20000288

08000fe8 <led_on>:
        {LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 0, 0},
        {LED_RED_GPIO_Port, LED_RED_Pin, 0, 0},
};

void led_on(led name)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
    // if the led is off.
    if (led_list[name].is_high == 0)
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <led_on+0x60>)
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	4413      	add	r3, r2
 8000ffa:	330c      	adds	r3, #12
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d11e      	bne.n	8001040 <led_on+0x58>
    {
        HAL_GPIO_WritePin(led_list[name].gpio, led_list[name].pin, GPIO_PIN_SET);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4a10      	ldr	r2, [pc, #64]	; (8001048 <led_on+0x60>)
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <led_on+0x60>)
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4413      	add	r3, r2
 8001014:	3304      	adds	r3, #4
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	2201      	movs	r2, #1
 800101a:	4619      	mov	r1, r3
 800101c:	f002 f9a0 	bl	8003360 <HAL_GPIO_WritePin>
        led_list[name].before_tick = HAL_GetTick();
 8001020:	79fc      	ldrb	r4, [r7, #7]
 8001022:	f001 f867 	bl	80020f4 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <led_on+0x60>)
 800102a:	0123      	lsls	r3, r4, #4
 800102c:	440b      	add	r3, r1
 800102e:	3308      	adds	r3, #8
 8001030:	601a      	str	r2, [r3, #0]
        led_list[name].is_high = 1;
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <led_on+0x60>)
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	4413      	add	r3, r2
 800103a:	330c      	adds	r3, #12
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
    }
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	20000010 	.word	0x20000010

0800104c <led_process>:

void led_process(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_LIST_SIZE; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	e02d      	b.n	80010b4 <led_process+0x68>
    {
        if (led_list[i].is_high && ((HAL_GetTick() - led_list[i].before_tick) > LED_INTERVAL))
 8001058:	4a1a      	ldr	r2, [pc, #104]	; (80010c4 <led_process+0x78>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	4413      	add	r3, r2
 8001060:	330c      	adds	r3, #12
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d022      	beq.n	80010ae <led_process+0x62>
 8001068:	f001 f844 	bl	80020f4 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	4915      	ldr	r1, [pc, #84]	; (80010c4 <led_process+0x78>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	440b      	add	r3, r1
 8001076:	3308      	adds	r3, #8
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001080:	d915      	bls.n	80010ae <led_process+0x62>
        {
            HAL_GPIO_WritePin(led_list[i].gpio, led_list[i].pin, GPIO_PIN_RESET);
 8001082:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <led_process+0x78>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	4413      	add	r3, r2
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <led_process+0x78>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	4413      	add	r3, r2
 8001094:	3304      	adds	r3, #4
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	f002 f960 	bl	8003360 <HAL_GPIO_WritePin>
            led_list[i].is_high = 0;
 80010a0:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <led_process+0x78>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	330c      	adds	r3, #12
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < LED_LIST_SIZE; i++)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3301      	adds	r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	ddce      	ble.n	8001058 <led_process+0xc>
        }
    }
}
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000010 	.word	0x20000010

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ce:	f000 ffb7 	bl	8002040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d2:	f000 f841 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d6:	f000 f945 	bl	8001364 <MX_GPIO_Init>
  MX_CAN_Init();
 80010da:	f000 f899 	bl	8001210 <MX_CAN_Init>
  MX_TIM3_Init();
 80010de:	f000 f8cd 	bl	800127c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80010e2:	f00a f985 	bl	800b3f0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  led_on(green);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f7ff ff7e 	bl	8000fe8 <led_on>
  led_on(yellow);
 80010ec:	2002      	movs	r0, #2
 80010ee:	f7ff ff7b 	bl	8000fe8 <led_on>
  led_on(red);
 80010f2:	2003      	movs	r0, #3
 80010f4:	f7ff ff78 	bl	8000fe8 <led_on>
  led_on(can);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff ff75 	bl	8000fe8 <led_on>
  CAN_FilterTypeDef filter;
  filter.FilterIdHigh         = 0;                        // フィルターID(上�?16ビッ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
  filter.FilterIdLow          = 0;                        // フィルターID(下�?16ビッ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
  filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上�?16ビッ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下�?16ビッ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 800110e:	2301      	movs	r3, #1
 8001110:	61fb      	str	r3, [r7, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  filter.FilterBank           = 0;                        // フィルターバンクNo
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモー????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 800111e:	230e      	movs	r3, #14
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  filter.FilterActivation     = ENABLE;                   // フィルター無効?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��有効
 8001122:	2301      	movs	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
  if(HAL_CAN_ConfigFilter(&hcan, &filter)!=HAL_OK ){
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	480a      	ldr	r0, [pc, #40]	; (8001154 <main+0x8c>)
 800112c:	f001 f8e9 	bl	8002302 <HAL_CAN_ConfigFilter>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <main+0x72>
    Error_Handler();
 8001136:	f000 f98d 	bl	8001454 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK){
 800113a:	2102      	movs	r1, #2
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <main+0x8c>)
 800113e:	f001 fc15 	bl	800296c <HAL_CAN_ActivateNotification>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <main+0x84>
    Error_Handler();
 8001148:	f000 f984 	bl	8001454 <Error_Handler>
  }

  main_cpp();
 800114c:	f000 fb10 	bl	8001770 <main_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001150:	e7fe      	b.n	8001150 <main+0x88>
 8001152:	bf00      	nop
 8001154:	20000214 	.word	0x20000214

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b09c      	sub	sp, #112	; 0x70
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001162:	2228      	movs	r2, #40	; 0x28
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f00a fede 	bl	800bf28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2234      	movs	r2, #52	; 0x34
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f00a fed0 	bl	800bf28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001188:	2301      	movs	r3, #1
 800118a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001190:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001196:	2301      	movs	r3, #1
 8001198:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fde0 	bl	8004d74 <HAL_RCC_OscConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011ba:	f000 f94b 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011be:	230f      	movs	r3, #15
 80011c0:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c2:	2302      	movs	r3, #2
 80011c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011d8:	2102      	movs	r1, #2
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fe08 	bl	8005df0 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011e6:	f000 f935 	bl	8001454 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 ffe0 	bl	80061bc <HAL_RCCEx_PeriphCLKConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001202:	f000 f927 	bl	8001454 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3770      	adds	r7, #112	; 0x70
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_CAN_Init+0x64>)
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <MX_CAN_Init+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_CAN_Init+0x64>)
 800121c:	2202      	movs	r2, #2
 800121e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_CAN_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_CAN_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_CAN_Init+0x64>)
 800122e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001232:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_CAN_Init+0x64>)
 8001236:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800123a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <MX_CAN_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_CAN_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MX_CAN_Init+0x64>)
 800124a:	2201      	movs	r2, #1
 800124c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_CAN_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_CAN_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_CAN_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_CAN_Init+0x64>)
 8001262:	f000 ff53 	bl	800210c <HAL_CAN_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800126c:	f000 f8f2 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000214 	.word	0x20000214
 8001278:	40006400 	.word	0x40006400

0800127c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <MX_TIM3_Init+0xe0>)
 80012b0:	4a2b      	ldr	r2, [pc, #172]	; (8001360 <MX_TIM3_Init+0xe4>)
 80012b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <MX_TIM3_Init+0xe0>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b28      	ldr	r3, [pc, #160]	; (800135c <MX_TIM3_Init+0xe0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 35999;
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <MX_TIM3_Init+0xe0>)
 80012c2:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80012c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <MX_TIM3_Init+0xe0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <MX_TIM3_Init+0xe0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012d4:	4821      	ldr	r0, [pc, #132]	; (800135c <MX_TIM3_Init+0xe0>)
 80012d6:	f005 f903 	bl	80064e0 <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012e0:	f000 f8b8 	bl	8001454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	4619      	mov	r1, r3
 80012f0:	481a      	ldr	r0, [pc, #104]	; (800135c <MX_TIM3_Init+0xe0>)
 80012f2:	f005 fc43 	bl	8006b7c <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012fc:	f000 f8aa 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001300:	4816      	ldr	r0, [pc, #88]	; (800135c <MX_TIM3_Init+0xe0>)
 8001302:	f005 f9a7 	bl	8006654 <HAL_TIM_PWM_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800130c:	f000 f8a2 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	480f      	ldr	r0, [pc, #60]	; (800135c <MX_TIM3_Init+0xe0>)
 8001320:	f006 f8e0 	bl	80074e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800132a:	f000 f893 	bl	8001454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132e:	2360      	movs	r3, #96	; 0x60
 8001330:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_TIM3_Init+0xe0>)
 8001346:	f005 fb05 	bl	8006954 <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001350:	f000 f880 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3738      	adds	r7, #56	; 0x38
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000023c 	.word	0x2000023c
 8001360:	40000400 	.word	0x40000400

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <MX_GPIO_Init+0xe8>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a33      	ldr	r2, [pc, #204]	; (800144c <MX_GPIO_Init+0xe8>)
 8001380:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001384:	6153      	str	r3, [r2, #20]
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <MX_GPIO_Init+0xe8>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <MX_GPIO_Init+0xe8>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	4a2d      	ldr	r2, [pc, #180]	; (800144c <MX_GPIO_Init+0xe8>)
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	6153      	str	r3, [r2, #20]
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <MX_GPIO_Init+0xe8>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <MX_GPIO_Init+0xe8>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4a27      	ldr	r2, [pc, #156]	; (800144c <MX_GPIO_Init+0xe8>)
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b4:	6153      	str	r3, [r2, #20]
 80013b6:	4b25      	ldr	r3, [pc, #148]	; (800144c <MX_GPIO_Init+0xe8>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f001 ffc8 	bl	8003360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	21f0      	movs	r1, #240	; 0xf0
 80013d4:	481e      	ldr	r0, [pc, #120]	; (8001450 <MX_GPIO_Init+0xec>)
 80013d6:	f001 ffc3 	bl	8003360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EMS_Pin */
  GPIO_InitStruct.Pin = EMS_Pin;
 80013da:	2302      	movs	r3, #2
 80013dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013e4:	2302      	movs	r3, #2
 80013e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f2:	f001 fe23 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 80013f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001412:	f001 fe13 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin LED_GREEN_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 8001416:	23f0      	movs	r3, #240	; 0xf0
 8001418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	4619      	mov	r1, r3
 800142c:	4808      	ldr	r0, [pc, #32]	; (8001450 <MX_GPIO_Init+0xec>)
 800142e:	f001 fe05 	bl	800303c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2007      	movs	r0, #7
 8001438:	f001 fdc9 	bl	8002fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800143c:	2007      	movs	r0, #7
 800143e:	f001 fde2 	bl	8003006 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001442:	bf00      	nop
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	48000400 	.word	0x48000400

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	4801      	ldr	r0, [pc, #4]	; (8001468 <Error_Handler+0x14>)
 8001462:	f001 ff7d 	bl	8003360 <HAL_GPIO_WritePin>
 8001466:	e7f9      	b.n	800145c <Error_Handler+0x8>
 8001468:	48000400 	.word	0x48000400

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_MspInit+0x44>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_MspInit+0x44>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6193      	str	r3, [r2, #24]
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_MspInit+0x44>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_MspInit+0x44>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_MspInit+0x44>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_MspInit+0x44>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <HAL_CAN_MspInit+0x8c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d130      	bne.n	8001538 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_CAN_MspInit+0x90>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_CAN_MspInit+0x90>)
 80014dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_CAN_MspInit+0x90>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_CAN_MspInit+0x90>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	4a14      	ldr	r2, [pc, #80]	; (8001544 <HAL_CAN_MspInit+0x90>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6153      	str	r3, [r2, #20]
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_CAN_MspInit+0x90>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001506:	f44f 7340 	mov.w	r3, #768	; 0x300
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001518:	2309      	movs	r3, #9
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4809      	ldr	r0, [pc, #36]	; (8001548 <HAL_CAN_MspInit+0x94>)
 8001524:	f001 fd8a 	bl	800303c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 1, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2101      	movs	r1, #1
 800152c:	2014      	movs	r0, #20
 800152e:	f001 fd4e 	bl	8002fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001532:	2014      	movs	r0, #20
 8001534:	f001 fd67 	bl	8003006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40006400 	.word	0x40006400
 8001544:	40021000 	.word	0x40021000
 8001548:	48000400 	.word	0x48000400

0800154c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <HAL_TIM_Base_MspInit+0x44>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d113      	bne.n	8001586 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_TIM_Base_MspInit+0x48>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <HAL_TIM_Base_MspInit+0x48>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_TIM_Base_MspInit+0x48>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2102      	movs	r1, #2
 800157a:	201d      	movs	r0, #29
 800157c:	f001 fd27 	bl	8002fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001580:	201d      	movs	r0, #29
 8001582:	f001 fd40 	bl	8003006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40000400 	.word	0x40000400
 8001594:	40021000 	.word	0x40021000

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800159c:	e7fe      	b.n	800159c <NMI_Handler+0x4>

0800159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MemManage_Handler+0x4>

080015aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e4:	f000 fd72 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 80015f0:	2002      	movs	r0, #2
 80015f2:	f001 fecd 	bl	8003390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001602:	f001 f9d9 	bl	80029b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000214 	.word	0x20000214

08001610 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <TIM3_IRQHandler+0x10>)
 8001616:	f005 f87e 	bl	8006716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000023c 	.word	0x2000023c

08001624 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <USB_LP_IRQHandler+0x10>)
 800162a:	f001 ffc1 	bl	80035b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20001130 	.word	0x20001130

08001638 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <_ZN10MotorParamC1Ev>:
struct MotorParam{
 800165c:	b5b0      	push	{r4, r5, r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	2320      	movs	r3, #32
 800166a:	461a      	mov	r2, r3
 800166c:	2100      	movs	r1, #0
 800166e:	f00a fc5b 	bl	800bf28 <memset>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3320      	adds	r3, #32
 8001676:	2220      	movs	r2, #32
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f00a fc54 	bl	800bf28 <memset>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3340      	adds	r3, #64	; 0x40
 8001684:	2220      	movs	r2, #32
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f00a fc4d 	bl	800bf28 <memset>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a26      	ldr	r2, [pc, #152]	; (800172c <_ZN10MotorParamC1Ev+0xd0>)
 8001692:	649a      	str	r2, [r3, #72]	; 0x48
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3360      	adds	r3, #96	; 0x60
 8001698:	2220      	movs	r2, #32
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f00a fc43 	bl	800bf28 <memset>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3380      	adds	r3, #128	; 0x80
 80016a6:	2220      	movs	r2, #32
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f00a fc3c 	bl	800bf28 <memset>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	33a0      	adds	r3, #160	; 0xa0
 80016b4:	2220      	movs	r2, #32
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f00a fc35 	bl	800bf28 <memset>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	33c0      	adds	r3, #192	; 0xc0
 80016c2:	2220      	movs	r2, #32
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f00a fc2e 	bl	800bf28 <memset>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	33e0      	adds	r3, #224	; 0xe0
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a15      	ldr	r2, [pc, #84]	; (8001730 <_ZN10MotorParamC1Ev+0xd4>)
 80016da:	33e8      	adds	r3, #232	; 0xe8
 80016dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <_ZN10MotorParamC1Ev+0xd8>)
 80016e8:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80016ec:	4615      	mov	r5, r2
 80016ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001700:	2220      	movs	r2, #32
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f00a fc0f 	bl	800bf28 <memset>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <_ZN10MotorParamC1Ev+0xdc>)
 800170e:	f503 7498 	add.w	r4, r3, #304	; 0x130
 8001712:	4615      	mov	r5, r2
 8001714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001718:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800171c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bdb0      	pop	{r4, r5, r7, pc}
 800172a:	bf00      	nop
 800172c:	4148f5c3 	.word	0x4148f5c3
 8001730:	0800bf98 	.word	0x0800bf98
 8001734:	0800bfa0 	.word	0x0800bfa0
 8001738:	0800bfc0 	.word	0x0800bfc0

0800173c <_ZN9MotorCtrlC1Ev>:
class MotorCtrl{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff88 	bl	800165c <_ZN10MotorParamC1Ev>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <main_cpp>:

CAN_TxHeaderTypeDef TxHeader1;
CAN_TxHeaderTypeDef TxHeader2;

void main_cpp()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
	TxHeader1.IDE = CAN_ID_STD;
 8001776:	4b3d      	ldr	r3, [pc, #244]	; (800186c <main_cpp+0xfc>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
	TxHeader1.RTR = CAN_RTR_DATA;
 800177c:	4b3b      	ldr	r3, [pc, #236]	; (800186c <main_cpp+0xfc>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
	TxHeader1.StdId = 0x200;
 8001782:	4b3a      	ldr	r3, [pc, #232]	; (800186c <main_cpp+0xfc>)
 8001784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001788:	601a      	str	r2, [r3, #0]
	TxHeader1.DLC = 8;
 800178a:	4b38      	ldr	r3, [pc, #224]	; (800186c <main_cpp+0xfc>)
 800178c:	2208      	movs	r2, #8
 800178e:	611a      	str	r2, [r3, #16]
	TxHeader1.TransmitGlobalTime = DISABLE;
 8001790:	4b36      	ldr	r3, [pc, #216]	; (800186c <main_cpp+0xfc>)
 8001792:	2200      	movs	r2, #0
 8001794:	751a      	strb	r2, [r3, #20]
	TxHeader2.IDE = CAN_ID_STD;
 8001796:	4b36      	ldr	r3, [pc, #216]	; (8001870 <main_cpp+0x100>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 800179c:	4b34      	ldr	r3, [pc, #208]	; (8001870 <main_cpp+0x100>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x1ff;
 80017a2:	4b33      	ldr	r3, [pc, #204]	; (8001870 <main_cpp+0x100>)
 80017a4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80017a8:	601a      	str	r2, [r3, #0]
	TxHeader2.DLC = 8;
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <main_cpp+0x100>)
 80017ac:	2208      	movs	r2, #8
 80017ae:	611a      	str	r2, [r3, #16]
	TxHeader2.TransmitGlobalTime = DISABLE;
 80017b0:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <main_cpp+0x100>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	751a      	strb	r2, [r3, #20]

	HAL_CAN_Start(&hcan);
 80017b6:	482f      	ldr	r0, [pc, #188]	; (8001874 <main_cpp+0x104>)
 80017b8:	f000 fe6d 	bl	8002496 <HAL_CAN_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 80017bc:	482e      	ldr	r0, [pc, #184]	; (8001878 <main_cpp+0x108>)
 80017be:	f004 fee7 	bl	8006590 <HAL_TIM_Base_Start_IT>

	uint8_t debug_state = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	71fb      	strb	r3, [r7, #7]
	while (true)
	{
		if (READ_BIT(CAN->MSR, CAN_MSR_INAK) == 1)
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <main_cpp+0x10c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	bf0c      	ite	eq
 80017d2:	2301      	moveq	r3, #1
 80017d4:	2300      	movne	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <main_cpp+0x7e>
		{
			// can start
			CLEAR_BIT(CAN->MCR, CAN_MCR_INRQ);
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <main_cpp+0x10c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a26      	ldr	r2, [pc, #152]	; (800187c <main_cpp+0x10c>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	6013      	str	r3, [r2, #0]
			led_on(green);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f7ff fbfd 	bl	8000fe8 <led_on>
		}
		if (debug_state == 0)
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d126      	bne.n	8001842 <main_cpp+0xd2>
		{
			switch (hUsbDeviceFS.dev_state)
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <main_cpp+0x110>)
 80017f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80017fa:	3b01      	subs	r3, #1
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d832      	bhi.n	8001866 <main_cpp+0xf6>
 8001800:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <main_cpp+0x98>)
 8001802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001806:	bf00      	nop
 8001808:	08001819 	.word	0x08001819
 800180c:	08001821 	.word	0x08001821
 8001810:	08001837 	.word	0x08001837
 8001814:	08001829 	.word	0x08001829
			{
			case USBD_STATE_DEFAULT:
				led_on(red);
 8001818:	2003      	movs	r0, #3
 800181a:	f7ff fbe5 	bl	8000fe8 <led_on>
				break;
 800181e:	e022      	b.n	8001866 <main_cpp+0xf6>
			case USBD_STATE_ADDRESSED:
				led_on(yellow);
 8001820:	2002      	movs	r0, #2
 8001822:	f7ff fbe1 	bl	8000fe8 <led_on>
				break;
 8001826:	e01e      	b.n	8001866 <main_cpp+0xf6>
			case USBD_STATE_SUSPENDED:
				led_on(yellow);
 8001828:	2002      	movs	r0, #2
 800182a:	f7ff fbdd 	bl	8000fe8 <led_on>
				led_on(red);
 800182e:	2003      	movs	r0, #3
 8001830:	f7ff fbda 	bl	8000fe8 <led_on>
				break;
 8001834:	e017      	b.n	8001866 <main_cpp+0xf6>
			case USBD_STATE_CONFIGURED:
				led_on(green);
 8001836:	2001      	movs	r0, #1
 8001838:	f7ff fbd6 	bl	8000fe8 <led_on>
				debug_state = 1;
 800183c:	2301      	movs	r3, #1
 800183e:	71fb      	strb	r3, [r7, #7]
				break;
 8001840:	e011      	b.n	8001866 <main_cpp+0xf6>
			}
		}
		else if (debug_state == 1)
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d10e      	bne.n	8001866 <main_cpp+0xf6>
		{
			switch (hcan.ErrorCode)
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <main_cpp+0x104>)
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	2b20      	cmp	r3, #32
 800184e:	d005      	beq.n	800185c <main_cpp+0xec>
 8001850:	2b80      	cmp	r3, #128	; 0x80
 8001852:	d107      	bne.n	8001864 <main_cpp+0xf4>
			{
			case HAL_CAN_ERROR_BD: // bit dominant error
				led_on(red);
 8001854:	2003      	movs	r0, #3
 8001856:	f7ff fbc7 	bl	8000fe8 <led_on>
				break;
 800185a:	e004      	b.n	8001866 <main_cpp+0xf6>
			case HAL_CAN_ERROR_ACK: // acknowledge error
				led_on(yellow);
 800185c:	2002      	movs	r0, #2
 800185e:	f7ff fbc3 	bl	8000fe8 <led_on>
				break;
 8001862:	e000      	b.n	8001866 <main_cpp+0xf6>
			default:
				break;
 8001864:	bf00      	nop
			}
		}

		led_process(); //turn off all led
 8001866:	f7ff fbf1 	bl	800104c <led_process>
		if (READ_BIT(CAN->MSR, CAN_MSR_INAK) == 1)
 800186a:	e7ac      	b.n	80017c6 <main_cpp+0x56>
 800186c:	200003f0 	.word	0x200003f0
 8001870:	20000408 	.word	0x20000408
 8001874:	20000214 	.word	0x20000214
 8001878:	2000023c 	.word	0x2000023c
 800187c:	40006400 	.word	0x40006400
 8001880:	20000428 	.word	0x20000428

08001884 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d107      	bne.n	80018a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189a:	4293      	cmp	r3, r2
 800189c:	d102      	bne.n	80018a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
MotorCtrl motor;
 800189e:	4803      	ldr	r0, [pc, #12]	; (80018ac <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80018a0:	f7ff ff4c 	bl	800173c <_ZN9MotorCtrlC1Ev>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000288 	.word	0x20000288

080018b0 <_GLOBAL__sub_I_motor>:
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7ff ffe3 	bl	8001884 <_Z41__static_initialization_and_destruction_0ii>
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_ZN9MotorCtrl9changeVelEt>:
inline float MotorCtrl::changeVel(uint16_t data){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
	float vel1 = 0.0;
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
	if(data < 0x8000){
 80018d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db1a      	blt.n	8001910 <_ZN9MotorCtrl9changeVelEt+0x50>
		vel1 = data*3.141592/60.0;
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fdc5 	bl	800046c <__aeabi_i2d>
 80018e2:	a31f      	add	r3, pc, #124	; (adr r3, 8001960 <_ZN9MotorCtrl9changeVelEt+0xa0>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7fe fe2a 	bl	8000540 <__aeabi_dmul>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <_ZN9MotorCtrl9changeVelEt+0xa8>)
 80018fa:	f7fe ff4b 	bl	8000794 <__aeabi_ddiv>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4610      	mov	r0, r2
 8001904:	4619      	mov	r1, r3
 8001906:	f7ff f82d 	bl	8000964 <__aeabi_d2f>
 800190a:	4603      	mov	r3, r0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	e01d      	b.n	800194c <_ZN9MotorCtrl9changeVelEt+0x8c>
		data =~ data;
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	43db      	mvns	r3, r3
 8001914:	807b      	strh	r3, [r7, #2]
		vel1 = -1*data*3.141592/60.0;
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	425b      	negs	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fda6 	bl	800046c <__aeabi_i2d>
 8001920:	a30f      	add	r3, pc, #60	; (adr r3, 8001960 <_ZN9MotorCtrl9changeVelEt+0xa0>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	f7fe fe0b 	bl	8000540 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <_ZN9MotorCtrl9changeVelEt+0xa8>)
 8001938:	f7fe ff2c 	bl	8000794 <__aeabi_ddiv>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f80e 	bl	8000964 <__aeabi_d2f>
 8001948:	4603      	mov	r3, r0
 800194a:	60fb      	str	r3, [r7, #12]
	return vel1;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	ee07 3a90 	vmov	s15, r3
}
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	f3af 8000 	nop.w
 8001960:	fc8b007a 	.word	0xfc8b007a
 8001964:	400921fa 	.word	0x400921fa
 8001968:	404e0000 	.word	0x404e0000
 800196c:	00000000 	.word	0x00000000

08001970 <_ZN9MotorCtrl6updateEmPh>:
inline bool MotorCtrl::update(uint32_t ReceiveID,uint8_t receiveData[8]){
 8001970:	b5b0      	push	{r4, r5, r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
	if(ReceiveID<0x201||ReceiveID>0x208){return false;}
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001982:	d903      	bls.n	800198c <_ZN9MotorCtrl6updateEmPh+0x1c>
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800198a:	d901      	bls.n	8001990 <_ZN9MotorCtrl6updateEmPh+0x20>
 800198c:	2300      	movs	r3, #0
 800198e:	e10f      	b.n	8001bb0 <_ZN9MotorCtrl6updateEmPh+0x240>
		= static_cast<float>((static_cast<uint16_t>(receiveData[0]) << 8) | receiveData[1])*360/8191;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	3201      	adds	r2, #1
 800199a:	7812      	ldrb	r2, [r2, #0]
 800199c:	4313      	orrs	r3, r2
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a6:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001bc0 <_ZN9MotorCtrl6updateEmPh+0x250>
 80019aa:	ee27 7a87 	vmul.f32	s14, s15, s14
	MotorCtrl::param.mechanical_angle[ReceiveID-0x201]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
		= static_cast<float>((static_cast<uint16_t>(receiveData[0]) << 8) | receiveData[1])*360/8191;
 80019b4:	eddf 6a83 	vldr	s13, [pc, #524]	; 8001bc4 <_ZN9MotorCtrl6updateEmPh+0x254>
 80019b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	3320      	adds	r3, #32
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	edc3 7a00 	vstr	s15, [r3]
		= changeVel((static_cast<uint16_t>(receiveData[2]) << 8) | receiveData[3]);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3302      	adds	r3, #2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3303      	adds	r3, #3
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b21b      	sxth	r3, r3
 80019da:	4313      	orrs	r3, r2
 80019dc:	b21b      	sxth	r3, r3
 80019de:	b29a      	uxth	r2, r3
	MotorCtrl::param.velocity[ReceiveID-0x201]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f2a3 2401 	subw	r4, r3, #513	; 0x201
		= changeVel((static_cast<uint16_t>(receiveData[2]) << 8) | receiveData[3]);
 80019e6:	4611      	mov	r1, r2
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff ff69 	bl	80018c0 <_ZN9MotorCtrl9changeVelEt>
 80019ee:	eef0 7a40 	vmov.f32	s15, s0
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	edc3 7a00 	vstr	s15, [r3]
		= static_cast<float>((static_cast<uint16_t>(receiveData[4]) << 8) | receiveData[5]);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3304      	adds	r3, #4
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	3205      	adds	r2, #5
 8001a0c:	7812      	ldrb	r2, [r2, #0]
 8001a0e:	431a      	orrs	r2, r3
	MotorCtrl::param.current[ReceiveID-0x201]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f2a3 2301 	subw	r3, r3, #513	; 0x201
		= static_cast<float>((static_cast<uint16_t>(receiveData[4]) << 8) | receiveData[5]);
 8001a16:	ee07 2a90 	vmov	s15, r2
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	3330      	adds	r3, #48	; 0x30
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	edc3 7a00 	vstr	s15, [r3]
	MotorCtrl::param.temp[ReceiveID-0x201] = receiveData[6];
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	7991      	ldrb	r1, [r2, #6]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	460a      	mov	r2, r1
 8001a3a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	if(param.mode[ReceiveID-0x201]==Mode::vel){
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f2a3 2201 	subw	r2, r3, #513	; 0x201
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	f040 80af 	bne.w	8001bae <_ZN9MotorCtrl6updateEmPh+0x23e>
		e = param.target[ReceiveID-0x201] - param.velocity[ReceiveID-0x201];
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	3310      	adds	r3, #16
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	ed93 7a00 	vldr	s14, [r3]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	3328      	adds	r3, #40	; 0x28
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
		param.gool[ReceiveID-0x201] = param.gool[ReceiveID-0x201]+param.Kp[ReceiveID-0x201]*e+param.Ki[ReceiveID-0x201]*(e+param.e_pre[ReceiveID-0x201])*0.001/2+param.Kd[ReceiveID-0x201]*(e-param.e_pre[ReceiveID-0x201])/0.001;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	3308      	adds	r3, #8
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	ed93 7a00 	vldr	s14, [r3]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	333c      	adds	r3, #60	; 0x3c
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	edd3 6a00 	vldr	s13, [r3]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8001aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab0:	ee17 0a90 	vmov	r0, s15
 8001ab4:	f7fe fcec 	bl	8000490 <__aeabi_f2d>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	3344      	adds	r3, #68	; 0x44
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	ed93 7a00 	vldr	s14, [r3]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	3318      	adds	r3, #24
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aee:	ee17 0a90 	vmov	r0, s15
 8001af2:	f7fe fccd 	bl	8000490 <__aeabi_f2d>
 8001af6:	a330      	add	r3, pc, #192	; (adr r3, 8001bb8 <_ZN9MotorCtrl6updateEmPh+0x248>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7fe fd20 	bl	8000540 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b10:	f7fe fe40 	bl	8000794 <__aeabi_ddiv>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fb5a 	bl	80001d4 <__adddf3>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4614      	mov	r4, r2
 8001b26:	461d      	mov	r5, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	334c      	adds	r3, #76	; 0x4c
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	ed93 7a00 	vldr	s14, [r3]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	3318      	adds	r3, #24
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5a:	ee17 0a90 	vmov	r0, s15
 8001b5e:	f7fe fc97 	bl	8000490 <__aeabi_f2d>
 8001b62:	a315      	add	r3, pc, #84	; (adr r3, 8001bb8 <_ZN9MotorCtrl6updateEmPh+0x248>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fe14 	bl	8000794 <__aeabi_ddiv>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4620      	mov	r0, r4
 8001b72:	4629      	mov	r1, r5
 8001b74:	f7fe fb2e 	bl	80001d4 <__adddf3>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f2a3 2401 	subw	r4, r3, #513	; 0x201
 8001b86:	f7fe feed 	bl	8000964 <__aeabi_d2f>
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	f104 0308 	add.w	r3, r4, #8
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	6019      	str	r1, [r3, #0]
		param.e_pre[ReceiveID-0x201] = e;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
 8001ba4:	68f9      	ldr	r1, [r7, #12]
 8001ba6:	3318      	adds	r3, #24
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	601a      	str	r2, [r3, #0]
	return true;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bbc:	3f50624d 	.word	0x3f50624d
 8001bc0:	43b40000 	.word	0x43b40000
 8001bc4:	45fff800 	.word	0x45fff800

08001bc8 <HAL_CAN_RxFifo0MsgPendingCallback>:
extern CAN_TxHeaderTypeDef TxHeader2;
extern uint32_t TxMailbox;
extern CAN_HandleTypeDef hcan;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08e      	sub	sp, #56	; 0x38
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
    */
    uint8_t Data[14];
    CAN_RxHeaderTypeDef RxHeader;
    // the Data is used for USB buffer. can_process set header infomation to Data[0~5].
    // It is a terrible code. Sorry for hard work to read the code.
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Data + 6) == HAL_OK)
 8001bd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd4:	3306      	adds	r3, #6
 8001bd6:	f107 020c 	add.w	r2, r7, #12
 8001bda:	2100      	movs	r1, #0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fda3 	bl	8002728 <HAL_CAN_GetRxMessage>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d020      	beq.n	8001c34 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
    {
    	if(motor.update(RxHeader.StdId,Data + 6)){
 8001bf2:	68f9      	ldr	r1, [r7, #12]
 8001bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf8:	3306      	adds	r3, #6
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	480f      	ldr	r0, [pc, #60]	; (8001c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001bfe:	f7ff feb7 	bl	8001970 <_ZN9MotorCtrl6updateEmPh>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00d      	beq.n	8001c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
    		if(motor.diag == 1){can_process(&RxHeader, Data);}
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001c0a:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d110      	bne.n	8001c34 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8001c12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff f8bb 	bl	8000d98 <can_process>
    	}else{
    		can_process(&RxHeader, Data);
    	}
    }
}
 8001c22:	e007      	b.n	8001c34 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
    		can_process(&RxHeader, Data);
 8001c24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f8b2 	bl	8000d98 <can_process>
}
 8001c34:	bf00      	nop
 8001c36:	3738      	adds	r7, #56	; 0x38
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000288 	.word	0x20000288

08001c40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EMS_Pin){
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d118      	bne.n	8001c82 <HAL_GPIO_EXTI_Callback+0x42>
		led_on(red);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f7ff f9c9 	bl	8000fe8 <led_on>
		if(HAL_GPIO_ReadPin(EMS_GPIO_Port, EMS_Pin)){
 8001c56:	2102      	movs	r1, #2
 8001c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5c:	f001 fb68 	bl	8003330 <HAL_GPIO_ReadPin>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d004      	beq.n	8001c7a <HAL_GPIO_EXTI_Callback+0x3a>
	        static uint8_t HelloSLCAN_encoded[] = {0x03, 0x02 << 4,'H', 0x00};
	        CDC_Transmit_FS(HelloSLCAN_encoded, 2 + 2);
 8001c70:	2104      	movs	r1, #4
 8001c72:	4806      	ldr	r0, [pc, #24]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001c74:	f009 fd34 	bl	800b6e0 <CDC_Transmit_FS>
		}else{
	        static uint8_t HelloSLCAN_encoded[] = {0x03, 0x02 << 4,'L', 0x00};
	        CDC_Transmit_FS(HelloSLCAN_encoded, 2 + 2);
		}
	}
}
 8001c78:	e003      	b.n	8001c82 <HAL_GPIO_EXTI_Callback+0x42>
	        CDC_Transmit_FS(HelloSLCAN_encoded, 2 + 2);
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <HAL_GPIO_EXTI_Callback+0x50>)
 8001c7e:	f009 fd2f 	bl	800b6e0 <CDC_Transmit_FS>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000054 	.word	0x20000054
 8001c90:	20000058 	.word	0x20000058

08001c94 <changeValue>:

uint16_t changeValue(float target){
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t value;
	if(target < 0.0){
 8001c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001caa:	d528      	bpl.n	8001cfe <changeValue+0x6a>
		target = -target;
 8001cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb0:	eef1 7a67 	vneg.f32	s15, s15
 8001cb4:	edc7 7a01 	vstr	s15, [r7, #4]
		if(target < 20.0){
 8001cb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cbc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc8:	d512      	bpl.n	8001cf0 <changeValue+0x5c>
			value = target/20*16384;
 8001cca:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cce:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001d44 <changeValue+0xb0>
 8001cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce2:	ee17 3a90 	vmov	r3, s15
 8001ce6:	81fb      	strh	r3, [r7, #14]
			value =~ value;
 8001ce8:	89fb      	ldrh	r3, [r7, #14]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	81fb      	strh	r3, [r7, #14]
 8001cee:	e022      	b.n	8001d36 <changeValue+0xa2>
		}else{
			value = 16384;
 8001cf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cf4:	81fb      	strh	r3, [r7, #14]
			value =~ value;
 8001cf6:	89fb      	ldrh	r3, [r7, #14]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	81fb      	strh	r3, [r7, #14]
 8001cfc:	e01b      	b.n	8001d36 <changeValue+0xa2>
		}
	}else{
		if(target < 20.0){
 8001cfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d02:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	d50f      	bpl.n	8001d30 <changeValue+0x9c>
			value = target/20*16384;
 8001d10:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d14:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d1c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001d44 <changeValue+0xb0>
 8001d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d28:	ee17 3a90 	vmov	r3, s15
 8001d2c:	81fb      	strh	r3, [r7, #14]
 8001d2e:	e002      	b.n	8001d36 <changeValue+0xa2>
		}else{
			value = 16384;
 8001d30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d34:	81fb      	strh	r3, [r7, #14]
		}
	}
	return value;
 8001d36:	89fb      	ldrh	r3, [r7, #14]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	46800000 	.word	0x46800000

08001d48 <_ZN9MotorCtrl9transmit1Ev>:

void MotorCtrl::transmit1(){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	for(int i=0;i<4;i++){
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	e03a      	b.n	8001dcc <_ZN9MotorCtrl9transmit1Ev+0x84>
		if(motor.param.temp[i] < motor.param.limitTemp[i]){
 8001d56:	4a2c      	ldr	r2, [pc, #176]	; (8001e08 <_ZN9MotorCtrl9transmit1Ev+0xc0>)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	33e0      	adds	r3, #224	; 0xe0
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	4929      	ldr	r1, [pc, #164]	; (8001e08 <_ZN9MotorCtrl9transmit1Ev+0xc0>)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	440b      	add	r3, r1
 8001d66:	33e8      	adds	r3, #232	; 0xe8
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d22b      	bcs.n	8001dc6 <_ZN9MotorCtrl9transmit1Ev+0x7e>
			value1[2*i] = static_cast<uint8_t>(changeValue(param.gool[i]) >> 8);
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3308      	adds	r3, #8
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d80:	f7ff ff88 	bl	8001c94 <changeValue>
 8001d84:	4603      	mov	r3, r0
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	b2d1      	uxtb	r1, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	460a      	mov	r2, r1
 8001d96:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
			value1[2*i+1] = static_cast<uint8_t>(changeValue(param.gool[i]) & 0xFF);
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dac:	f7ff ff72 	bl	8001c94 <changeValue>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	3301      	adds	r3, #1
 8001dba:	b2d1      	uxtb	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
	for(int i=0;i<4;i++){
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	ddc1      	ble.n	8001d56 <_ZN9MotorCtrl9transmit1Ev+0xe>
		}
	}
	if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan))
 8001dd2:	480e      	ldr	r0, [pc, #56]	; (8001e0c <_ZN9MotorCtrl9transmit1Ev+0xc4>)
 8001dd4:	f000 fc73 	bl	80026be <HAL_CAN_GetTxMailboxesFreeLevel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	bf14      	ite	ne
 8001dde:	2301      	movne	r3, #1
 8001de0:	2300      	moveq	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <_ZN9MotorCtrl9transmit1Ev+0xb6>
	    {
	        led_on(can);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff f8fd 	bl	8000fe8 <led_on>
	        HAL_CAN_AddTxMessage(&hcan, &TxHeader1, value1, &TxMailbox);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f503 72ab 	add.w	r2, r3, #342	; 0x156
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <_ZN9MotorCtrl9transmit1Ev+0xc8>)
 8001df6:	4907      	ldr	r1, [pc, #28]	; (8001e14 <_ZN9MotorCtrl9transmit1Ev+0xcc>)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <_ZN9MotorCtrl9transmit1Ev+0xc4>)
 8001dfa:	f000 fb90 	bl	800251e <HAL_CAN_AddTxMessage>
	    }
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000288 	.word	0x20000288
 8001e0c:	20000214 	.word	0x20000214
 8001e10:	20000210 	.word	0x20000210
 8001e14:	200003f0 	.word	0x200003f0

08001e18 <_ZN9MotorCtrl9transmit2Ev>:

void MotorCtrl::transmit2(){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	for(int i=4;i<8;i++){
 8001e20:	2304      	movs	r3, #4
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e030      	b.n	8001e88 <_ZN9MotorCtrl9transmit2Ev+0x70>
			value2[2*(i-4)] = static_cast<uint8_t>(changeValue(param.gool[i]) >> 8);
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	eeb0 0a67 	vmov.f32	s0, s15
 8001e38:	f7ff ff2c 	bl	8001c94 <changeValue>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3b04      	subs	r3, #4
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	b2d1      	uxtb	r1, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	460a      	mov	r2, r1
 8001e50:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
			value2[2*(i-4)+1] = static_cast<uint8_t>(changeValue(param.gool[i]) & 0xFF);
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3308      	adds	r3, #8
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	eeb0 0a67 	vmov.f32	s0, s15
 8001e66:	f7ff ff15 	bl	8001c94 <changeValue>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3b04      	subs	r3, #4
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	3301      	adds	r3, #1
 8001e76:	b2d1      	uxtb	r1, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	460a      	mov	r2, r1
 8001e7e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	for(int i=4;i<8;i++){
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3301      	adds	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b07      	cmp	r3, #7
 8001e8c:	ddcb      	ble.n	8001e26 <_ZN9MotorCtrl9transmit2Ev+0xe>
		}
	if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan))
 8001e8e:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <_ZN9MotorCtrl9transmit2Ev+0xac>)
 8001e90:	f000 fc15 	bl	80026be <HAL_CAN_GetTxMailboxesFreeLevel>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf14      	ite	ne
 8001e9a:	2301      	movne	r3, #1
 8001e9c:	2300      	moveq	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <_ZN9MotorCtrl9transmit2Ev+0xa2>
	    {
	        led_on(can);
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff f89f 	bl	8000fe8 <led_on>
	        HAL_CAN_AddTxMessage(&hcan, &TxHeader2, value2, &TxMailbox);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f503 72af 	add.w	r2, r3, #350	; 0x15e
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <_ZN9MotorCtrl9transmit2Ev+0xb0>)
 8001eb2:	4906      	ldr	r1, [pc, #24]	; (8001ecc <_ZN9MotorCtrl9transmit2Ev+0xb4>)
 8001eb4:	4803      	ldr	r0, [pc, #12]	; (8001ec4 <_ZN9MotorCtrl9transmit2Ev+0xac>)
 8001eb6:	f000 fb32 	bl	800251e <HAL_CAN_AddTxMessage>
	    }
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000214 	.word	0x20000214
 8001ec8:	20000210 	.word	0x20000210
 8001ecc:	20000408 	.word	0x20000408

08001ed0 <_ZN9MotorCtrl3emsEv>:

void MotorCtrl::ems(){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	uint8_t value3[8] = {0,0,0,0,0,0,0,0};
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <_ZN9MotorCtrl3emsEv+0x40>)
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee2:	e883 0003 	stmia.w	r3, {r0, r1}
	led_on(can);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff f87e 	bl	8000fe8 <led_on>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader1, value3, &TxMailbox);
 8001eec:	f107 0208 	add.w	r2, r7, #8
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <_ZN9MotorCtrl3emsEv+0x44>)
 8001ef2:	4909      	ldr	r1, [pc, #36]	; (8001f18 <_ZN9MotorCtrl3emsEv+0x48>)
 8001ef4:	4809      	ldr	r0, [pc, #36]	; (8001f1c <_ZN9MotorCtrl3emsEv+0x4c>)
 8001ef6:	f000 fb12 	bl	800251e <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader2, value3, &TxMailbox);
 8001efa:	f107 0208 	add.w	r2, r7, #8
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <_ZN9MotorCtrl3emsEv+0x44>)
 8001f00:	4907      	ldr	r1, [pc, #28]	; (8001f20 <_ZN9MotorCtrl3emsEv+0x50>)
 8001f02:	4806      	ldr	r0, [pc, #24]	; (8001f1c <_ZN9MotorCtrl3emsEv+0x4c>)
 8001f04:	f000 fb0b 	bl	800251e <HAL_CAN_AddTxMessage>
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	0800bfe0 	.word	0x0800bfe0
 8001f14:	20000210 	.word	0x20000210
 8001f18:	200003f0 	.word	0x200003f0
 8001f1c:	20000214 	.word	0x20000214
 8001f20:	20000408 	.word	0x20000408

08001f24 <_ZN9MotorCtrl5resetEv>:

void MotorCtrl::reset(){
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	for(int i = 0;i<8;i++){
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	e025      	b.n	8001f7e <_ZN9MotorCtrl5resetEv+0x5a>
		value1[i]=0;
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
		value2[i]=0;
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
		param.target[i]=0;
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3310      	adds	r3, #16
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
		param.mode[i]=Mode::dis;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	2100      	movs	r1, #0
 8001f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		param.gool[i]=0;
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
	for(int i = 0;i<8;i++){
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b07      	cmp	r3, #7
 8001f82:	ddd6      	ble.n	8001f32 <_ZN9MotorCtrl5resetEv+0xe>
	}
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d119      	bne.n	8001fda <HAL_TIM_PeriodElapsedCallback+0x46>
	//TIM_ClearITPendingBit(TIM3, TIM_IT_CC4);
		if(HAL_GPIO_ReadPin(EMS_GPIO_Port, EMS_Pin)){
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fac:	f001 f9c0 	bl	8003330 <HAL_GPIO_ReadPin>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <HAL_TIM_PeriodElapsedCallback+0x3a>
			motor.transmit1();
 8001fc0:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001fc2:	f7ff fec1 	bl	8001d48 <_ZN9MotorCtrl9transmit1Ev>
			motor.transmit2();
 8001fc6:	4808      	ldr	r0, [pc, #32]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001fc8:	f7ff ff26 	bl	8001e18 <_ZN9MotorCtrl9transmit2Ev>
		}else{
			motor.ems();
			motor.reset();
		}
	}
}
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_PeriodElapsedCallback+0x46>
			motor.ems();
 8001fce:	4806      	ldr	r0, [pc, #24]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001fd0:	f7ff ff7e 	bl	8001ed0 <_ZN9MotorCtrl3emsEv>
			motor.reset();
 8001fd4:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001fd6:	f7ff ffa5 	bl	8001f24 <_ZN9MotorCtrl5resetEv>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	20000288 	.word	0x20000288

08001fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002024 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ff0:	f7ff fb22 	bl	8001638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ff6:	490d      	ldr	r1, [pc, #52]	; (800202c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <LoopForever+0xe>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ffc:	e002      	b.n	8002004 <LoopCopyDataInit>

08001ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002002:	3304      	adds	r3, #4

08002004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002008:	d3f9      	bcc.n	8001ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800200c:	4c0a      	ldr	r4, [pc, #40]	; (8002038 <LoopForever+0x16>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002010:	e001      	b.n	8002016 <LoopFillZerobss>

08002012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002014:	3204      	adds	r2, #4

08002016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002018:	d3fb      	bcc.n	8002012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800201a:	f009 ff8d 	bl	800bf38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800201e:	f7ff f853 	bl	80010c8 <main>

08002022 <LoopForever>:

LoopForever:
    b LoopForever
 8002022:	e7fe      	b.n	8002022 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002024:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800202c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002030:	0800c05c 	.word	0x0800c05c
  ldr r2, =_sbss
 8002034:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002038:	2000163c 	.word	0x2000163c

0800203c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800203c:	e7fe      	b.n	800203c <ADC1_2_IRQHandler>
	...

08002040 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_Init+0x28>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_Init+0x28>)
 800204a:	f043 0310 	orr.w	r3, r3, #16
 800204e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002050:	2003      	movs	r0, #3
 8002052:	f000 ffb1 	bl	8002fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002056:	200f      	movs	r0, #15
 8002058:	f000 f808 	bl	800206c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800205c:	f7ff fa06 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40022000 	.word	0x40022000

0800206c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x54>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_InitTick+0x58>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002082:	fbb3 f3f1 	udiv	r3, r3, r1
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f000 ffc9 	bl	8003022 <HAL_SYSTICK_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e00e      	b.n	80020b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b0f      	cmp	r3, #15
 800209e:	d80a      	bhi.n	80020b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a0:	2200      	movs	r2, #0
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f000 ff91 	bl	8002fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ac:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <HAL_InitTick+0x5c>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000050 	.word	0x20000050
 80020c4:	20000060 	.word	0x20000060
 80020c8:	2000005c 	.word	0x2000005c

080020cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x20>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x24>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <HAL_IncTick+0x24>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000060 	.word	0x20000060
 80020f0:	20000420 	.word	0x20000420

080020f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_GetTick+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000420 	.word	0x20000420

0800210c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0ed      	b.n	80022fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff f9c2 	bl	80014b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002140:	f7ff ffd8 	bl	80020f4 <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002146:	e012      	b.n	800216e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002148:	f7ff ffd4 	bl	80020f4 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b0a      	cmp	r3, #10
 8002154:	d90b      	bls.n	800216e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2205      	movs	r2, #5
 8002166:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0c5      	b.n	80022fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0e5      	beq.n	8002148 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0202 	bic.w	r2, r2, #2
 800218a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800218c:	f7ff ffb2 	bl	80020f4 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002192:	e012      	b.n	80021ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002194:	f7ff ffae 	bl	80020f4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b0a      	cmp	r3, #10
 80021a0:	d90b      	bls.n	80021ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2205      	movs	r2, #5
 80021b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e09f      	b.n	80022fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1e5      	bne.n	8002194 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7e1b      	ldrb	r3, [r3, #24]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d108      	bne.n	80021e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e007      	b.n	80021f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7e5b      	ldrb	r3, [r3, #25]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e007      	b.n	800221c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800221a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7e9b      	ldrb	r3, [r3, #26]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d108      	bne.n	8002236 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0220 	orr.w	r2, r2, #32
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e007      	b.n	8002246 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0220 	bic.w	r2, r2, #32
 8002244:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7edb      	ldrb	r3, [r3, #27]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0210 	bic.w	r2, r2, #16
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e007      	b.n	8002270 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0210 	orr.w	r2, r2, #16
 800226e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7f1b      	ldrb	r3, [r3, #28]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d108      	bne.n	800228a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0208 	orr.w	r2, r2, #8
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	e007      	b.n	800229a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0208 	bic.w	r2, r2, #8
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7f5b      	ldrb	r3, [r3, #29]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d108      	bne.n	80022b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0204 	orr.w	r2, r2, #4
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e007      	b.n	80022c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0204 	bic.w	r2, r2, #4
 80022c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	ea42 0103 	orr.w	r1, r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	1e5a      	subs	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002302:	b480      	push	{r7}
 8002304:	b087      	sub	sp, #28
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002318:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800231a:	7cfb      	ldrb	r3, [r7, #19]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d003      	beq.n	8002328 <HAL_CAN_ConfigFilter+0x26>
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b02      	cmp	r3, #2
 8002324:	f040 80aa 	bne.w	800247c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2201      	movs	r2, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	43db      	mvns	r3, r3
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d123      	bne.n	80023aa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43db      	mvns	r3, r3
 800236c:	401a      	ands	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002384:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3248      	adds	r2, #72	; 0x48
 800238a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800239e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a0:	6979      	ldr	r1, [r7, #20]
 80023a2:	3348      	adds	r3, #72	; 0x48
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d122      	bne.n	80023f8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3248      	adds	r2, #72	; 0x48
 80023d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023ee:	6979      	ldr	r1, [r7, #20]
 80023f0:	3348      	adds	r3, #72	; 0x48
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	43db      	mvns	r3, r3
 800240a:	401a      	ands	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002412:	e007      	b.n	8002424 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d109      	bne.n	8002440 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800243e:	e007      	b.n	8002450 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	431a      	orrs	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d107      	bne.n	8002468 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	431a      	orrs	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800246e:	f023 0201 	bic.w	r2, r3, #1
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	e006      	b.n	800248a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
  }
}
 800248a:	4618      	mov	r0, r3
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d12e      	bne.n	8002508 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024c2:	f7ff fe17 	bl	80020f4 <HAL_GetTick>
 80024c6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024c8:	e012      	b.n	80024f0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ca:	f7ff fe13 	bl	80020f4 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b0a      	cmp	r3, #10
 80024d6:	d90b      	bls.n	80024f0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2205      	movs	r2, #5
 80024e8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e012      	b.n	8002516 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1e5      	bne.n	80024ca <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e006      	b.n	8002516 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800251e:	b480      	push	{r7}
 8002520:	b089      	sub	sp, #36	; 0x24
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002532:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800253c:	7ffb      	ldrb	r3, [r7, #31]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d003      	beq.n	800254a <HAL_CAN_AddTxMessage+0x2c>
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	2b02      	cmp	r3, #2
 8002546:	f040 80ad 	bne.w	80026a4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800255a:	2b00      	cmp	r3, #0
 800255c:	d105      	bne.n	800256a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8095 	beq.w	8002694 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	0e1b      	lsrs	r3, r3, #24
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002574:	2201      	movs	r2, #1
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	409a      	lsls	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10d      	bne.n	80025a2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002590:	68f9      	ldr	r1, [r7, #12]
 8002592:	6809      	ldr	r1, [r1, #0]
 8002594:	431a      	orrs	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3318      	adds	r3, #24
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	440b      	add	r3, r1
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e00f      	b.n	80025c2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025ac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025b2:	68f9      	ldr	r1, [r7, #12]
 80025b4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025b6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3318      	adds	r3, #24
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	440b      	add	r3, r1
 80025c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3318      	adds	r3, #24
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	440b      	add	r3, r1
 80025d2:	3304      	adds	r3, #4
 80025d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	7d1b      	ldrb	r3, [r3, #20]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d111      	bne.n	8002602 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3318      	adds	r3, #24
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	4413      	add	r3, r2
 80025ea:	3304      	adds	r3, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	6811      	ldr	r1, [r2, #0]
 80025f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3318      	adds	r3, #24
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	440b      	add	r3, r1
 80025fe:	3304      	adds	r3, #4
 8002600:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3307      	adds	r3, #7
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	061a      	lsls	r2, r3, #24
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3306      	adds	r3, #6
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3305      	adds	r3, #5
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	4313      	orrs	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	3204      	adds	r2, #4
 8002622:	7812      	ldrb	r2, [r2, #0]
 8002624:	4610      	mov	r0, r2
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	6811      	ldr	r1, [r2, #0]
 800262a:	ea43 0200 	orr.w	r2, r3, r0
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	440b      	add	r3, r1
 8002634:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002638:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3303      	adds	r3, #3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	061a      	lsls	r2, r3, #24
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3302      	adds	r3, #2
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3301      	adds	r3, #1
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	4313      	orrs	r3, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	7812      	ldrb	r2, [r2, #0]
 800265a:	4610      	mov	r0, r2
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	6811      	ldr	r1, [r2, #0]
 8002660:	ea43 0200 	orr.w	r2, r3, r0
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	440b      	add	r3, r1
 800266a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800266e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3318      	adds	r3, #24
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	4413      	add	r3, r2
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	6811      	ldr	r1, [r2, #0]
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3318      	adds	r3, #24
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	440b      	add	r3, r1
 800268e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e00e      	b.n	80026b2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e006      	b.n	80026b2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80026d2:	7afb      	ldrb	r3, [r7, #11]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d002      	beq.n	80026de <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80026d8:	7afb      	ldrb	r3, [r7, #11]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d11d      	bne.n	800271a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3301      	adds	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3301      	adds	r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3301      	adds	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d003      	beq.n	800274c <HAL_CAN_GetRxMessage+0x24>
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	2b02      	cmp	r3, #2
 8002748:	f040 8103 	bne.w	8002952 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10e      	bne.n	8002770 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d116      	bne.n	800278e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0f7      	b.n	8002960 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0e8      	b.n	8002960 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	331b      	adds	r3, #27
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	4413      	add	r3, r2
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0204 	and.w	r2, r3, #4
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10c      	bne.n	80027c6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	331b      	adds	r3, #27
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	4413      	add	r3, r2
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0d5b      	lsrs	r3, r3, #21
 80027bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e00b      	b.n	80027de <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	331b      	adds	r3, #27
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	4413      	add	r3, r2
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	08db      	lsrs	r3, r3, #3
 80027d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	331b      	adds	r3, #27
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	4413      	add	r3, r2
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0202 	and.w	r2, r3, #2
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	331b      	adds	r3, #27
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	4413      	add	r3, r2
 8002800:	3304      	adds	r3, #4
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2208      	movs	r2, #8
 8002810:	611a      	str	r2, [r3, #16]
 8002812:	e00b      	b.n	800282c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	331b      	adds	r3, #27
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	4413      	add	r3, r2
 8002820:	3304      	adds	r3, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 020f 	and.w	r2, r3, #15
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	331b      	adds	r3, #27
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	4413      	add	r3, r2
 8002838:	3304      	adds	r3, #4
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	b2da      	uxtb	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	331b      	adds	r3, #27
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	4413      	add	r3, r2
 8002850:	3304      	adds	r3, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	4413      	add	r3, r2
 8002866:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	4413      	add	r3, r2
 800287c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	0a1a      	lsrs	r2, r3, #8
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	4413      	add	r3, r2
 8002896:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0c1a      	lsrs	r2, r3, #16
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	3302      	adds	r3, #2
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	0e1a      	lsrs	r2, r3, #24
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	3303      	adds	r3, #3
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	3304      	adds	r3, #4
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	0a1a      	lsrs	r2, r3, #8
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	3305      	adds	r3, #5
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0c1a      	lsrs	r2, r3, #16
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	3306      	adds	r3, #6
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	4413      	add	r3, r2
 8002916:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0e1a      	lsrs	r2, r3, #24
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	3307      	adds	r3, #7
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d108      	bne.n	800293e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0220 	orr.w	r2, r2, #32
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	e007      	b.n	800294e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0220 	orr.w	r2, r2, #32
 800294c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e006      	b.n	8002960 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800297c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d002      	beq.n	800298a <HAL_CAN_ActivateNotification+0x1e>
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d109      	bne.n	800299e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6959      	ldr	r1, [r3, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e006      	b.n	80029ac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
  }
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d07c      	beq.n	8002af8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d023      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f983 	bl	8002d26 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a20:	e016      	b.n	8002a50 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d004      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	e00c      	b.n	8002a50 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
 8002a48:	e002      	b.n	8002a50 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f989 	bl	8002d62 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d024      	beq.n	8002aa4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f963 	bl	8002d3a <HAL_CAN_TxMailbox1CompleteCallback>
 8002a74:	e016      	b.n	8002aa4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
 8002a88:	e00c      	b.n	8002aa4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9c:	e002      	b.n	8002aa4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f969 	bl	8002d76 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d024      	beq.n	8002af8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ab6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f943 	bl	8002d4e <HAL_CAN_TxMailbox2CompleteCallback>
 8002ac8:	e016      	b.n	8002af8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	e00c      	b.n	8002af8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d004      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	e002      	b.n	8002af8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f949 	bl	8002d8a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00c      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2210      	movs	r2, #16
 8002b1a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d006      	beq.n	8002b3e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2208      	movs	r2, #8
 8002b36:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f930 	bl	8002d9e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d009      	beq.n	8002b5c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff f836 	bl	8001bc8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00c      	beq.n	8002b80 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2208      	movs	r2, #8
 8002b9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f912 	bl	8002dc6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f8f9 	bl	8002db2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2210      	movs	r2, #16
 8002bda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f8fc 	bl	8002dda <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00b      	beq.n	8002c04 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8f5 	bl	8002dee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d07b      	beq.n	8002d06 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d072      	beq.n	8002cfe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d043      	beq.n	8002cfe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d03e      	beq.n	8002cfe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c86:	2b60      	cmp	r3, #96	; 0x60
 8002c88:	d02b      	beq.n	8002ce2 <HAL_CAN_IRQHandler+0x32a>
 8002c8a:	2b60      	cmp	r3, #96	; 0x60
 8002c8c:	d82e      	bhi.n	8002cec <HAL_CAN_IRQHandler+0x334>
 8002c8e:	2b50      	cmp	r3, #80	; 0x50
 8002c90:	d022      	beq.n	8002cd8 <HAL_CAN_IRQHandler+0x320>
 8002c92:	2b50      	cmp	r3, #80	; 0x50
 8002c94:	d82a      	bhi.n	8002cec <HAL_CAN_IRQHandler+0x334>
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d019      	beq.n	8002cce <HAL_CAN_IRQHandler+0x316>
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d826      	bhi.n	8002cec <HAL_CAN_IRQHandler+0x334>
 8002c9e:	2b30      	cmp	r3, #48	; 0x30
 8002ca0:	d010      	beq.n	8002cc4 <HAL_CAN_IRQHandler+0x30c>
 8002ca2:	2b30      	cmp	r3, #48	; 0x30
 8002ca4:	d822      	bhi.n	8002cec <HAL_CAN_IRQHandler+0x334>
 8002ca6:	2b10      	cmp	r3, #16
 8002ca8:	d002      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x2f8>
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d005      	beq.n	8002cba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cae:	e01d      	b.n	8002cec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	f043 0308 	orr.w	r3, r3, #8
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cb8:	e019      	b.n	8002cee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	f043 0310 	orr.w	r3, r3, #16
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cc2:	e014      	b.n	8002cee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	f043 0320 	orr.w	r3, r3, #32
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ccc:	e00f      	b.n	8002cee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cd6:	e00a      	b.n	8002cee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ce0:	e005      	b.n	8002cee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cea:	e000      	b.n	8002cee <HAL_CAN_IRQHandler+0x336>
            break;
 8002cec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699a      	ldr	r2, [r3, #24]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cfc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2204      	movs	r2, #4
 8002d04:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f872 	bl	8002e02 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3728      	adds	r7, #40	; 0x28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e34:	4013      	ands	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4a:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <__NVIC_SetPriorityGrouping+0x44>)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	60d3      	str	r3, [r2, #12]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <__NVIC_GetPriorityGrouping+0x18>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	f003 0307 	and.w	r3, r3, #7
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	db0b      	blt.n	8002ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	f003 021f 	and.w	r2, r3, #31
 8002e94:	4907      	ldr	r1, [pc, #28]	; (8002eb4 <__NVIC_EnableIRQ+0x38>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000e100 	.word	0xe000e100

08002eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	db0a      	blt.n	8002ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	490c      	ldr	r1, [pc, #48]	; (8002f04 <__NVIC_SetPriority+0x4c>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	440b      	add	r3, r1
 8002edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee0:	e00a      	b.n	8002ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	4908      	ldr	r1, [pc, #32]	; (8002f08 <__NVIC_SetPriority+0x50>)
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	3b04      	subs	r3, #4
 8002ef0:	0112      	lsls	r2, r2, #4
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	761a      	strb	r2, [r3, #24]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000e100 	.word	0xe000e100
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf28      	it	cs
 8002f2a:	2304      	movcs	r3, #4
 8002f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3304      	adds	r3, #4
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d902      	bls.n	8002f3c <NVIC_EncodePriority+0x30>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3b03      	subs	r3, #3
 8002f3a:	e000      	b.n	8002f3e <NVIC_EncodePriority+0x32>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	401a      	ands	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f54:	f04f 31ff 	mov.w	r1, #4294967295
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	43d9      	mvns	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f64:	4313      	orrs	r3, r2
         );
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3724      	adds	r7, #36	; 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f84:	d301      	bcc.n	8002f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00f      	b.n	8002faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <SysTick_Config+0x40>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f92:	210f      	movs	r1, #15
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f7ff ff8e 	bl	8002eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <SysTick_Config+0x40>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <SysTick_Config+0x40>)
 8002fa4:	2207      	movs	r2, #7
 8002fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	e000e010 	.word	0xe000e010

08002fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ff29 	bl	8002e18 <__NVIC_SetPriorityGrouping>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe0:	f7ff ff3e 	bl	8002e60 <__NVIC_GetPriorityGrouping>
 8002fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	6978      	ldr	r0, [r7, #20]
 8002fec:	f7ff ff8e 	bl	8002f0c <NVIC_EncodePriority>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff5d 	bl	8002eb8 <__NVIC_SetPriority>
}
 8002ffe:	bf00      	nop
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff31 	bl	8002e7c <__NVIC_EnableIRQ>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ffa2 	bl	8002f74 <SysTick_Config>
 8003030:	4603      	mov	r3, r0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800304a:	e154      	b.n	80032f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	2101      	movs	r1, #1
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	4013      	ands	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8146 	beq.w	80032f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d005      	beq.n	800307c <HAL_GPIO_Init+0x40>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d130      	bne.n	80030de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	2203      	movs	r2, #3
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4013      	ands	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b2:	2201      	movs	r2, #1
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	f003 0201 	and.w	r2, r3, #1
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d017      	beq.n	800311a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d123      	bne.n	800316e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	08da      	lsrs	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3208      	adds	r2, #8
 800312e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	220f      	movs	r2, #15
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	08da      	lsrs	r2, r3, #3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3208      	adds	r2, #8
 8003168:	6939      	ldr	r1, [r7, #16]
 800316a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	2203      	movs	r2, #3
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0203 	and.w	r2, r3, #3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80a0 	beq.w	80032f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b0:	4b58      	ldr	r3, [pc, #352]	; (8003314 <HAL_GPIO_Init+0x2d8>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	4a57      	ldr	r2, [pc, #348]	; (8003314 <HAL_GPIO_Init+0x2d8>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6193      	str	r3, [r2, #24]
 80031bc:	4b55      	ldr	r3, [pc, #340]	; (8003314 <HAL_GPIO_Init+0x2d8>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031c8:	4a53      	ldr	r2, [pc, #332]	; (8003318 <HAL_GPIO_Init+0x2dc>)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	3302      	adds	r3, #2
 80031d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031f2:	d019      	beq.n	8003228 <HAL_GPIO_Init+0x1ec>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a49      	ldr	r2, [pc, #292]	; (800331c <HAL_GPIO_Init+0x2e0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <HAL_GPIO_Init+0x1e8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a48      	ldr	r2, [pc, #288]	; (8003320 <HAL_GPIO_Init+0x2e4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00d      	beq.n	8003220 <HAL_GPIO_Init+0x1e4>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a47      	ldr	r2, [pc, #284]	; (8003324 <HAL_GPIO_Init+0x2e8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <HAL_GPIO_Init+0x1e0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a46      	ldr	r2, [pc, #280]	; (8003328 <HAL_GPIO_Init+0x2ec>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d101      	bne.n	8003218 <HAL_GPIO_Init+0x1dc>
 8003214:	2304      	movs	r3, #4
 8003216:	e008      	b.n	800322a <HAL_GPIO_Init+0x1ee>
 8003218:	2305      	movs	r3, #5
 800321a:	e006      	b.n	800322a <HAL_GPIO_Init+0x1ee>
 800321c:	2303      	movs	r3, #3
 800321e:	e004      	b.n	800322a <HAL_GPIO_Init+0x1ee>
 8003220:	2302      	movs	r3, #2
 8003222:	e002      	b.n	800322a <HAL_GPIO_Init+0x1ee>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_GPIO_Init+0x1ee>
 8003228:	2300      	movs	r3, #0
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	f002 0203 	and.w	r2, r2, #3
 8003230:	0092      	lsls	r2, r2, #2
 8003232:	4093      	lsls	r3, r2
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800323a:	4937      	ldr	r1, [pc, #220]	; (8003318 <HAL_GPIO_Init+0x2dc>)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	3302      	adds	r3, #2
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003248:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_GPIO_Init+0x2f0>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	43db      	mvns	r3, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800326c:	4a2f      	ldr	r2, [pc, #188]	; (800332c <HAL_GPIO_Init+0x2f0>)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003272:	4b2e      	ldr	r3, [pc, #184]	; (800332c <HAL_GPIO_Init+0x2f0>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	43db      	mvns	r3, r3
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003296:	4a25      	ldr	r2, [pc, #148]	; (800332c <HAL_GPIO_Init+0x2f0>)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_GPIO_Init+0x2f0>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032c0:	4a1a      	ldr	r2, [pc, #104]	; (800332c <HAL_GPIO_Init+0x2f0>)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c6:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_GPIO_Init+0x2f0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032ea:	4a10      	ldr	r2, [pc, #64]	; (800332c <HAL_GPIO_Init+0x2f0>)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	3301      	adds	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	f47f aea3 	bne.w	800304c <HAL_GPIO_Init+0x10>
  }
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40021000 	.word	0x40021000
 8003318:	40010000 	.word	0x40010000
 800331c:	48000400 	.word	0x48000400
 8003320:	48000800 	.word	0x48000800
 8003324:	48000c00 	.word	0x48000c00
 8003328:	48001000 	.word	0x48001000
 800332c:	40010400 	.word	0x40010400

08003330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	e001      	b.n	8003352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
 800336c:	4613      	mov	r3, r2
 800336e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003370:	787b      	ldrb	r3, [r7, #1]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800337c:	e002      	b.n	8003384 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d006      	beq.n	80033b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033a6:	4a05      	ldr	r2, [pc, #20]	; (80033bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe fc46 	bl	8001c40 <HAL_GPIO_EXTI_Callback>
  }
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40010400 	.word	0x40010400

080033c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c2:	b08b      	sub	sp, #44	; 0x2c
 80033c4:	af06      	add	r7, sp, #24
 80033c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e0c4      	b.n	800355c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f008 fab0 	bl	800b94c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2203      	movs	r2, #3
 80033f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f004 f91c 	bl	8007636 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	e040      	b.n	8003486 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	440b      	add	r3, r1
 8003414:	3301      	adds	r3, #1
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	440b      	add	r3, r1
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	440b      	add	r3, r1
 800343e:	3303      	adds	r3, #3
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	440b      	add	r3, r1
 8003452:	3338      	adds	r3, #56	; 0x38
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	440b      	add	r3, r1
 8003466:	333c      	adds	r3, #60	; 0x3c
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	3340      	adds	r3, #64	; 0x40
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	3301      	adds	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	d3b9      	bcc.n	8003404 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	e044      	b.n	8003520 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	440b      	add	r3, r1
 80034a4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	440b      	add	r3, r1
 80034ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034c2:	7bfa      	ldrb	r2, [r7, #15]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	440b      	add	r3, r1
 80034e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034ee:	7bfa      	ldrb	r2, [r7, #15]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	3301      	adds	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	7bfa      	ldrb	r2, [r7, #15]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	429a      	cmp	r2, r3
 8003528:	d3b5      	bcc.n	8003496 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	687e      	ldr	r6, [r7, #4]
 8003532:	466d      	mov	r5, sp
 8003534:	f106 0410 	add.w	r4, r6, #16
 8003538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800353a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	602b      	str	r3, [r5, #0]
 8003540:	1d33      	adds	r3, r6, #4
 8003542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003544:	6838      	ldr	r0, [r7, #0]
 8003546:	f004 f891 	bl	800766c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003564 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_PCD_Start+0x16>
 8003576:	2302      	movs	r3, #2
 8003578:	e016      	b.n	80035a8 <HAL_PCD_Start+0x44>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f004 f83e 	bl	8007608 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800358c:	2101      	movs	r1, #1
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f008 fc82 	bl	800be98 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f006 fafe 	bl	8009b9a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f006 faf7 	bl	8009bb0 <USB_ReadInterrupts>
 80035c2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fab2 	bl	8003b38 <PCD_EP_ISR_Handler>

    return;
 80035d4:	e0bd      	b.n	8003752 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f2:	b292      	uxth	r2, r2
 80035f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f008 fa50 	bl	800ba9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80035fe:	2100      	movs	r1, #0
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f8a9 	bl	8003758 <HAL_PCD_SetAddress>

    return;
 8003606:	e0a4      	b.n	8003752 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00c      	beq.n	800362c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800361a:	b29a      	uxth	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003624:	b292      	uxth	r2, r2
 8003626:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800362a:	e092      	b.n	8003752 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00c      	beq.n	8003650 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800363e:	b29a      	uxth	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003648:	b292      	uxth	r2, r2
 800364a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800364e:	e080      	b.n	8003752 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d027      	beq.n	80036aa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0204 	bic.w	r2, r2, #4
 800366c:	b292      	uxth	r2, r2
 800366e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0208 	bic.w	r2, r2, #8
 8003684:	b292      	uxth	r2, r2
 8003686:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f008 fa40 	bl	800bb10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003698:	b29a      	uxth	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036a2:	b292      	uxth	r2, r2
 80036a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80036a8:	e053      	b.n	8003752 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d027      	beq.n	8003704 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036bc:	b29a      	uxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	b292      	uxth	r2, r2
 80036c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036de:	b292      	uxth	r2, r2
 80036e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0204 	orr.w	r2, r2, #4
 80036f6:	b292      	uxth	r2, r2
 80036f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f008 f9ed 	bl	800badc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003702:	e026      	b.n	8003752 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00f      	beq.n	800372e <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003720:	b292      	uxth	r2, r2
 8003722:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f008 f9ab 	bl	800ba82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800372c:	e011      	b.n	8003752 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00c      	beq.n	8003752 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003740:	b29a      	uxth	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800374a:	b292      	uxth	r2, r2
 800374c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003750:	bf00      	nop
  }
}
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_PCD_SetAddress+0x1a>
 800376e:	2302      	movs	r3, #2
 8003770:	e013      	b.n	800379a <HAL_PCD_SetAddress+0x42>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f006 f9f1 	bl	8009b72 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	4608      	mov	r0, r1
 80037ac:	4611      	mov	r1, r2
 80037ae:	461a      	mov	r2, r3
 80037b0:	4603      	mov	r3, r0
 80037b2:	70fb      	strb	r3, [r7, #3]
 80037b4:	460b      	mov	r3, r1
 80037b6:	803b      	strh	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	da0e      	bge.n	80037e6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	4413      	add	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	705a      	strb	r2, [r3, #1]
 80037e4:	e00e      	b.n	8003804 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	f003 0207 	and.w	r2, r3, #7
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	4413      	add	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	b2da      	uxtb	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003810:	883a      	ldrh	r2, [r7, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	78ba      	ldrb	r2, [r7, #2]
 800381a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800381c:	78bb      	ldrb	r3, [r7, #2]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d102      	bne.n	8003828 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_PCD_EP_Open+0x94>
 8003832:	2302      	movs	r3, #2
 8003834:	e00e      	b.n	8003854 <HAL_PCD_EP_Open+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68f9      	ldr	r1, [r7, #12]
 8003844:	4618      	mov	r0, r3
 8003846:	f003 ff33 	bl	80076b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003852:	7afb      	ldrb	r3, [r7, #11]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386c:	2b00      	cmp	r3, #0
 800386e:	da0e      	bge.n	800388e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	705a      	strb	r2, [r3, #1]
 800388c:	e00e      	b.n	80038ac <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	f003 0207 	and.w	r2, r3, #7
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_PCD_EP_Close+0x6a>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e00e      	b.n	80038e4 <HAL_PCD_EP_Close+0x88>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68f9      	ldr	r1, [r7, #12]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f004 faaf 	bl	8007e38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	460b      	mov	r3, r1
 80038fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038fc:	7afb      	ldrb	r3, [r7, #11]
 80038fe:	f003 0207 	and.w	r2, r3, #7
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2200      	movs	r2, #0
 8003924:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800392c:	7afb      	ldrb	r3, [r7, #11]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	b2da      	uxtb	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6979      	ldr	r1, [r7, #20]
 800393e:	4618      	mov	r0, r3
 8003940:	f004 fc67 	bl	8008212 <USB_EPStartXfer>

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	f003 0207 	and.w	r2, r3, #7
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	440b      	add	r3, r1
 800396c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003970:	681b      	ldr	r3, [r3, #0]
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b086      	sub	sp, #24
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	460b      	mov	r3, r1
 800398c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800398e:	7afb      	ldrb	r3, [r7, #11]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2200      	movs	r2, #0
 80039c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2201      	movs	r2, #1
 80039c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ca:	7afb      	ldrb	r3, [r7, #11]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6979      	ldr	r1, [r7, #20]
 80039dc:	4618      	mov	r0, r3
 80039de:	f004 fc18 	bl	8008212 <USB_EPStartXfer>

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	f003 0207 	and.w	r2, r3, #7
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d901      	bls.n	8003a0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e03e      	b.n	8003a88 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	da0e      	bge.n	8003a30 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	705a      	strb	r2, [r3, #1]
 8003a2e:	e00c      	b.n	8003a4a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_PCD_EP_SetStall+0x7e>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e00e      	b.n	8003a88 <HAL_PCD_EP_SetStall+0x9c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68f9      	ldr	r1, [r7, #12]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f005 ff7b 	bl	8009974 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	f003 020f 	and.w	r2, r3, #15
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d901      	bls.n	8003aae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e040      	b.n	8003b30 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	da0e      	bge.n	8003ad4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	705a      	strb	r2, [r3, #1]
 8003ad2:	e00e      	b.n	8003af2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	f003 0207 	and.w	r2, r3, #7
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_PCD_EP_ClrStall+0x82>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e00e      	b.n	8003b30 <HAL_PCD_EP_ClrStall+0xa0>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68f9      	ldr	r1, [r7, #12]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f005 ff78 	bl	8009a16 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b096      	sub	sp, #88	; 0x58
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b40:	e3bf      	b.n	80042c2 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003b5c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f040 8179 	bne.w	8003e58 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d152      	bne.n	8003c18 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	81fb      	strh	r3, [r7, #14]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	89fb      	ldrh	r3, [r7, #14]
 8003b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3328      	adds	r3, #40	; 0x28
 8003b9a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	441a      	add	r2, r3
 8003bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f007 ff38 	bl	800ba4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 836b 	beq.w	80042c2 <PCD_EP_ISR_Handler+0x78a>
 8003bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f040 8366 	bne.w	80042c2 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b292      	uxth	r2, r2
 8003c0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c16:	e354      	b.n	80042c2 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c1e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d034      	beq.n	8003ca0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	3306      	adds	r3, #6
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c60:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c72:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	f005 fff1 	bl	8009c5c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c86:	4013      	ands	r3, r2
 8003c88:	823b      	strh	r3, [r7, #16]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	8a3a      	ldrh	r2, [r7, #16]
 8003c90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c94:	b292      	uxth	r2, r2
 8003c96:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f007 feab 	bl	800b9f4 <HAL_PCD_SetupStageCallback>
 8003c9e:	e310      	b.n	80042c2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ca0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f280 830c 	bge.w	80042c2 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	83fb      	strh	r3, [r7, #30]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	8bfa      	ldrh	r2, [r7, #30]
 8003cc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cc4:	b292      	uxth	r2, r2
 8003cc6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	3306      	adds	r3, #6
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d019      	beq.n	8003d30 <PCD_EP_ISR_Handler+0x1f8>
 8003cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d0a:	6959      	ldr	r1, [r3, #20]
 8003d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f005 ffa1 	bl	8009c5c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	441a      	add	r2, r3
 8003d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d28:	2100      	movs	r1, #0
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f007 fe74 	bl	800ba18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003d3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f040 82bd 	bne.w	80042c2 <PCD_EP_ISR_Handler+0x78a>
 8003d48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d4c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d54:	f000 82b5 	beq.w	80042c2 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	801a      	strh	r2, [r3, #0]
 8003d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8003d8e:	d91d      	bls.n	8003dcc <PCD_EP_ISR_Handler+0x294>
 8003d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	647b      	str	r3, [r7, #68]	; 0x44
 8003d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <PCD_EP_ISR_Handler+0x272>
 8003da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da6:	3b01      	subs	r3, #1
 8003da8:	647b      	str	r3, [r7, #68]	; 0x44
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	029b      	lsls	r3, r3, #10
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	4313      	orrs	r3, r2
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	e026      	b.n	8003e1a <PCD_EP_ISR_Handler+0x2e2>
 8003dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <PCD_EP_ISR_Handler+0x2b2>
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	801a      	strh	r2, [r3, #0]
 8003de8:	e017      	b.n	8003e1a <PCD_EP_ISR_Handler+0x2e2>
 8003dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	647b      	str	r3, [r7, #68]	; 0x44
 8003df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <PCD_EP_ISR_Handler+0x2cc>
 8003dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e00:	3301      	adds	r3, #1
 8003e02:	647b      	str	r3, [r7, #68]	; 0x44
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	029b      	lsls	r3, r3, #10
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	4313      	orrs	r3, r2
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	827b      	strh	r3, [r7, #18]
 8003e2c:	8a7b      	ldrh	r3, [r7, #18]
 8003e2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e32:	827b      	strh	r3, [r7, #18]
 8003e34:	8a7b      	ldrh	r3, [r7, #18]
 8003e36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e3a:	827b      	strh	r3, [r7, #18]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	8a7b      	ldrh	r3, [r7, #18]
 8003e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	8013      	strh	r3, [r2, #0]
 8003e56:	e234      	b.n	80042c2 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e6c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f280 80fc 	bge.w	800406e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003ea4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ea8:	b292      	uxth	r2, r2
 8003eaa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003eac:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec4:	7b1b      	ldrb	r3, [r3, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d125      	bne.n	8003f16 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	3306      	adds	r3, #6
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ef2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003ef6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8092 	beq.w	8004024 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f06:	6959      	ldr	r1, [r3, #20]
 8003f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f0a:	88da      	ldrh	r2, [r3, #6]
 8003f0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f10:	f005 fea4 	bl	8009c5c <USB_ReadPMA>
 8003f14:	e086      	b.n	8004024 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f18:	78db      	ldrb	r3, [r3, #3]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d10a      	bne.n	8003f34 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f22:	461a      	mov	r2, r3
 8003f24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f9d9 	bl	80042de <HAL_PCD_EP_DB_Receive>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003f32:	e077      	b.n	8004024 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	441a      	add	r2, r3
 8003f60:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d024      	beq.n	8003fdc <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3302      	adds	r3, #2
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003fbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d02e      	beq.n	8004024 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fcc:	6959      	ldr	r1, [r3, #20]
 8003fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd0:	891a      	ldrh	r2, [r3, #8]
 8003fd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003fd6:	f005 fe41 	bl	8009c5c <USB_ReadPMA>
 8003fda:	e023      	b.n	8004024 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	3306      	adds	r3, #6
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004004:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004008:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800400c:	2b00      	cmp	r3, #0
 800400e:	d009      	beq.n	8004024 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004016:	6959      	ldr	r1, [r3, #20]
 8004018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401a:	895a      	ldrh	r2, [r3, #10]
 800401c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004020:	f005 fe1c 	bl	8009c5c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800402c:	441a      	add	r2, r3
 800402e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004030:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800403a:	441a      	add	r2, r3
 800403c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <PCD_EP_ISR_Handler+0x51c>
 8004048:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800404c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	429a      	cmp	r2, r3
 8004052:	d206      	bcs.n	8004062 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f007 fcdc 	bl	800ba18 <HAL_PCD_DataOutStageCallback>
 8004060:	e005      	b.n	800406e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004068:	4618      	mov	r0, r3
 800406a:	f004 f8d2 	bl	8008212 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800406e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8123 	beq.w	80042c2 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800407c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80040a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	441a      	add	r2, r3
 80040bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80040c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80040cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ce:	78db      	ldrb	r3, [r3, #3]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	f040 80a2 	bne.w	800421a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80040d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d8:	2200      	movs	r2, #0
 80040da:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80040dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040de:	7b1b      	ldrb	r3, [r3, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8093 	beq.w	800420c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d046      	beq.n	8004180 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f4:	785b      	ldrb	r3, [r3, #1]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d126      	bne.n	8004148 <PCD_EP_ISR_Handler+0x610>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004108:	b29b      	uxth	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	4413      	add	r3, r2
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
 8004112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	011a      	lsls	r2, r3, #4
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	4413      	add	r3, r2
 800411c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004120:	623b      	str	r3, [r7, #32]
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800412c:	b29a      	uxth	r2, r3
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	801a      	strh	r2, [r3, #0]
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800413c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004140:	b29a      	uxth	r2, r3
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	801a      	strh	r2, [r3, #0]
 8004146:	e061      	b.n	800420c <PCD_EP_ISR_Handler+0x6d4>
 8004148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d15d      	bne.n	800420c <PCD_EP_ISR_Handler+0x6d4>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415e:	b29b      	uxth	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	4413      	add	r3, r2
 8004166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	011a      	lsls	r2, r3, #4
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	4413      	add	r3, r2
 8004172:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	2200      	movs	r2, #0
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	e045      	b.n	800420c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d126      	bne.n	80041dc <PCD_EP_ISR_Handler+0x6a4>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	637b      	str	r3, [r7, #52]	; 0x34
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800419c:	b29b      	uxth	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a2:	4413      	add	r3, r2
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
 80041a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	011a      	lsls	r2, r3, #4
 80041ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ae:	4413      	add	r3, r2
 80041b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041b4:	633b      	str	r3, [r7, #48]	; 0x30
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	e017      	b.n	800420c <PCD_EP_ISR_Handler+0x6d4>
 80041dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041de:	785b      	ldrb	r3, [r3, #1]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d113      	bne.n	800420c <PCD_EP_ISR_Handler+0x6d4>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f2:	4413      	add	r3, r2
 80041f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	011a      	lsls	r2, r3, #4
 80041fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fe:	4413      	add	r3, r2
 8004200:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004204:	63bb      	str	r3, [r7, #56]	; 0x38
 8004206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004208:	2200      	movs	r2, #0
 800420a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800420c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	4619      	mov	r1, r3
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f007 fc1b 	bl	800ba4e <HAL_PCD_DataInStageCallback>
 8004218:	e053      	b.n	80042c2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800421a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800421e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d146      	bne.n	80042b4 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	3302      	adds	r3, #2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800424e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800425a:	429a      	cmp	r2, r3
 800425c:	d907      	bls.n	800426e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800425e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004266:	1ad2      	subs	r2, r2, r3
 8004268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800426a:	619a      	str	r2, [r3, #24]
 800426c:	e002      	b.n	8004274 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800426e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004270:	2200      	movs	r2, #0
 8004272:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800427c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	4619      	mov	r1, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f007 fbe3 	bl	800ba4e <HAL_PCD_DataInStageCallback>
 8004288:	e01b      	b.n	80042c2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800428a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004292:	441a      	add	r2, r3
 8004294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004296:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80042a0:	441a      	add	r2, r3
 80042a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042ac:	4618      	mov	r0, r3
 80042ae:	f003 ffb0 	bl	8008212 <USB_EPStartXfer>
 80042b2:	e006      	b.n	80042c2 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80042b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042b8:	461a      	mov	r2, r3
 80042ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f91b 	bl	80044f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	b21b      	sxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f6ff ac37 	blt.w	8003b42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3758      	adds	r7, #88	; 0x58
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b088      	sub	sp, #32
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	4613      	mov	r3, r2
 80042ea:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d07e      	beq.n	80043f4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fe:	b29b      	uxth	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4413      	add	r3, r2
 800430a:	3302      	adds	r3, #2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800431e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	699a      	ldr	r2, [r3, #24]
 8004324:	8b7b      	ldrh	r3, [r7, #26]
 8004326:	429a      	cmp	r2, r3
 8004328:	d306      	bcc.n	8004338 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	8b7b      	ldrh	r3, [r7, #26]
 8004330:	1ad2      	subs	r2, r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	619a      	str	r2, [r3, #24]
 8004336:	e002      	b.n	800433e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2200      	movs	r2, #0
 800433c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d123      	bne.n	800438e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004360:	833b      	strh	r3, [r7, #24]
 8004362:	8b3b      	ldrh	r3, [r7, #24]
 8004364:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004368:	833b      	strh	r3, [r7, #24]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	441a      	add	r2, r3
 8004378:	8b3b      	ldrh	r3, [r7, #24]
 800437a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800437e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438a:	b29b      	uxth	r3, r3
 800438c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01f      	beq.n	80043d8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	82fb      	strh	r3, [r7, #22]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	441a      	add	r2, r3
 80043c2:	8afb      	ldrh	r3, [r7, #22]
 80043c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043d8:	8b7b      	ldrh	r3, [r7, #26]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8087 	beq.w	80044ee <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	6959      	ldr	r1, [r3, #20]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	891a      	ldrh	r2, [r3, #8]
 80043ec:	8b7b      	ldrh	r3, [r7, #26]
 80043ee:	f005 fc35 	bl	8009c5c <USB_ReadPMA>
 80043f2:	e07c      	b.n	80044ee <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	3306      	adds	r3, #6
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800441c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	8b7b      	ldrh	r3, [r7, #26]
 8004424:	429a      	cmp	r2, r3
 8004426:	d306      	bcc.n	8004436 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	699a      	ldr	r2, [r3, #24]
 800442c:	8b7b      	ldrh	r3, [r7, #26]
 800442e:	1ad2      	subs	r2, r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	619a      	str	r2, [r3, #24]
 8004434:	e002      	b.n	800443c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2200      	movs	r2, #0
 800443a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d123      	bne.n	800448c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	83fb      	strh	r3, [r7, #30]
 8004460:	8bfb      	ldrh	r3, [r7, #30]
 8004462:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004466:	83fb      	strh	r3, [r7, #30]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	441a      	add	r2, r3
 8004476:	8bfb      	ldrh	r3, [r7, #30]
 8004478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004488:	b29b      	uxth	r3, r3
 800448a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11f      	bne.n	80044d6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b0:	83bb      	strh	r3, [r7, #28]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	441a      	add	r2, r3
 80044c0:	8bbb      	ldrh	r3, [r7, #28]
 80044c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044d6:	8b7b      	ldrh	r3, [r7, #26]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	6959      	ldr	r1, [r3, #20]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	895a      	ldrh	r2, [r3, #10]
 80044e8:	8b7b      	ldrh	r3, [r7, #26]
 80044ea:	f005 fbb7 	bl	8009c5c <USB_ReadPMA>
    }
  }

  return count;
 80044ee:	8b7b      	ldrh	r3, [r7, #26]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3720      	adds	r7, #32
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b0a4      	sub	sp, #144	; 0x90
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 81dd 	beq.w	80048cc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451a:	b29b      	uxth	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4413      	add	r3, r2
 8004526:	3302      	adds	r3, #2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800453a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004546:	429a      	cmp	r2, r3
 8004548:	d907      	bls.n	800455a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004552:	1ad2      	subs	r2, r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	619a      	str	r2, [r3, #24]
 8004558:	e002      	b.n	8004560 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2200      	movs	r2, #0
 800455e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f040 80b9 	bne.w	80046dc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	785b      	ldrb	r3, [r3, #1]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d126      	bne.n	80045c0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004580:	b29b      	uxth	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	4413      	add	r3, r2
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	011a      	lsls	r2, r3, #4
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	4413      	add	r3, r2
 8004594:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004598:	62bb      	str	r3, [r7, #40]	; 0x28
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	801a      	strh	r2, [r3, #0]
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	801a      	strh	r2, [r3, #0]
 80045be:	e01a      	b.n	80045f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d116      	bne.n	80045f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	637b      	str	r3, [r7, #52]	; 0x34
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	4413      	add	r3, r2
 80045de:	637b      	str	r3, [r7, #52]	; 0x34
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	011a      	lsls	r2, r3, #4
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	4413      	add	r3, r2
 80045ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045ee:	633b      	str	r3, [r7, #48]	; 0x30
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	2200      	movs	r2, #0
 80045f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d126      	bne.n	8004652 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004612:	b29b      	uxth	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	011a      	lsls	r2, r3, #4
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	4413      	add	r3, r2
 8004626:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004636:	b29a      	uxth	r2, r3
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	801a      	strh	r2, [r3, #0]
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800464a:	b29a      	uxth	r2, r3
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	e017      	b.n	8004682 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	785b      	ldrb	r3, [r3, #1]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d113      	bne.n	8004682 <HAL_PCD_EP_DB_Transmit+0x18a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004662:	b29b      	uxth	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	4413      	add	r3, r2
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	011a      	lsls	r2, r3, #4
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	4413      	add	r3, r2
 8004676:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800467a:	623b      	str	r3, [r7, #32]
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2200      	movs	r2, #0
 8004680:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	4619      	mov	r1, r3
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f007 f9e0 	bl	800ba4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 82fc 	beq.w	8004c92 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	82fb      	strh	r3, [r7, #22]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	8afb      	ldrh	r3, [r7, #22]
 80046c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	8013      	strh	r3, [r2, #0]
 80046da:	e2da      	b.n	8004c92 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d021      	beq.n	800472a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004700:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800471e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004726:	b29b      	uxth	r3, r3
 8004728:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004730:	2b01      	cmp	r3, #1
 8004732:	f040 82ae 	bne.w	8004c92 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800473e:	441a      	add	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800474c:	441a      	add	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6a1a      	ldr	r2, [r3, #32]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	429a      	cmp	r2, r3
 800475c:	d30b      	bcc.n	8004776 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6a1a      	ldr	r2, [r3, #32]
 800476a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	621a      	str	r2, [r3, #32]
 8004774:	e017      	b.n	80047a6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d108      	bne.n	8004790 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800477e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800478e:	e00a      	b.n	80047a6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2200      	movs	r2, #0
 80047a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	785b      	ldrb	r3, [r3, #1]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d165      	bne.n	800487a <HAL_PCD_EP_DB_Transmit+0x382>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047bc:	b29b      	uxth	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c2:	4413      	add	r3, r2
 80047c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	011a      	lsls	r2, r3, #4
 80047cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ce:	4413      	add	r3, r2
 80047d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	801a      	strh	r2, [r3, #0]
 80047e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047ea:	2b3e      	cmp	r3, #62	; 0x3e
 80047ec:	d91d      	bls.n	800482a <HAL_PCD_EP_DB_Transmit+0x332>
 80047ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <HAL_PCD_EP_DB_Transmit+0x310>
 8004802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004804:	3b01      	subs	r3, #1
 8004806:	64bb      	str	r3, [r7, #72]	; 0x48
 8004808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29a      	uxth	r2, r3
 800480e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004810:	b29b      	uxth	r3, r3
 8004812:	029b      	lsls	r3, r3, #10
 8004814:	b29b      	uxth	r3, r3
 8004816:	4313      	orrs	r3, r2
 8004818:	b29b      	uxth	r3, r3
 800481a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004822:	b29a      	uxth	r2, r3
 8004824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	e044      	b.n	80048b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800482a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <HAL_PCD_EP_DB_Transmit+0x350>
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800483c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004840:	b29a      	uxth	r2, r3
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	e035      	b.n	80048b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004848:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HAL_PCD_EP_DB_Transmit+0x36a>
 800485c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485e:	3301      	adds	r3, #1
 8004860:	64bb      	str	r3, [r7, #72]	; 0x48
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29a      	uxth	r2, r3
 8004868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486a:	b29b      	uxth	r3, r3
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	b29b      	uxth	r3, r3
 8004870:	4313      	orrs	r3, r2
 8004872:	b29a      	uxth	r2, r3
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	e01c      	b.n	80048b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	785b      	ldrb	r3, [r3, #1]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d118      	bne.n	80048b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	647b      	str	r3, [r7, #68]	; 0x44
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004890:	b29b      	uxth	r3, r3
 8004892:	461a      	mov	r2, r3
 8004894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004896:	4413      	add	r3, r2
 8004898:	647b      	str	r3, [r7, #68]	; 0x44
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	011a      	lsls	r2, r3, #4
 80048a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a2:	4413      	add	r3, r2
 80048a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048a8:	643b      	str	r3, [r7, #64]	; 0x40
 80048aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	6959      	ldr	r1, [r3, #20]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	891a      	ldrh	r2, [r3, #8]
 80048c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f005 f983 	bl	8009bd0 <USB_WritePMA>
 80048ca:	e1e2      	b.n	8004c92 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4413      	add	r3, r2
 80048e0:	3306      	adds	r3, #6
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	699a      	ldr	r2, [r3, #24]
 80048fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004900:	429a      	cmp	r2, r3
 8004902:	d307      	bcc.n	8004914 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	699a      	ldr	r2, [r3, #24]
 8004908:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800490c:	1ad2      	subs	r2, r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	619a      	str	r2, [r3, #24]
 8004912:	e002      	b.n	800491a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2200      	movs	r2, #0
 8004918:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f040 80c0 	bne.w	8004aa4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	785b      	ldrb	r3, [r3, #1]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d126      	bne.n	800497a <HAL_PCD_EP_DB_Transmit+0x482>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493a:	b29b      	uxth	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004940:	4413      	add	r3, r2
 8004942:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	011a      	lsls	r2, r3, #4
 800494a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800494c:	4413      	add	r3, r2
 800494e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004952:	67bb      	str	r3, [r7, #120]	; 0x78
 8004954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800495e:	b29a      	uxth	r2, r3
 8004960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004962:	801a      	strh	r2, [r3, #0]
 8004964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800496e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004972:	b29a      	uxth	r2, r3
 8004974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004976:	801a      	strh	r2, [r3, #0]
 8004978:	e01a      	b.n	80049b0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	785b      	ldrb	r3, [r3, #1]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d116      	bne.n	80049b0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	667b      	str	r3, [r7, #100]	; 0x64
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004990:	b29b      	uxth	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004996:	4413      	add	r3, r2
 8004998:	667b      	str	r3, [r7, #100]	; 0x64
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	011a      	lsls	r2, r3, #4
 80049a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049a2:	4413      	add	r3, r2
 80049a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049a8:	663b      	str	r3, [r7, #96]	; 0x60
 80049aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ac:	2200      	movs	r2, #0
 80049ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	677b      	str	r3, [r7, #116]	; 0x74
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d12b      	bne.n	8004a16 <HAL_PCD_EP_DB_Transmit+0x51e>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d2:	4413      	add	r3, r2
 80049d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	011a      	lsls	r2, r3, #4
 80049dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049de:	4413      	add	r3, r2
 80049e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a12:	801a      	strh	r2, [r3, #0]
 8004a14:	e017      	b.n	8004a46 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	785b      	ldrb	r3, [r3, #1]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d113      	bne.n	8004a46 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2c:	4413      	add	r3, r2
 8004a2e:	677b      	str	r3, [r7, #116]	; 0x74
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	011a      	lsls	r2, r3, #4
 8004a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a38:	4413      	add	r3, r2
 8004a3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a3e:	673b      	str	r3, [r7, #112]	; 0x70
 8004a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a42:	2200      	movs	r2, #0
 8004a44:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f006 fffe 	bl	800ba4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f040 811a 	bne.w	8004c92 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a78:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	8013      	strh	r3, [r2, #0]
 8004aa2:	e0f6      	b.n	8004c92 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004aa4:	88fb      	ldrh	r3, [r7, #6]
 8004aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d121      	bne.n	8004af2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	f040 80ca 	bne.w	8004c92 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b06:	441a      	add	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b14:	441a      	add	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	6a1a      	ldr	r2, [r3, #32]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d30b      	bcc.n	8004b3e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6a1a      	ldr	r2, [r3, #32]
 8004b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b36:	1ad2      	subs	r2, r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	621a      	str	r2, [r3, #32]
 8004b3c:	e017      	b.n	8004b6e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004b46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b56:	e00a      	b.n	8004b6e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	657b      	str	r3, [r7, #84]	; 0x54
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d165      	bne.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x750>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b90:	4413      	add	r3, r2
 8004b92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	011a      	lsls	r2, r3, #4
 8004b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ba2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bb2:	801a      	strh	r2, [r3, #0]
 8004bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb8:	2b3e      	cmp	r3, #62	; 0x3e
 8004bba:	d91d      	bls.n	8004bf8 <HAL_PCD_EP_DB_Transmit+0x700>
 8004bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	029b      	lsls	r3, r3, #10
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	4313      	orrs	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bf4:	801a      	strh	r2, [r3, #0]
 8004bf6:	e041      	b.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x784>
 8004bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c12:	801a      	strh	r2, [r3, #0]
 8004c14:	e032      	b.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x784>
 8004c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_PCD_EP_DB_Transmit+0x738>
 8004c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	029b      	lsls	r3, r3, #10
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c44:	801a      	strh	r2, [r3, #0]
 8004c46:	e019      	b.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x784>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	785b      	ldrb	r3, [r3, #1]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d115      	bne.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x784>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c5e:	4413      	add	r3, r2
 8004c60:	657b      	str	r3, [r7, #84]	; 0x54
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	011a      	lsls	r2, r3, #4
 8004c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c70:	653b      	str	r3, [r7, #80]	; 0x50
 8004c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c7a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6959      	ldr	r1, [r3, #20]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	895a      	ldrh	r2, [r3, #10]
 8004c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f004 ff9f 	bl	8009bd0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cac:	82bb      	strh	r3, [r7, #20]
 8004cae:	8abb      	ldrh	r3, [r7, #20]
 8004cb0:	f083 0310 	eor.w	r3, r3, #16
 8004cb4:	82bb      	strh	r3, [r7, #20]
 8004cb6:	8abb      	ldrh	r3, [r7, #20]
 8004cb8:	f083 0320 	eor.w	r3, r3, #32
 8004cbc:	82bb      	strh	r3, [r7, #20]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	441a      	add	r2, r3
 8004ccc:	8abb      	ldrh	r3, [r7, #20]
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3790      	adds	r7, #144	; 0x90
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	817b      	strh	r3, [r7, #10]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004cfe:	897b      	ldrh	r3, [r7, #10]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d0a:	897b      	ldrh	r3, [r7, #10]
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e009      	b.n	8004d36 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d22:	897a      	ldrh	r2, [r7, #10]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d36:	893b      	ldrh	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d107      	bne.n	8004d4c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	80da      	strh	r2, [r3, #6]
 8004d4a:	e00b      	b.n	8004d64 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	f001 b823 	b.w	8005de0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 817d 	beq.w	80050aa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004db0:	4bbc      	ldr	r3, [pc, #752]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f003 030c 	and.w	r3, r3, #12
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d00c      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dbc:	4bb9      	ldr	r3, [pc, #740]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 030c 	and.w	r3, r3, #12
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d15c      	bne.n	8004e82 <HAL_RCC_OscConfig+0x10e>
 8004dc8:	4bb6      	ldr	r3, [pc, #728]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	d155      	bne.n	8004e82 <HAL_RCC_OscConfig+0x10e>
 8004dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dda:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004de2:	fa93 f3a3 	rbit	r3, r3
 8004de6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004dea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dee:	fab3 f383 	clz	r3, r3
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d102      	bne.n	8004e08 <HAL_RCC_OscConfig+0x94>
 8004e02:	4ba8      	ldr	r3, [pc, #672]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	e015      	b.n	8004e34 <HAL_RCC_OscConfig+0xc0>
 8004e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e0c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004e14:	fa93 f3a3 	rbit	r3, r3
 8004e18:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e20:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004e24:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004e28:	fa93 f3a3 	rbit	r3, r3
 8004e2c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004e30:	4b9c      	ldr	r3, [pc, #624]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e38:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004e3c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004e40:	fa92 f2a2 	rbit	r2, r2
 8004e44:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004e48:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004e4c:	fab2 f282 	clz	r2, r2
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	f042 0220 	orr.w	r2, r2, #32
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	f002 021f 	and.w	r2, r2, #31
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 811f 	beq.w	80050a8 <HAL_RCC_OscConfig+0x334>
 8004e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 8116 	bne.w	80050a8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f000 bfaf 	b.w	8005de0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e92:	d106      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x12e>
 8004e94:	4b83      	ldr	r3, [pc, #524]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a82      	ldr	r2, [pc, #520]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	e036      	b.n	8004f10 <HAL_RCC_OscConfig+0x19c>
 8004ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x158>
 8004eb2:	4b7c      	ldr	r3, [pc, #496]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a7b      	ldr	r2, [pc, #492]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	4b79      	ldr	r3, [pc, #484]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a78      	ldr	r2, [pc, #480]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	e021      	b.n	8004f10 <HAL_RCC_OscConfig+0x19c>
 8004ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x184>
 8004ede:	4b71      	ldr	r3, [pc, #452]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a70      	ldr	r2, [pc, #448]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	4b6e      	ldr	r3, [pc, #440]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a6d      	ldr	r2, [pc, #436]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e00b      	b.n	8004f10 <HAL_RCC_OscConfig+0x19c>
 8004ef8:	4b6a      	ldr	r3, [pc, #424]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a69      	ldr	r2, [pc, #420]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b67      	ldr	r3, [pc, #412]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a66      	ldr	r2, [pc, #408]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f10:	4b64      	ldr	r3, [pc, #400]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	f023 020f 	bic.w	r2, r3, #15
 8004f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	495f      	ldr	r1, [pc, #380]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d059      	beq.n	8004fee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3a:	f7fd f8db 	bl	80020f4 <HAL_GetTick>
 8004f3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	e00a      	b.n	8004f5a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fd f8d6 	bl	80020f4 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b64      	cmp	r3, #100	; 0x64
 8004f52:	d902      	bls.n	8004f5a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	f000 bf43 	b.w	8005de0 <HAL_RCC_OscConfig+0x106c>
 8004f5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f5e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004f66:	fa93 f3a3 	rbit	r3, r3
 8004f6a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004f6e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d102      	bne.n	8004f8c <HAL_RCC_OscConfig+0x218>
 8004f86:	4b47      	ldr	r3, [pc, #284]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	e015      	b.n	8004fb8 <HAL_RCC_OscConfig+0x244>
 8004f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f90:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f94:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004f98:	fa93 f3a3 	rbit	r3, r3
 8004f9c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fa4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004fa8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004fac:	fa93 f3a3 	rbit	r3, r3
 8004fb0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004fb4:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fbc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004fc0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004fc4:	fa92 f2a2 	rbit	r2, r2
 8004fc8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004fcc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004fd0:	fab2 f282 	clz	r2, r2
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	f042 0220 	orr.w	r2, r2, #32
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	f002 021f 	and.w	r2, r2, #31
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0ab      	beq.n	8004f44 <HAL_RCC_OscConfig+0x1d0>
 8004fec:	e05d      	b.n	80050aa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fee:	f7fd f881 	bl	80020f4 <HAL_GetTick>
 8004ff2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff8:	f7fd f87c 	bl	80020f4 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b64      	cmp	r3, #100	; 0x64
 8005006:	d902      	bls.n	800500e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	f000 bee9 	b.w	8005de0 <HAL_RCC_OscConfig+0x106c>
 800500e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005012:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005016:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800501a:	fa93 f3a3 	rbit	r3, r3
 800501e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005022:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005026:	fab3 f383 	clz	r3, r3
 800502a:	b2db      	uxtb	r3, r3
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f043 0301 	orr.w	r3, r3, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b01      	cmp	r3, #1
 8005038:	d102      	bne.n	8005040 <HAL_RCC_OscConfig+0x2cc>
 800503a:	4b1a      	ldr	r3, [pc, #104]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	e015      	b.n	800506c <HAL_RCC_OscConfig+0x2f8>
 8005040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005044:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005048:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800504c:	fa93 f3a3 	rbit	r3, r3
 8005050:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005058:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800505c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005060:	fa93 f3a3 	rbit	r3, r3
 8005064:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005068:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005070:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005074:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005078:	fa92 f2a2 	rbit	r2, r2
 800507c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005080:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005084:	fab2 f282 	clz	r2, r2
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	f042 0220 	orr.w	r2, r2, #32
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	f002 021f 	and.w	r2, r2, #31
 8005094:	2101      	movs	r1, #1
 8005096:	fa01 f202 	lsl.w	r2, r1, r2
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1ab      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x284>
 80050a0:	e003      	b.n	80050aa <HAL_RCC_OscConfig+0x336>
 80050a2:	bf00      	nop
 80050a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 817d 	beq.w	80053ba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80050c0:	4ba6      	ldr	r3, [pc, #664]	; (800535c <HAL_RCC_OscConfig+0x5e8>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f003 030c 	and.w	r3, r3, #12
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00b      	beq.n	80050e4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80050cc:	4ba3      	ldr	r3, [pc, #652]	; (800535c <HAL_RCC_OscConfig+0x5e8>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f003 030c 	and.w	r3, r3, #12
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d172      	bne.n	80051be <HAL_RCC_OscConfig+0x44a>
 80050d8:	4ba0      	ldr	r3, [pc, #640]	; (800535c <HAL_RCC_OscConfig+0x5e8>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d16c      	bne.n	80051be <HAL_RCC_OscConfig+0x44a>
 80050e4:	2302      	movs	r3, #2
 80050e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80050ee:	fa93 f3a3 	rbit	r3, r3
 80050f2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80050f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fa:	fab3 f383 	clz	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	b2db      	uxtb	r3, r3
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b01      	cmp	r3, #1
 800510c:	d102      	bne.n	8005114 <HAL_RCC_OscConfig+0x3a0>
 800510e:	4b93      	ldr	r3, [pc, #588]	; (800535c <HAL_RCC_OscConfig+0x5e8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	e013      	b.n	800513c <HAL_RCC_OscConfig+0x3c8>
 8005114:	2302      	movs	r3, #2
 8005116:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800511e:	fa93 f3a3 	rbit	r3, r3
 8005122:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005126:	2302      	movs	r3, #2
 8005128:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800512c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005130:	fa93 f3a3 	rbit	r3, r3
 8005134:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005138:	4b88      	ldr	r3, [pc, #544]	; (800535c <HAL_RCC_OscConfig+0x5e8>)
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	2202      	movs	r2, #2
 800513e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005142:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005146:	fa92 f2a2 	rbit	r2, r2
 800514a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800514e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005152:	fab2 f282 	clz	r2, r2
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	f042 0220 	orr.w	r2, r2, #32
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	f002 021f 	and.w	r2, r2, #31
 8005162:	2101      	movs	r1, #1
 8005164:	fa01 f202 	lsl.w	r2, r1, r2
 8005168:	4013      	ands	r3, r2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_RCC_OscConfig+0x410>
 800516e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005172:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d002      	beq.n	8005184 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	f000 be2e 	b.w	8005de0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005184:	4b75      	ldr	r3, [pc, #468]	; (800535c <HAL_RCC_OscConfig+0x5e8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800518c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005190:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	21f8      	movs	r1, #248	; 0xf8
 800519a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80051a2:	fa91 f1a1 	rbit	r1, r1
 80051a6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80051aa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80051ae:	fab1 f181 	clz	r1, r1
 80051b2:	b2c9      	uxtb	r1, r1
 80051b4:	408b      	lsls	r3, r1
 80051b6:	4969      	ldr	r1, [pc, #420]	; (800535c <HAL_RCC_OscConfig+0x5e8>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051bc:	e0fd      	b.n	80053ba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8088 	beq.w	80052e0 <HAL_RCC_OscConfig+0x56c>
 80051d0:	2301      	movs	r3, #1
 80051d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80051da:	fa93 f3a3 	rbit	r3, r3
 80051de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80051e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e6:	fab3 f383 	clz	r3, r3
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	461a      	mov	r2, r3
 80051f8:	2301      	movs	r3, #1
 80051fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fc:	f7fc ff7a 	bl	80020f4 <HAL_GetTick>
 8005200:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005204:	e00a      	b.n	800521c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005206:	f7fc ff75 	bl	80020f4 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d902      	bls.n	800521c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	f000 bde2 	b.w	8005de0 <HAL_RCC_OscConfig+0x106c>
 800521c:	2302      	movs	r3, #2
 800521e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005222:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005226:	fa93 f3a3 	rbit	r3, r3
 800522a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800522e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005232:	fab3 f383 	clz	r3, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d102      	bne.n	800524c <HAL_RCC_OscConfig+0x4d8>
 8005246:	4b45      	ldr	r3, [pc, #276]	; (800535c <HAL_RCC_OscConfig+0x5e8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	e013      	b.n	8005274 <HAL_RCC_OscConfig+0x500>
 800524c:	2302      	movs	r3, #2
 800524e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005252:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005256:	fa93 f3a3 	rbit	r3, r3
 800525a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800525e:	2302      	movs	r3, #2
 8005260:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005264:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005268:	fa93 f3a3 	rbit	r3, r3
 800526c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005270:	4b3a      	ldr	r3, [pc, #232]	; (800535c <HAL_RCC_OscConfig+0x5e8>)
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	2202      	movs	r2, #2
 8005276:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800527a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800527e:	fa92 f2a2 	rbit	r2, r2
 8005282:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005286:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800528a:	fab2 f282 	clz	r2, r2
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	f042 0220 	orr.w	r2, r2, #32
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	f002 021f 	and.w	r2, r2, #31
 800529a:	2101      	movs	r1, #1
 800529c:	fa01 f202 	lsl.w	r2, r1, r2
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0af      	beq.n	8005206 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a6:	4b2d      	ldr	r3, [pc, #180]	; (800535c <HAL_RCC_OscConfig+0x5e8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	21f8      	movs	r1, #248	; 0xf8
 80052bc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80052c4:	fa91 f1a1 	rbit	r1, r1
 80052c8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80052cc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80052d0:	fab1 f181 	clz	r1, r1
 80052d4:	b2c9      	uxtb	r1, r1
 80052d6:	408b      	lsls	r3, r1
 80052d8:	4920      	ldr	r1, [pc, #128]	; (800535c <HAL_RCC_OscConfig+0x5e8>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	600b      	str	r3, [r1, #0]
 80052de:	e06c      	b.n	80053ba <HAL_RCC_OscConfig+0x646>
 80052e0:	2301      	movs	r3, #1
 80052e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80052ea:	fa93 f3a3 	rbit	r3, r3
 80052ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80052f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052f6:	fab3 f383 	clz	r3, r3
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005300:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	461a      	mov	r2, r3
 8005308:	2300      	movs	r3, #0
 800530a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530c:	f7fc fef2 	bl	80020f4 <HAL_GetTick>
 8005310:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005314:	e00a      	b.n	800532c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005316:	f7fc feed 	bl	80020f4 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d902      	bls.n	800532c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	f000 bd5a 	b.w	8005de0 <HAL_RCC_OscConfig+0x106c>
 800532c:	2302      	movs	r3, #2
 800532e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005332:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005336:	fa93 f3a3 	rbit	r3, r3
 800533a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800533e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005342:	fab3 f383 	clz	r3, r3
 8005346:	b2db      	uxtb	r3, r3
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b01      	cmp	r3, #1
 8005354:	d104      	bne.n	8005360 <HAL_RCC_OscConfig+0x5ec>
 8005356:	4b01      	ldr	r3, [pc, #4]	; (800535c <HAL_RCC_OscConfig+0x5e8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	e015      	b.n	8005388 <HAL_RCC_OscConfig+0x614>
 800535c:	40021000 	.word	0x40021000
 8005360:	2302      	movs	r3, #2
 8005362:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800536a:	fa93 f3a3 	rbit	r3, r3
 800536e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005372:	2302      	movs	r3, #2
 8005374:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005378:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800537c:	fa93 f3a3 	rbit	r3, r3
 8005380:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005384:	4bc8      	ldr	r3, [pc, #800]	; (80056a8 <HAL_RCC_OscConfig+0x934>)
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	2202      	movs	r2, #2
 800538a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800538e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005392:	fa92 f2a2 	rbit	r2, r2
 8005396:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800539a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800539e:	fab2 f282 	clz	r2, r2
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	f042 0220 	orr.w	r2, r2, #32
 80053a8:	b2d2      	uxtb	r2, r2
 80053aa:	f002 021f 	and.w	r2, r2, #31
 80053ae:	2101      	movs	r1, #1
 80053b0:	fa01 f202 	lsl.w	r2, r1, r2
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1ad      	bne.n	8005316 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8110 	beq.w	80055f0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d079      	beq.n	80054d4 <HAL_RCC_OscConfig+0x760>
 80053e0:	2301      	movs	r3, #1
 80053e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80053ea:	fa93 f3a3 	rbit	r3, r3
 80053ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80053f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053f6:	fab3 f383 	clz	r3, r3
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	4bab      	ldr	r3, [pc, #684]	; (80056ac <HAL_RCC_OscConfig+0x938>)
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	461a      	mov	r2, r3
 8005406:	2301      	movs	r3, #1
 8005408:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800540a:	f7fc fe73 	bl	80020f4 <HAL_GetTick>
 800540e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005412:	e00a      	b.n	800542a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005414:	f7fc fe6e 	bl	80020f4 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d902      	bls.n	800542a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	f000 bcdb 	b.w	8005de0 <HAL_RCC_OscConfig+0x106c>
 800542a:	2302      	movs	r3, #2
 800542c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005430:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005434:	fa93 f3a3 	rbit	r3, r3
 8005438:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800543c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005440:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005444:	2202      	movs	r2, #2
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	fa93 f2a3 	rbit	r2, r3
 8005456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005468:	2202      	movs	r2, #2
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	fa93 f2a3 	rbit	r2, r3
 800547a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005482:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005484:	4b88      	ldr	r3, [pc, #544]	; (80056a8 <HAL_RCC_OscConfig+0x934>)
 8005486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800548c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005490:	2102      	movs	r1, #2
 8005492:	6019      	str	r1, [r3, #0]
 8005494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005498:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	fa93 f1a3 	rbit	r1, r3
 80054a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80054aa:	6019      	str	r1, [r3, #0]
  return result;
 80054ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	fab3 f383 	clz	r3, r3
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2101      	movs	r1, #1
 80054c8:	fa01 f303 	lsl.w	r3, r1, r3
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0a0      	beq.n	8005414 <HAL_RCC_OscConfig+0x6a0>
 80054d2:	e08d      	b.n	80055f0 <HAL_RCC_OscConfig+0x87c>
 80054d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	fa93 f2a3 	rbit	r2, r3
 80054ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054f6:	601a      	str	r2, [r3, #0]
  return result;
 80054f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005500:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005502:	fab3 f383 	clz	r3, r3
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	4b68      	ldr	r3, [pc, #416]	; (80056ac <HAL_RCC_OscConfig+0x938>)
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	461a      	mov	r2, r3
 8005512:	2300      	movs	r3, #0
 8005514:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005516:	f7fc fded 	bl	80020f4 <HAL_GetTick>
 800551a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005520:	f7fc fde8 	bl	80020f4 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d902      	bls.n	8005536 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	f000 bc55 	b.w	8005de0 <HAL_RCC_OscConfig+0x106c>
 8005536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800553a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800553e:	2202      	movs	r2, #2
 8005540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005546:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	fa93 f2a3 	rbit	r2, r3
 8005550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005554:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005562:	2202      	movs	r2, #2
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800556a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	fa93 f2a3 	rbit	r2, r3
 8005574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005578:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005586:	2202      	movs	r2, #2
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	fa93 f2a3 	rbit	r2, r3
 8005598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80055a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a2:	4b41      	ldr	r3, [pc, #260]	; (80056a8 <HAL_RCC_OscConfig+0x934>)
 80055a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80055ae:	2102      	movs	r1, #2
 80055b0:	6019      	str	r1, [r3, #0]
 80055b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	fa93 f1a3 	rbit	r1, r3
 80055c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80055c8:	6019      	str	r1, [r3, #0]
  return result;
 80055ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	fab3 f383 	clz	r3, r3
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	2101      	movs	r1, #1
 80055e6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d197      	bne.n	8005520 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 81a1 	beq.w	8005948 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005606:	2300      	movs	r3, #0
 8005608:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800560c:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <HAL_RCC_OscConfig+0x934>)
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d116      	bne.n	8005646 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005618:	4b23      	ldr	r3, [pc, #140]	; (80056a8 <HAL_RCC_OscConfig+0x934>)
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	4a22      	ldr	r2, [pc, #136]	; (80056a8 <HAL_RCC_OscConfig+0x934>)
 800561e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005622:	61d3      	str	r3, [r2, #28]
 8005624:	4b20      	ldr	r3, [pc, #128]	; (80056a8 <HAL_RCC_OscConfig+0x934>)
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800562c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005630:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800563e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005646:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <HAL_RCC_OscConfig+0x93c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d11a      	bne.n	8005688 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <HAL_RCC_OscConfig+0x93c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a16      	ldr	r2, [pc, #88]	; (80056b0 <HAL_RCC_OscConfig+0x93c>)
 8005658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800565e:	f7fc fd49 	bl	80020f4 <HAL_GetTick>
 8005662:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005666:	e009      	b.n	800567c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005668:	f7fc fd44 	bl	80020f4 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b64      	cmp	r3, #100	; 0x64
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e3b1      	b.n	8005de0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <HAL_RCC_OscConfig+0x93c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0ef      	beq.n	8005668 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d10d      	bne.n	80056b4 <HAL_RCC_OscConfig+0x940>
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <HAL_RCC_OscConfig+0x934>)
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	4a02      	ldr	r2, [pc, #8]	; (80056a8 <HAL_RCC_OscConfig+0x934>)
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	6213      	str	r3, [r2, #32]
 80056a4:	e03c      	b.n	8005720 <HAL_RCC_OscConfig+0x9ac>
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000
 80056ac:	10908120 	.word	0x10908120
 80056b0:	40007000 	.word	0x40007000
 80056b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10c      	bne.n	80056de <HAL_RCC_OscConfig+0x96a>
 80056c4:	4bc1      	ldr	r3, [pc, #772]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	4ac0      	ldr	r2, [pc, #768]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 80056ca:	f023 0301 	bic.w	r3, r3, #1
 80056ce:	6213      	str	r3, [r2, #32]
 80056d0:	4bbe      	ldr	r3, [pc, #760]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	4abd      	ldr	r2, [pc, #756]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 80056d6:	f023 0304 	bic.w	r3, r3, #4
 80056da:	6213      	str	r3, [r2, #32]
 80056dc:	e020      	b.n	8005720 <HAL_RCC_OscConfig+0x9ac>
 80056de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2b05      	cmp	r3, #5
 80056ec:	d10c      	bne.n	8005708 <HAL_RCC_OscConfig+0x994>
 80056ee:	4bb7      	ldr	r3, [pc, #732]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	4ab6      	ldr	r2, [pc, #728]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 80056f4:	f043 0304 	orr.w	r3, r3, #4
 80056f8:	6213      	str	r3, [r2, #32]
 80056fa:	4bb4      	ldr	r3, [pc, #720]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	4ab3      	ldr	r2, [pc, #716]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	6213      	str	r3, [r2, #32]
 8005706:	e00b      	b.n	8005720 <HAL_RCC_OscConfig+0x9ac>
 8005708:	4bb0      	ldr	r3, [pc, #704]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	4aaf      	ldr	r2, [pc, #700]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	6213      	str	r3, [r2, #32]
 8005714:	4bad      	ldr	r3, [pc, #692]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	4aac      	ldr	r2, [pc, #688]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 800571a:	f023 0304 	bic.w	r3, r3, #4
 800571e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005724:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8081 	beq.w	8005834 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005732:	f7fc fcdf 	bl	80020f4 <HAL_GetTick>
 8005736:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573a:	e00b      	b.n	8005754 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800573c:	f7fc fcda 	bl	80020f4 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	f241 3288 	movw	r2, #5000	; 0x1388
 800574c:	4293      	cmp	r3, r2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e345      	b.n	8005de0 <HAL_RCC_OscConfig+0x106c>
 8005754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005758:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800575c:	2202      	movs	r2, #2
 800575e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005764:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	fa93 f2a3 	rbit	r2, r3
 800576e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005772:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800577c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005780:	2202      	movs	r2, #2
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005788:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	fa93 f2a3 	rbit	r2, r3
 8005792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005796:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800579a:	601a      	str	r2, [r3, #0]
  return result;
 800579c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80057a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a6:	fab3 f383 	clz	r3, r3
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f043 0302 	orr.w	r3, r3, #2
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d102      	bne.n	80057c0 <HAL_RCC_OscConfig+0xa4c>
 80057ba:	4b84      	ldr	r3, [pc, #528]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	e013      	b.n	80057e8 <HAL_RCC_OscConfig+0xa74>
 80057c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80057c8:	2202      	movs	r2, #2
 80057ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	fa93 f2a3 	rbit	r2, r3
 80057da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	4b79      	ldr	r3, [pc, #484]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80057f0:	2102      	movs	r1, #2
 80057f2:	6011      	str	r1, [r2, #0]
 80057f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057f8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	fa92 f1a2 	rbit	r1, r2
 8005802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005806:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800580a:	6011      	str	r1, [r2, #0]
  return result;
 800580c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005810:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	fab2 f282 	clz	r2, r2
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	f002 021f 	and.w	r2, r2, #31
 8005826:	2101      	movs	r1, #1
 8005828:	fa01 f202 	lsl.w	r2, r1, r2
 800582c:	4013      	ands	r3, r2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d084      	beq.n	800573c <HAL_RCC_OscConfig+0x9c8>
 8005832:	e07f      	b.n	8005934 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005834:	f7fc fc5e 	bl	80020f4 <HAL_GetTick>
 8005838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800583c:	e00b      	b.n	8005856 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800583e:	f7fc fc59 	bl	80020f4 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	f241 3288 	movw	r2, #5000	; 0x1388
 800584e:	4293      	cmp	r3, r2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e2c4      	b.n	8005de0 <HAL_RCC_OscConfig+0x106c>
 8005856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800585a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800585e:	2202      	movs	r2, #2
 8005860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005866:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	fa93 f2a3 	rbit	r2, r3
 8005870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005874:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005882:	2202      	movs	r2, #2
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	fa93 f2a3 	rbit	r2, r3
 8005894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005898:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800589c:	601a      	str	r2, [r3, #0]
  return result;
 800589e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80058a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a8:	fab3 f383 	clz	r3, r3
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	f043 0302 	orr.w	r3, r3, #2
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d102      	bne.n	80058c2 <HAL_RCC_OscConfig+0xb4e>
 80058bc:	4b43      	ldr	r3, [pc, #268]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	e013      	b.n	80058ea <HAL_RCC_OscConfig+0xb76>
 80058c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80058ca:	2202      	movs	r2, #2
 80058cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	fa93 f2a3 	rbit	r2, r3
 80058dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	4b39      	ldr	r3, [pc, #228]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80058f2:	2102      	movs	r1, #2
 80058f4:	6011      	str	r1, [r2, #0]
 80058f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058fa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	fa92 f1a2 	rbit	r1, r2
 8005904:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005908:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800590c:	6011      	str	r1, [r2, #0]
  return result;
 800590e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005912:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	fab2 f282 	clz	r2, r2
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	f002 021f 	and.w	r2, r2, #31
 8005928:	2101      	movs	r1, #1
 800592a:	fa01 f202 	lsl.w	r2, r1, r2
 800592e:	4013      	ands	r3, r2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d184      	bne.n	800583e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005934:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005938:	2b01      	cmp	r3, #1
 800593a:	d105      	bne.n	8005948 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800593c:	4b23      	ldr	r3, [pc, #140]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	4a22      	ldr	r2, [pc, #136]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 8005942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005946:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800594c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8242 	beq.w	8005dde <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800595a:	4b1c      	ldr	r3, [pc, #112]	; (80059cc <HAL_RCC_OscConfig+0xc58>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f003 030c 	and.w	r3, r3, #12
 8005962:	2b08      	cmp	r3, #8
 8005964:	f000 8213 	beq.w	8005d8e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800596c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	2b02      	cmp	r3, #2
 8005976:	f040 8162 	bne.w	8005c3e <HAL_RCC_OscConfig+0xeca>
 800597a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800597e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005982:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005986:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800598c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	fa93 f2a3 	rbit	r2, r3
 8005996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800599a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800599e:	601a      	str	r2, [r3, #0]
  return result;
 80059a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80059a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059aa:	fab3 f383 	clz	r3, r3
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	461a      	mov	r2, r3
 80059bc:	2300      	movs	r3, #0
 80059be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fc fb98 	bl	80020f4 <HAL_GetTick>
 80059c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059c8:	e00c      	b.n	80059e4 <HAL_RCC_OscConfig+0xc70>
 80059ca:	bf00      	nop
 80059cc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059d0:	f7fc fb90 	bl	80020f4 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d901      	bls.n	80059e4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e1fd      	b.n	8005de0 <HAL_RCC_OscConfig+0x106c>
 80059e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059e8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80059ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	fa93 f2a3 	rbit	r2, r3
 8005a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005a08:	601a      	str	r2, [r3, #0]
  return result;
 8005a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a0e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005a12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a14:	fab3 f383 	clz	r3, r3
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d102      	bne.n	8005a2e <HAL_RCC_OscConfig+0xcba>
 8005a28:	4bb0      	ldr	r3, [pc, #704]	; (8005cec <HAL_RCC_OscConfig+0xf78>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	e027      	b.n	8005a7e <HAL_RCC_OscConfig+0xd0a>
 8005a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a32:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a40:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	fa93 f2a3 	rbit	r2, r3
 8005a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a4e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a58:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a66:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	fa93 f2a3 	rbit	r2, r3
 8005a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	4b9c      	ldr	r3, [pc, #624]	; (8005cec <HAL_RCC_OscConfig+0xf78>)
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a82:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005a86:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a8a:	6011      	str	r1, [r2, #0]
 8005a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a90:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	fa92 f1a2 	rbit	r1, r2
 8005a9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a9e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005aa2:	6011      	str	r1, [r2, #0]
  return result;
 8005aa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005aa8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	fab2 f282 	clz	r2, r2
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	f042 0220 	orr.w	r2, r2, #32
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	f002 021f 	and.w	r2, r2, #31
 8005abe:	2101      	movs	r1, #1
 8005ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d182      	bne.n	80059d0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aca:	4b88      	ldr	r3, [pc, #544]	; (8005cec <HAL_RCC_OscConfig+0xf78>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	430b      	orrs	r3, r1
 8005aec:	497f      	ldr	r1, [pc, #508]	; (8005cec <HAL_RCC_OscConfig+0xf78>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	604b      	str	r3, [r1, #4]
 8005af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005af6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005afa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b04:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	fa93 f2a3 	rbit	r2, r3
 8005b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b12:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005b16:	601a      	str	r2, [r3, #0]
  return result;
 8005b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b1c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005b20:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b22:	fab3 f383 	clz	r3, r3
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	461a      	mov	r2, r3
 8005b34:	2301      	movs	r3, #1
 8005b36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b38:	f7fc fadc 	bl	80020f4 <HAL_GetTick>
 8005b3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b40:	e009      	b.n	8005b56 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b42:	f7fc fad7 	bl	80020f4 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e144      	b.n	8005de0 <HAL_RCC_OscConfig+0x106c>
 8005b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b5a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b68:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	fa93 f2a3 	rbit	r2, r3
 8005b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b76:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005b7a:	601a      	str	r2, [r3, #0]
  return result;
 8005b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b80:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005b84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b86:	fab3 f383 	clz	r3, r3
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f043 0301 	orr.w	r3, r3, #1
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d102      	bne.n	8005ba0 <HAL_RCC_OscConfig+0xe2c>
 8005b9a:	4b54      	ldr	r3, [pc, #336]	; (8005cec <HAL_RCC_OscConfig+0xf78>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	e027      	b.n	8005bf0 <HAL_RCC_OscConfig+0xe7c>
 8005ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bb2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	fa93 f2a3 	rbit	r2, r3
 8005bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bc0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bca:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bd8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	fa93 f2a3 	rbit	r2, r3
 8005be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005be6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	4b3f      	ldr	r3, [pc, #252]	; (8005cec <HAL_RCC_OscConfig+0xf78>)
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bf4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005bf8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005bfc:	6011      	str	r1, [r2, #0]
 8005bfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c02:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005c06:	6812      	ldr	r2, [r2, #0]
 8005c08:	fa92 f1a2 	rbit	r1, r2
 8005c0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c10:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005c14:	6011      	str	r1, [r2, #0]
  return result;
 8005c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c1a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	fab2 f282 	clz	r2, r2
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	f042 0220 	orr.w	r2, r2, #32
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	f002 021f 	and.w	r2, r2, #31
 8005c30:	2101      	movs	r1, #1
 8005c32:	fa01 f202 	lsl.w	r2, r1, r2
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d082      	beq.n	8005b42 <HAL_RCC_OscConfig+0xdce>
 8005c3c:	e0cf      	b.n	8005dde <HAL_RCC_OscConfig+0x106a>
 8005c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c42:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005c46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c50:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	fa93 f2a3 	rbit	r2, r3
 8005c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c5e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005c62:	601a      	str	r2, [r3, #0]
  return result;
 8005c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c68:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005c6c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6e:	fab3 f383 	clz	r3, r3
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	461a      	mov	r2, r3
 8005c80:	2300      	movs	r3, #0
 8005c82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c84:	f7fc fa36 	bl	80020f4 <HAL_GetTick>
 8005c88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c8c:	e009      	b.n	8005ca2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c8e:	f7fc fa31 	bl	80020f4 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e09e      	b.n	8005de0 <HAL_RCC_OscConfig+0x106c>
 8005ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ca6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cb4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	fa93 f2a3 	rbit	r2, r3
 8005cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cc2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005cc6:	601a      	str	r2, [r3, #0]
  return result;
 8005cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ccc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005cd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cd2:	fab3 f383 	clz	r3, r3
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d104      	bne.n	8005cf0 <HAL_RCC_OscConfig+0xf7c>
 8005ce6:	4b01      	ldr	r3, [pc, #4]	; (8005cec <HAL_RCC_OscConfig+0xf78>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	e029      	b.n	8005d40 <HAL_RCC_OscConfig+0xfcc>
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cf4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d02:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	fa93 f2a3 	rbit	r2, r3
 8005d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d10:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d1a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d28:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	fa93 f2a3 	rbit	r2, r3
 8005d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d36:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <HAL_RCC_OscConfig+0x1078>)
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d44:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005d48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d4c:	6011      	str	r1, [r2, #0]
 8005d4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d52:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	fa92 f1a2 	rbit	r1, r2
 8005d5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d60:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005d64:	6011      	str	r1, [r2, #0]
  return result;
 8005d66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d6a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	fab2 f282 	clz	r2, r2
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	f042 0220 	orr.w	r2, r2, #32
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	f002 021f 	and.w	r2, r2, #31
 8005d80:	2101      	movs	r1, #1
 8005d82:	fa01 f202 	lsl.w	r2, r1, r2
 8005d86:	4013      	ands	r3, r2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d180      	bne.n	8005c8e <HAL_RCC_OscConfig+0xf1a>
 8005d8c:	e027      	b.n	8005dde <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e01e      	b.n	8005de0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005da2:	4b12      	ldr	r3, [pc, #72]	; (8005dec <HAL_RCC_OscConfig+0x1078>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005daa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005dae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d10b      	bne.n	8005dda <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005dc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005dc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d001      	beq.n	8005dde <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40021000 	.word	0x40021000

08005df0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b09e      	sub	sp, #120	; 0x78
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e162      	b.n	80060ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e08:	4b90      	ldr	r3, [pc, #576]	; (800604c <HAL_RCC_ClockConfig+0x25c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d910      	bls.n	8005e38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e16:	4b8d      	ldr	r3, [pc, #564]	; (800604c <HAL_RCC_ClockConfig+0x25c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f023 0207 	bic.w	r2, r3, #7
 8005e1e:	498b      	ldr	r1, [pc, #556]	; (800604c <HAL_RCC_ClockConfig+0x25c>)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e26:	4b89      	ldr	r3, [pc, #548]	; (800604c <HAL_RCC_ClockConfig+0x25c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d001      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e14a      	b.n	80060ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e44:	4b82      	ldr	r3, [pc, #520]	; (8006050 <HAL_RCC_ClockConfig+0x260>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	497f      	ldr	r1, [pc, #508]	; (8006050 <HAL_RCC_ClockConfig+0x260>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 80dc 	beq.w	800601c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d13c      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xf6>
 8005e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e74:	fa93 f3a3 	rbit	r3, r3
 8005e78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e7c:	fab3 f383 	clz	r3, r3
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	f043 0301 	orr.w	r3, r3, #1
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d102      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xa6>
 8005e90:	4b6f      	ldr	r3, [pc, #444]	; (8006050 <HAL_RCC_ClockConfig+0x260>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	e00f      	b.n	8005eb6 <HAL_RCC_ClockConfig+0xc6>
 8005e96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e9e:	fa93 f3a3 	rbit	r3, r3
 8005ea2:	667b      	str	r3, [r7, #100]	; 0x64
 8005ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8005eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eac:	fa93 f3a3 	rbit	r3, r3
 8005eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eb2:	4b67      	ldr	r3, [pc, #412]	; (8006050 <HAL_RCC_ClockConfig+0x260>)
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005eba:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ebc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ebe:	fa92 f2a2 	rbit	r2, r2
 8005ec2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005ec4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ec6:	fab2 f282 	clz	r2, r2
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	f042 0220 	orr.w	r2, r2, #32
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	f002 021f 	and.w	r2, r2, #31
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8005edc:	4013      	ands	r3, r2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d17b      	bne.n	8005fda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e0f3      	b.n	80060ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d13c      	bne.n	8005f68 <HAL_RCC_ClockConfig+0x178>
 8005eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ef2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef6:	fa93 f3a3 	rbit	r3, r3
 8005efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005efe:	fab3 f383 	clz	r3, r3
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d102      	bne.n	8005f18 <HAL_RCC_ClockConfig+0x128>
 8005f12:	4b4f      	ldr	r3, [pc, #316]	; (8006050 <HAL_RCC_ClockConfig+0x260>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	e00f      	b.n	8005f38 <HAL_RCC_ClockConfig+0x148>
 8005f18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f20:	fa93 f3a3 	rbit	r3, r3
 8005f24:	647b      	str	r3, [r7, #68]	; 0x44
 8005f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2e:	fa93 f3a3 	rbit	r3, r3
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f34:	4b46      	ldr	r3, [pc, #280]	; (8006050 <HAL_RCC_ClockConfig+0x260>)
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f3c:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f40:	fa92 f2a2 	rbit	r2, r2
 8005f44:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f48:	fab2 f282 	clz	r2, r2
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	f042 0220 	orr.w	r2, r2, #32
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	f002 021f 	and.w	r2, r2, #31
 8005f58:	2101      	movs	r1, #1
 8005f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d13a      	bne.n	8005fda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0b2      	b.n	80060ce <HAL_RCC_ClockConfig+0x2de>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	fa93 f3a3 	rbit	r3, r3
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f76:	fab3 f383 	clz	r3, r3
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	095b      	lsrs	r3, r3, #5
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f043 0301 	orr.w	r3, r3, #1
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d102      	bne.n	8005f90 <HAL_RCC_ClockConfig+0x1a0>
 8005f8a:	4b31      	ldr	r3, [pc, #196]	; (8006050 <HAL_RCC_ClockConfig+0x260>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	e00d      	b.n	8005fac <HAL_RCC_ClockConfig+0x1bc>
 8005f90:	2302      	movs	r3, #2
 8005f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	fa93 f3a3 	rbit	r3, r3
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	623b      	str	r3, [r7, #32]
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	fa93 f3a3 	rbit	r3, r3
 8005fa6:	61fb      	str	r3, [r7, #28]
 8005fa8:	4b29      	ldr	r3, [pc, #164]	; (8006050 <HAL_RCC_ClockConfig+0x260>)
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	2202      	movs	r2, #2
 8005fae:	61ba      	str	r2, [r7, #24]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	fa92 f2a2 	rbit	r2, r2
 8005fb6:	617a      	str	r2, [r7, #20]
  return result;
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	fab2 f282 	clz	r2, r2
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	f042 0220 	orr.w	r2, r2, #32
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	f002 021f 	and.w	r2, r2, #31
 8005fca:	2101      	movs	r1, #1
 8005fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e079      	b.n	80060ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fda:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <HAL_RCC_ClockConfig+0x260>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f023 0203 	bic.w	r2, r3, #3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	491a      	ldr	r1, [pc, #104]	; (8006050 <HAL_RCC_ClockConfig+0x260>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fec:	f7fc f882 	bl	80020f4 <HAL_GetTick>
 8005ff0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff2:	e00a      	b.n	800600a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff4:	f7fc f87e 	bl	80020f4 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e061      	b.n	80060ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <HAL_RCC_ClockConfig+0x260>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f003 020c 	and.w	r2, r3, #12
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	429a      	cmp	r2, r3
 800601a:	d1eb      	bne.n	8005ff4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800601c:	4b0b      	ldr	r3, [pc, #44]	; (800604c <HAL_RCC_ClockConfig+0x25c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d214      	bcs.n	8006054 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <HAL_RCC_ClockConfig+0x25c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f023 0207 	bic.w	r2, r3, #7
 8006032:	4906      	ldr	r1, [pc, #24]	; (800604c <HAL_RCC_ClockConfig+0x25c>)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	4313      	orrs	r3, r2
 8006038:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800603a:	4b04      	ldr	r3, [pc, #16]	; (800604c <HAL_RCC_ClockConfig+0x25c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d005      	beq.n	8006054 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e040      	b.n	80060ce <HAL_RCC_ClockConfig+0x2de>
 800604c:	40022000 	.word	0x40022000
 8006050:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006060:	4b1d      	ldr	r3, [pc, #116]	; (80060d8 <HAL_RCC_ClockConfig+0x2e8>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	491a      	ldr	r1, [pc, #104]	; (80060d8 <HAL_RCC_ClockConfig+0x2e8>)
 800606e:	4313      	orrs	r3, r2
 8006070:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800607e:	4b16      	ldr	r3, [pc, #88]	; (80060d8 <HAL_RCC_ClockConfig+0x2e8>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4912      	ldr	r1, [pc, #72]	; (80060d8 <HAL_RCC_ClockConfig+0x2e8>)
 800608e:	4313      	orrs	r3, r2
 8006090:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006092:	f000 f829 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 8006096:	4601      	mov	r1, r0
 8006098:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <HAL_RCC_ClockConfig+0x2e8>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060a0:	22f0      	movs	r2, #240	; 0xf0
 80060a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	fa92 f2a2 	rbit	r2, r2
 80060aa:	60fa      	str	r2, [r7, #12]
  return result;
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	fab2 f282 	clz	r2, r2
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	40d3      	lsrs	r3, r2
 80060b6:	4a09      	ldr	r2, [pc, #36]	; (80060dc <HAL_RCC_ClockConfig+0x2ec>)
 80060b8:	5cd3      	ldrb	r3, [r2, r3]
 80060ba:	fa21 f303 	lsr.w	r3, r1, r3
 80060be:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <HAL_RCC_ClockConfig+0x2f0>)
 80060c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80060c2:	4b08      	ldr	r3, [pc, #32]	; (80060e4 <HAL_RCC_ClockConfig+0x2f4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fb ffd0 	bl	800206c <HAL_InitTick>
  
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3778      	adds	r7, #120	; 0x78
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	40021000 	.word	0x40021000
 80060dc:	0800c020 	.word	0x0800c020
 80060e0:	20000050 	.word	0x20000050
 80060e4:	2000005c 	.word	0x2000005c

080060e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b08b      	sub	sp, #44	; 0x2c
 80060ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	2300      	movs	r3, #0
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006102:	4b29      	ldr	r3, [pc, #164]	; (80061a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	2b04      	cmp	r3, #4
 8006110:	d002      	beq.n	8006118 <HAL_RCC_GetSysClockFreq+0x30>
 8006112:	2b08      	cmp	r3, #8
 8006114:	d003      	beq.n	800611e <HAL_RCC_GetSysClockFreq+0x36>
 8006116:	e03c      	b.n	8006192 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006118:	4b24      	ldr	r3, [pc, #144]	; (80061ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800611a:	623b      	str	r3, [r7, #32]
      break;
 800611c:	e03c      	b.n	8006198 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006124:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006128:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	fa92 f2a2 	rbit	r2, r2
 8006130:	607a      	str	r2, [r7, #4]
  return result;
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	fab2 f282 	clz	r2, r2
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	40d3      	lsrs	r3, r2
 800613c:	4a1c      	ldr	r2, [pc, #112]	; (80061b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800613e:	5cd3      	ldrb	r3, [r2, r3]
 8006140:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006142:	4b19      	ldr	r3, [pc, #100]	; (80061a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	220f      	movs	r2, #15
 800614c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	fa92 f2a2 	rbit	r2, r2
 8006154:	60fa      	str	r2, [r7, #12]
  return result;
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	fab2 f282 	clz	r2, r2
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	40d3      	lsrs	r3, r2
 8006160:	4a14      	ldr	r2, [pc, #80]	; (80061b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006162:	5cd3      	ldrb	r3, [r2, r3]
 8006164:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006170:	4a0e      	ldr	r2, [pc, #56]	; (80061ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	fbb2 f2f3 	udiv	r2, r2, r3
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	fb02 f303 	mul.w	r3, r2, r3
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
 8006180:	e004      	b.n	800618c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	4a0c      	ldr	r2, [pc, #48]	; (80061b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006186:	fb02 f303 	mul.w	r3, r2, r3
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	623b      	str	r3, [r7, #32]
      break;
 8006190:	e002      	b.n	8006198 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006192:	4b06      	ldr	r3, [pc, #24]	; (80061ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8006194:	623b      	str	r3, [r7, #32]
      break;
 8006196:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006198:	6a3b      	ldr	r3, [r7, #32]
}
 800619a:	4618      	mov	r0, r3
 800619c:	372c      	adds	r7, #44	; 0x2c
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40021000 	.word	0x40021000
 80061ac:	007a1200 	.word	0x007a1200
 80061b0:	0800c030 	.word	0x0800c030
 80061b4:	0800c040 	.word	0x0800c040
 80061b8:	003d0900 	.word	0x003d0900

080061bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b092      	sub	sp, #72	; 0x48
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80d4 	beq.w	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061e0:	4b4e      	ldr	r3, [pc, #312]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10e      	bne.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061ec:	4b4b      	ldr	r3, [pc, #300]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	4a4a      	ldr	r2, [pc, #296]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f6:	61d3      	str	r3, [r2, #28]
 80061f8:	4b48      	ldr	r3, [pc, #288]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006200:	60bb      	str	r3, [r7, #8]
 8006202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006204:	2301      	movs	r3, #1
 8006206:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620a:	4b45      	ldr	r3, [pc, #276]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d118      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006216:	4b42      	ldr	r3, [pc, #264]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a41      	ldr	r2, [pc, #260]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800621c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006220:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006222:	f7fb ff67 	bl	80020f4 <HAL_GetTick>
 8006226:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006228:	e008      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800622a:	f7fb ff63 	bl	80020f4 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b64      	cmp	r3, #100	; 0x64
 8006236:	d901      	bls.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e14b      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623c:	4b38      	ldr	r3, [pc, #224]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f0      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006248:	4b34      	ldr	r3, [pc, #208]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006250:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8084 	beq.w	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006262:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006264:	429a      	cmp	r2, r3
 8006266:	d07c      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006268:	4b2c      	ldr	r3, [pc, #176]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006276:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	fa93 f3a3 	rbit	r3, r3
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006282:	fab3 f383 	clz	r3, r3
 8006286:	b2db      	uxtb	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	4b26      	ldr	r3, [pc, #152]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	461a      	mov	r2, r3
 8006292:	2301      	movs	r3, #1
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800629a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	fa93 f3a3 	rbit	r3, r3
 80062a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062a6:	fab3 f383 	clz	r3, r3
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	4b1d      	ldr	r3, [pc, #116]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	461a      	mov	r2, r3
 80062b6:	2300      	movs	r3, #0
 80062b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062ba:	4a18      	ldr	r2, [pc, #96]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d04b      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ca:	f7fb ff13 	bl	80020f4 <HAL_GetTick>
 80062ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d0:	e00a      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d2:	f7fb ff0f 	bl	80020f4 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e0f5      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80062e8:	2302      	movs	r3, #2
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	fa93 f3a3 	rbit	r3, r3
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
 80062f4:	2302      	movs	r3, #2
 80062f6:	623b      	str	r3, [r7, #32]
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	fa93 f3a3 	rbit	r3, r3
 80062fe:	61fb      	str	r3, [r7, #28]
  return result;
 8006300:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006302:	fab3 f383 	clz	r3, r3
 8006306:	b2db      	uxtb	r3, r3
 8006308:	095b      	lsrs	r3, r3, #5
 800630a:	b2db      	uxtb	r3, r3
 800630c:	f043 0302 	orr.w	r3, r3, #2
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d108      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006316:	4b01      	ldr	r3, [pc, #4]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	e00d      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800631c:	40021000 	.word	0x40021000
 8006320:	40007000 	.word	0x40007000
 8006324:	10908100 	.word	0x10908100
 8006328:	2302      	movs	r3, #2
 800632a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	fa93 f3a3 	rbit	r3, r3
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	4b69      	ldr	r3, [pc, #420]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	2202      	movs	r2, #2
 800633a:	613a      	str	r2, [r7, #16]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	fa92 f2a2 	rbit	r2, r2
 8006342:	60fa      	str	r2, [r7, #12]
  return result;
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	fab2 f282 	clz	r2, r2
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	f002 021f 	and.w	r2, r2, #31
 8006356:	2101      	movs	r1, #1
 8006358:	fa01 f202 	lsl.w	r2, r1, r2
 800635c:	4013      	ands	r3, r2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0b7      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006362:	4b5e      	ldr	r3, [pc, #376]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	495b      	ldr	r1, [pc, #364]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006370:	4313      	orrs	r3, r2
 8006372:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006374:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006378:	2b01      	cmp	r3, #1
 800637a:	d105      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800637c:	4b57      	ldr	r3, [pc, #348]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	4a56      	ldr	r2, [pc, #344]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006386:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006394:	4b51      	ldr	r3, [pc, #324]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	f023 0203 	bic.w	r2, r3, #3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	494e      	ldr	r1, [pc, #312]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d008      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063b2:	4b4a      	ldr	r3, [pc, #296]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	4947      	ldr	r1, [pc, #284]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063d0:	4b42      	ldr	r3, [pc, #264]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	493f      	ldr	r1, [pc, #252]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063ee:	4b3b      	ldr	r3, [pc, #236]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	f023 0210 	bic.w	r2, r3, #16
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	4938      	ldr	r1, [pc, #224]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800640c:	4b33      	ldr	r3, [pc, #204]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006418:	4930      	ldr	r1, [pc, #192]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800641a:	4313      	orrs	r3, r2
 800641c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800642a:	4b2c      	ldr	r3, [pc, #176]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800642c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642e:	f023 0220 	bic.w	r2, r3, #32
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	4929      	ldr	r1, [pc, #164]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006438:	4313      	orrs	r3, r2
 800643a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d008      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006448:	4b24      	ldr	r3, [pc, #144]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	4921      	ldr	r1, [pc, #132]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006456:	4313      	orrs	r3, r2
 8006458:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0310 	and.w	r3, r3, #16
 8006462:	2b00      	cmp	r3, #0
 8006464:	d008      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006466:	4b1d      	ldr	r3, [pc, #116]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	491a      	ldr	r1, [pc, #104]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006474:	4313      	orrs	r3, r2
 8006476:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006484:	4b15      	ldr	r3, [pc, #84]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006490:	4912      	ldr	r1, [pc, #72]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006492:	4313      	orrs	r3, r2
 8006494:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d008      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064a2:	4b0e      	ldr	r3, [pc, #56]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80064a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	490b      	ldr	r1, [pc, #44]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d008      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80064c0:	4b06      	ldr	r3, [pc, #24]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	4903      	ldr	r1, [pc, #12]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3748      	adds	r7, #72	; 0x48
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40021000 	.word	0x40021000

080064e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e049      	b.n	8006586 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fb f820 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3304      	adds	r3, #4
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f000 fc1e 	bl	8006d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d001      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e045      	b.n	8006634 <HAL_TIM_Base_Start_IT+0xa4>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a1e      	ldr	r2, [pc, #120]	; (8006640 <HAL_TIM_Base_Start_IT+0xb0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d013      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0x62>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d2:	d00e      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0x62>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1a      	ldr	r2, [pc, #104]	; (8006644 <HAL_TIM_Base_Start_IT+0xb4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d009      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0x62>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a19      	ldr	r2, [pc, #100]	; (8006648 <HAL_TIM_Base_Start_IT+0xb8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d004      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0x62>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a17      	ldr	r2, [pc, #92]	; (800664c <HAL_TIM_Base_Start_IT+0xbc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d115      	bne.n	800661e <HAL_TIM_Base_Start_IT+0x8e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	4b15      	ldr	r3, [pc, #84]	; (8006650 <HAL_TIM_Base_Start_IT+0xc0>)
 80065fa:	4013      	ands	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b06      	cmp	r3, #6
 8006602:	d015      	beq.n	8006630 <HAL_TIM_Base_Start_IT+0xa0>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660a:	d011      	beq.n	8006630 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661c:	e008      	b.n	8006630 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 0201 	orr.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	e000      	b.n	8006632 <HAL_TIM_Base_Start_IT+0xa2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006630:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	40012c00 	.word	0x40012c00
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40014000 	.word	0x40014000
 8006650:	00010007 	.word	0x00010007

08006654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e049      	b.n	80066fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d106      	bne.n	8006680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f841 	bl	8006702 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3304      	adds	r3, #4
 8006690:	4619      	mov	r1, r3
 8006692:	4610      	mov	r0, r2
 8006694:	f000 fb64 	bl	8006d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b02      	cmp	r3, #2
 800672a:	d122      	bne.n	8006772 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b02      	cmp	r3, #2
 8006738:	d11b      	bne.n	8006772 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f06f 0202 	mvn.w	r2, #2
 8006742:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	f003 0303 	and.w	r3, r3, #3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fae2 	bl	8006d22 <HAL_TIM_IC_CaptureCallback>
 800675e:	e005      	b.n	800676c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fad4 	bl	8006d0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fae5 	bl	8006d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b04      	cmp	r3, #4
 800677e:	d122      	bne.n	80067c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f003 0304 	and.w	r3, r3, #4
 800678a:	2b04      	cmp	r3, #4
 800678c:	d11b      	bne.n	80067c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f06f 0204 	mvn.w	r2, #4
 8006796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fab8 	bl	8006d22 <HAL_TIM_IC_CaptureCallback>
 80067b2:	e005      	b.n	80067c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 faaa 	bl	8006d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fabb 	bl	8006d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d122      	bne.n	800681a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d11b      	bne.n	800681a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f06f 0208 	mvn.w	r2, #8
 80067ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2204      	movs	r2, #4
 80067f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f003 0303 	and.w	r3, r3, #3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fa8e 	bl	8006d22 <HAL_TIM_IC_CaptureCallback>
 8006806:	e005      	b.n	8006814 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fa80 	bl	8006d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa91 	bl	8006d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b10      	cmp	r3, #16
 8006826:	d122      	bne.n	800686e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b10      	cmp	r3, #16
 8006834:	d11b      	bne.n	800686e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f06f 0210 	mvn.w	r2, #16
 800683e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2208      	movs	r2, #8
 8006844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fa64 	bl	8006d22 <HAL_TIM_IC_CaptureCallback>
 800685a:	e005      	b.n	8006868 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fa56 	bl	8006d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa67 	bl	8006d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b01      	cmp	r3, #1
 800687a:	d10e      	bne.n	800689a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b01      	cmp	r3, #1
 8006888:	d107      	bne.n	800689a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f06f 0201 	mvn.w	r2, #1
 8006892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fb fb7d 	bl	8001f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a4:	2b80      	cmp	r3, #128	; 0x80
 80068a6:	d10e      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b2:	2b80      	cmp	r3, #128	; 0x80
 80068b4:	d107      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fe8d 	bl	80075e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d4:	d10e      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e0:	2b80      	cmp	r3, #128	; 0x80
 80068e2:	d107      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fe80 	bl	80075f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fe:	2b40      	cmp	r3, #64	; 0x40
 8006900:	d10e      	bne.n	8006920 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b40      	cmp	r3, #64	; 0x40
 800690e:	d107      	bne.n	8006920 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fa15 	bl	8006d4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b20      	cmp	r3, #32
 800692c:	d10e      	bne.n	800694c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b20      	cmp	r3, #32
 800693a:	d107      	bne.n	800694c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0220 	mvn.w	r2, #32
 8006944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fe40 	bl	80075cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800696e:	2302      	movs	r3, #2
 8006970:	e0ff      	b.n	8006b72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b14      	cmp	r3, #20
 800697e:	f200 80f0 	bhi.w	8006b62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006982:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006988:	080069dd 	.word	0x080069dd
 800698c:	08006b63 	.word	0x08006b63
 8006990:	08006b63 	.word	0x08006b63
 8006994:	08006b63 	.word	0x08006b63
 8006998:	08006a1d 	.word	0x08006a1d
 800699c:	08006b63 	.word	0x08006b63
 80069a0:	08006b63 	.word	0x08006b63
 80069a4:	08006b63 	.word	0x08006b63
 80069a8:	08006a5f 	.word	0x08006a5f
 80069ac:	08006b63 	.word	0x08006b63
 80069b0:	08006b63 	.word	0x08006b63
 80069b4:	08006b63 	.word	0x08006b63
 80069b8:	08006a9f 	.word	0x08006a9f
 80069bc:	08006b63 	.word	0x08006b63
 80069c0:	08006b63 	.word	0x08006b63
 80069c4:	08006b63 	.word	0x08006b63
 80069c8:	08006ae1 	.word	0x08006ae1
 80069cc:	08006b63 	.word	0x08006b63
 80069d0:	08006b63 	.word	0x08006b63
 80069d4:	08006b63 	.word	0x08006b63
 80069d8:	08006b21 	.word	0x08006b21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fa3e 	bl	8006e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0208 	orr.w	r2, r2, #8
 80069f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0204 	bic.w	r2, r2, #4
 8006a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6999      	ldr	r1, [r3, #24]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	619a      	str	r2, [r3, #24]
      break;
 8006a1a:	e0a5      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 faa4 	bl	8006f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6999      	ldr	r1, [r3, #24]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	021a      	lsls	r2, r3, #8
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	619a      	str	r2, [r3, #24]
      break;
 8006a5c:	e084      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fb03 	bl	8007070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0208 	orr.w	r2, r2, #8
 8006a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0204 	bic.w	r2, r2, #4
 8006a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69d9      	ldr	r1, [r3, #28]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	61da      	str	r2, [r3, #28]
      break;
 8006a9c:	e064      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fb61 	bl	800716c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69d9      	ldr	r1, [r3, #28]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	021a      	lsls	r2, r3, #8
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	61da      	str	r2, [r3, #28]
      break;
 8006ade:	e043      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fba4 	bl	8007234 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0208 	orr.w	r2, r2, #8
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0204 	bic.w	r2, r2, #4
 8006b0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b1e:	e023      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fbe2 	bl	80072f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	021a      	lsls	r2, r3, #8
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b60:	e002      	b.n	8006b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	75fb      	strb	r3, [r7, #23]
      break;
 8006b66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop

08006b7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_TIM_ConfigClockSource+0x1c>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e0b6      	b.n	8006d06 <HAL_TIM_ConfigClockSource+0x18a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd4:	d03e      	beq.n	8006c54 <HAL_TIM_ConfigClockSource+0xd8>
 8006bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bda:	f200 8087 	bhi.w	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be2:	f000 8086 	beq.w	8006cf2 <HAL_TIM_ConfigClockSource+0x176>
 8006be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bea:	d87f      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006bec:	2b70      	cmp	r3, #112	; 0x70
 8006bee:	d01a      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0xaa>
 8006bf0:	2b70      	cmp	r3, #112	; 0x70
 8006bf2:	d87b      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006bf4:	2b60      	cmp	r3, #96	; 0x60
 8006bf6:	d050      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x11e>
 8006bf8:	2b60      	cmp	r3, #96	; 0x60
 8006bfa:	d877      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006bfc:	2b50      	cmp	r3, #80	; 0x50
 8006bfe:	d03c      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0xfe>
 8006c00:	2b50      	cmp	r3, #80	; 0x50
 8006c02:	d873      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006c04:	2b40      	cmp	r3, #64	; 0x40
 8006c06:	d058      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0x13e>
 8006c08:	2b40      	cmp	r3, #64	; 0x40
 8006c0a:	d86f      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006c0c:	2b30      	cmp	r3, #48	; 0x30
 8006c0e:	d064      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x15e>
 8006c10:	2b30      	cmp	r3, #48	; 0x30
 8006c12:	d86b      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	d060      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x15e>
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d867      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d05c      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x15e>
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d05a      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x15e>
 8006c24:	e062      	b.n	8006cec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c36:	f000 fc35 	bl	80074a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	609a      	str	r2, [r3, #8]
      break;
 8006c52:	e04f      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c64:	f000 fc1e 	bl	80074a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c76:	609a      	str	r2, [r3, #8]
      break;
 8006c78:	e03c      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c86:	461a      	mov	r2, r3
 8006c88:	f000 fb92 	bl	80073b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2150      	movs	r1, #80	; 0x50
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fbeb 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 8006c98:	e02c      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f000 fbb1 	bl	800740e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2160      	movs	r1, #96	; 0x60
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fbdb 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 8006cb8:	e01c      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f000 fb72 	bl	80073b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2140      	movs	r1, #64	; 0x40
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fbcb 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 8006cd8:	e00c      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	f000 fbc2 	bl	800746e <TIM_ITRx_SetConfig>
      break;
 8006cea:	e003      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf0:	e000      	b.n	8006cf4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
	...

08006d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a36      	ldr	r2, [pc, #216]	; (8006e4c <TIM_Base_SetConfig+0xec>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00b      	beq.n	8006d90 <TIM_Base_SetConfig+0x30>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7e:	d007      	beq.n	8006d90 <TIM_Base_SetConfig+0x30>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a33      	ldr	r2, [pc, #204]	; (8006e50 <TIM_Base_SetConfig+0xf0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d003      	beq.n	8006d90 <TIM_Base_SetConfig+0x30>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a32      	ldr	r2, [pc, #200]	; (8006e54 <TIM_Base_SetConfig+0xf4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d108      	bne.n	8006da2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a29      	ldr	r2, [pc, #164]	; (8006e4c <TIM_Base_SetConfig+0xec>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d017      	beq.n	8006dda <TIM_Base_SetConfig+0x7a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db0:	d013      	beq.n	8006dda <TIM_Base_SetConfig+0x7a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a26      	ldr	r2, [pc, #152]	; (8006e50 <TIM_Base_SetConfig+0xf0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00f      	beq.n	8006dda <TIM_Base_SetConfig+0x7a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a25      	ldr	r2, [pc, #148]	; (8006e54 <TIM_Base_SetConfig+0xf4>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00b      	beq.n	8006dda <TIM_Base_SetConfig+0x7a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a24      	ldr	r2, [pc, #144]	; (8006e58 <TIM_Base_SetConfig+0xf8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d007      	beq.n	8006dda <TIM_Base_SetConfig+0x7a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a23      	ldr	r2, [pc, #140]	; (8006e5c <TIM_Base_SetConfig+0xfc>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d003      	beq.n	8006dda <TIM_Base_SetConfig+0x7a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a22      	ldr	r2, [pc, #136]	; (8006e60 <TIM_Base_SetConfig+0x100>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d108      	bne.n	8006dec <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a0e      	ldr	r2, [pc, #56]	; (8006e4c <TIM_Base_SetConfig+0xec>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00b      	beq.n	8006e30 <TIM_Base_SetConfig+0xd0>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a0f      	ldr	r2, [pc, #60]	; (8006e58 <TIM_Base_SetConfig+0xf8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d007      	beq.n	8006e30 <TIM_Base_SetConfig+0xd0>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a0e      	ldr	r2, [pc, #56]	; (8006e5c <TIM_Base_SetConfig+0xfc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_Base_SetConfig+0xd0>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a0d      	ldr	r2, [pc, #52]	; (8006e60 <TIM_Base_SetConfig+0x100>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d103      	bne.n	8006e38 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	615a      	str	r2, [r3, #20]
}
 8006e3e:	bf00      	nop
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40012c00 	.word	0x40012c00
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	40014400 	.word	0x40014400
 8006e60:	40014800 	.word	0x40014800

08006e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f023 0201 	bic.w	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f023 0302 	bic.w	r3, r3, #2
 8006eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a28      	ldr	r2, [pc, #160]	; (8006f60 <TIM_OC1_SetConfig+0xfc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00b      	beq.n	8006edc <TIM_OC1_SetConfig+0x78>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a27      	ldr	r2, [pc, #156]	; (8006f64 <TIM_OC1_SetConfig+0x100>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d007      	beq.n	8006edc <TIM_OC1_SetConfig+0x78>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a26      	ldr	r2, [pc, #152]	; (8006f68 <TIM_OC1_SetConfig+0x104>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_OC1_SetConfig+0x78>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a25      	ldr	r2, [pc, #148]	; (8006f6c <TIM_OC1_SetConfig+0x108>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d10c      	bne.n	8006ef6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f023 0308 	bic.w	r3, r3, #8
 8006ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f023 0304 	bic.w	r3, r3, #4
 8006ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a19      	ldr	r2, [pc, #100]	; (8006f60 <TIM_OC1_SetConfig+0xfc>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00b      	beq.n	8006f16 <TIM_OC1_SetConfig+0xb2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <TIM_OC1_SetConfig+0x100>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d007      	beq.n	8006f16 <TIM_OC1_SetConfig+0xb2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a17      	ldr	r2, [pc, #92]	; (8006f68 <TIM_OC1_SetConfig+0x104>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d003      	beq.n	8006f16 <TIM_OC1_SetConfig+0xb2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a16      	ldr	r2, [pc, #88]	; (8006f6c <TIM_OC1_SetConfig+0x108>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d111      	bne.n	8006f3a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	621a      	str	r2, [r3, #32]
}
 8006f54:	bf00      	nop
 8006f56:	371c      	adds	r7, #28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	40012c00 	.word	0x40012c00
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800

08006f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f023 0210 	bic.w	r2, r3, #16
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f023 0320 	bic.w	r3, r3, #32
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a24      	ldr	r2, [pc, #144]	; (8007060 <TIM_OC2_SetConfig+0xf0>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d10d      	bne.n	8006ff0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a1b      	ldr	r2, [pc, #108]	; (8007060 <TIM_OC2_SetConfig+0xf0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <TIM_OC2_SetConfig+0xa0>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a1a      	ldr	r2, [pc, #104]	; (8007064 <TIM_OC2_SetConfig+0xf4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d007      	beq.n	8007010 <TIM_OC2_SetConfig+0xa0>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a19      	ldr	r2, [pc, #100]	; (8007068 <TIM_OC2_SetConfig+0xf8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_OC2_SetConfig+0xa0>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a18      	ldr	r2, [pc, #96]	; (800706c <TIM_OC2_SetConfig+0xfc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d113      	bne.n	8007038 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007016:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800701e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	621a      	str	r2, [r3, #32]
}
 8007052:	bf00      	nop
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40014000 	.word	0x40014000
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800

08007070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0303 	bic.w	r3, r3, #3
 80070aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a23      	ldr	r2, [pc, #140]	; (800715c <TIM_OC3_SetConfig+0xec>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d10d      	bne.n	80070ee <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a1a      	ldr	r2, [pc, #104]	; (800715c <TIM_OC3_SetConfig+0xec>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00b      	beq.n	800710e <TIM_OC3_SetConfig+0x9e>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a19      	ldr	r2, [pc, #100]	; (8007160 <TIM_OC3_SetConfig+0xf0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d007      	beq.n	800710e <TIM_OC3_SetConfig+0x9e>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a18      	ldr	r2, [pc, #96]	; (8007164 <TIM_OC3_SetConfig+0xf4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d003      	beq.n	800710e <TIM_OC3_SetConfig+0x9e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a17      	ldr	r2, [pc, #92]	; (8007168 <TIM_OC3_SetConfig+0xf8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d113      	bne.n	8007136 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800711c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	621a      	str	r2, [r3, #32]
}
 8007150:	bf00      	nop
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	40012c00 	.word	0x40012c00
 8007160:	40014000 	.word	0x40014000
 8007164:	40014400 	.word	0x40014400
 8007168:	40014800 	.word	0x40014800

0800716c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800719a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	031b      	lsls	r3, r3, #12
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a16      	ldr	r2, [pc, #88]	; (8007224 <TIM_OC4_SetConfig+0xb8>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00b      	beq.n	80071e8 <TIM_OC4_SetConfig+0x7c>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a15      	ldr	r2, [pc, #84]	; (8007228 <TIM_OC4_SetConfig+0xbc>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d007      	beq.n	80071e8 <TIM_OC4_SetConfig+0x7c>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a14      	ldr	r2, [pc, #80]	; (800722c <TIM_OC4_SetConfig+0xc0>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <TIM_OC4_SetConfig+0x7c>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a13      	ldr	r2, [pc, #76]	; (8007230 <TIM_OC4_SetConfig+0xc4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d109      	bne.n	80071fc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	019b      	lsls	r3, r3, #6
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40012c00 	.word	0x40012c00
 8007228:	40014000 	.word	0x40014000
 800722c:	40014400 	.word	0x40014400
 8007230:	40014800 	.word	0x40014800

08007234 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007278:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <TIM_OC5_SetConfig+0xac>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d00b      	beq.n	80072a6 <TIM_OC5_SetConfig+0x72>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a14      	ldr	r2, [pc, #80]	; (80072e4 <TIM_OC5_SetConfig+0xb0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d007      	beq.n	80072a6 <TIM_OC5_SetConfig+0x72>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a13      	ldr	r2, [pc, #76]	; (80072e8 <TIM_OC5_SetConfig+0xb4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d003      	beq.n	80072a6 <TIM_OC5_SetConfig+0x72>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a12      	ldr	r2, [pc, #72]	; (80072ec <TIM_OC5_SetConfig+0xb8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d109      	bne.n	80072ba <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	021b      	lsls	r3, r3, #8
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	621a      	str	r2, [r3, #32]
}
 80072d4:	bf00      	nop
 80072d6:	371c      	adds	r7, #28
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	40012c00 	.word	0x40012c00
 80072e4:	40014000 	.word	0x40014000
 80072e8:	40014400 	.word	0x40014400
 80072ec:	40014800 	.word	0x40014800

080072f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800731e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	021b      	lsls	r3, r3, #8
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	4313      	orrs	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	051b      	lsls	r3, r3, #20
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	4313      	orrs	r3, r2
 8007342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a16      	ldr	r2, [pc, #88]	; (80073a0 <TIM_OC6_SetConfig+0xb0>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00b      	beq.n	8007364 <TIM_OC6_SetConfig+0x74>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a15      	ldr	r2, [pc, #84]	; (80073a4 <TIM_OC6_SetConfig+0xb4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d007      	beq.n	8007364 <TIM_OC6_SetConfig+0x74>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a14      	ldr	r2, [pc, #80]	; (80073a8 <TIM_OC6_SetConfig+0xb8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <TIM_OC6_SetConfig+0x74>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a13      	ldr	r2, [pc, #76]	; (80073ac <TIM_OC6_SetConfig+0xbc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d109      	bne.n	8007378 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800736a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	029b      	lsls	r3, r3, #10
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	621a      	str	r2, [r3, #32]
}
 8007392:	bf00      	nop
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	40012c00 	.word	0x40012c00
 80073a4:	40014000 	.word	0x40014000
 80073a8:	40014400 	.word	0x40014400
 80073ac:	40014800 	.word	0x40014800

080073b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f023 0201 	bic.w	r2, r3, #1
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f023 030a 	bic.w	r3, r3, #10
 80073ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800740e:	b480      	push	{r7}
 8007410:	b087      	sub	sp, #28
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f023 0210 	bic.w	r2, r3, #16
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	031b      	lsls	r3, r3, #12
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	4313      	orrs	r3, r2
 8007442:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800744a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	621a      	str	r2, [r3, #32]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4313      	orrs	r3, r2
 800748c:	f043 0307 	orr.w	r3, r3, #7
 8007490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	609a      	str	r2, [r3, #8]
}
 8007498:	bf00      	nop
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	021a      	lsls	r2, r3, #8
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	431a      	orrs	r2, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	609a      	str	r2, [r3, #8]
}
 80074d8:	bf00      	nop
 80074da:	371c      	adds	r7, #28
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e059      	b.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a26      	ldr	r2, [pc, #152]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d108      	bne.n	8007538 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800752c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4313      	orrs	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a19      	ldr	r2, [pc, #100]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d013      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007564:	d00e      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a15      	ldr	r2, [pc, #84]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d009      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a13      	ldr	r2, [pc, #76]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d004      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a12      	ldr	r2, [pc, #72]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d10c      	bne.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xba>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800758a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	4313      	orrs	r3, r2
 8007594:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	40012c00 	.word	0x40012c00
 80075c0:	40000400 	.word	0x40000400
 80075c4:	40000800 	.word	0x40000800
 80075c8:	40014000 	.word	0x40014000

080075cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007618:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800761c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	b29a      	uxth	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007636:	b480      	push	{r7}
 8007638:	b085      	sub	sp, #20
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800763e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007642:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800764a:	b29a      	uxth	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	b29b      	uxth	r3, r3
 8007650:	43db      	mvns	r3, r3
 8007652:	b29b      	uxth	r3, r3
 8007654:	4013      	ands	r3, r2
 8007656:	b29a      	uxth	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800766c:	b084      	sub	sp, #16
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	f107 0014 	add.w	r0, r7, #20
 800767a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	b004      	add	sp, #16
 80076ac:	4770      	bx	lr
	...

080076b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b09d      	sub	sp, #116	; 0x74
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80076d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	78db      	ldrb	r3, [r3, #3]
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d81f      	bhi.n	8007722 <USB_ActivateEndpoint+0x72>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <USB_ActivateEndpoint+0x38>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	080076f9 	.word	0x080076f9
 80076ec:	08007715 	.word	0x08007715
 80076f0:	0800772b 	.word	0x0800772b
 80076f4:	08007707 	.word	0x08007707
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80076f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007700:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007704:	e012      	b.n	800772c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007706:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800770a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800770e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007712:	e00b      	b.n	800772c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007714:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007718:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800771c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007720:	e004      	b.n	800772c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007728:	e000      	b.n	800772c <USB_ActivateEndpoint+0x7c>
      break;
 800772a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	441a      	add	r2, r3
 8007736:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800773a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800773e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774a:	b29b      	uxth	r3, r3
 800774c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	b21b      	sxth	r3, r3
 800775e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007766:	b21a      	sxth	r2, r3
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	b21b      	sxth	r3, r3
 800776e:	4313      	orrs	r3, r2
 8007770:	b21b      	sxth	r3, r3
 8007772:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	441a      	add	r2, r3
 8007780:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007794:	b29b      	uxth	r3, r3
 8007796:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	7b1b      	ldrb	r3, [r3, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 8178 	bne.w	8007a92 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 8084 	beq.w	80078b4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	61bb      	str	r3, [r7, #24]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	4413      	add	r3, r2
 80077be:	61bb      	str	r3, [r7, #24]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	011a      	lsls	r2, r3, #4
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	88db      	ldrh	r3, [r3, #6]
 80077d4:	085b      	lsrs	r3, r3, #1
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	827b      	strh	r3, [r7, #18]
 80077ee:	8a7b      	ldrh	r3, [r7, #18]
 80077f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01b      	beq.n	8007830 <USB_ActivateEndpoint+0x180>
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	b29b      	uxth	r3, r3
 8007806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800780a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780e:	823b      	strh	r3, [r7, #16]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	441a      	add	r2, r3
 800781a:	8a3b      	ldrh	r3, [r7, #16]
 800781c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007828:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800782c:	b29b      	uxth	r3, r3
 800782e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	78db      	ldrb	r3, [r3, #3]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d020      	beq.n	800787a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800784e:	81bb      	strh	r3, [r7, #12]
 8007850:	89bb      	ldrh	r3, [r7, #12]
 8007852:	f083 0320 	eor.w	r3, r3, #32
 8007856:	81bb      	strh	r3, [r7, #12]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	441a      	add	r2, r3
 8007862:	89bb      	ldrh	r3, [r7, #12]
 8007864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800786c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007874:	b29b      	uxth	r3, r3
 8007876:	8013      	strh	r3, [r2, #0]
 8007878:	e2d5      	b.n	8007e26 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800788c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007890:	81fb      	strh	r3, [r7, #14]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	441a      	add	r2, r3
 800789c:	89fb      	ldrh	r3, [r7, #14]
 800789e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	8013      	strh	r3, [r2, #0]
 80078b2:	e2b8      	b.n	8007e26 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	633b      	str	r3, [r7, #48]	; 0x30
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078be:	b29b      	uxth	r3, r3
 80078c0:	461a      	mov	r2, r3
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	4413      	add	r3, r2
 80078c6:	633b      	str	r3, [r7, #48]	; 0x30
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	011a      	lsls	r2, r3, #4
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80078d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	88db      	ldrh	r3, [r3, #6]
 80078dc:	085b      	lsrs	r3, r3, #1
 80078de:	b29b      	uxth	r3, r3
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	4413      	add	r3, r2
 80078fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	011a      	lsls	r2, r3, #4
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	4413      	add	r3, r2
 8007906:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007916:	b29a      	uxth	r2, r3
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	801a      	strh	r2, [r3, #0]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	2b3e      	cmp	r3, #62	; 0x3e
 8007922:	d91d      	bls.n	8007960 <USB_ActivateEndpoint+0x2b0>
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	095b      	lsrs	r3, r3, #5
 800792a:	66bb      	str	r3, [r7, #104]	; 0x68
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2b00      	cmp	r3, #0
 8007936:	d102      	bne.n	800793e <USB_ActivateEndpoint+0x28e>
 8007938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800793a:	3b01      	subs	r3, #1
 800793c:	66bb      	str	r3, [r7, #104]	; 0x68
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29a      	uxth	r2, r3
 8007944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007946:	b29b      	uxth	r3, r3
 8007948:	029b      	lsls	r3, r3, #10
 800794a:	b29b      	uxth	r3, r3
 800794c:	4313      	orrs	r3, r2
 800794e:	b29b      	uxth	r3, r3
 8007950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007958:	b29a      	uxth	r2, r3
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	801a      	strh	r2, [r3, #0]
 800795e:	e026      	b.n	80079ae <USB_ActivateEndpoint+0x2fe>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10a      	bne.n	800797e <USB_ActivateEndpoint+0x2ce>
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	b29b      	uxth	r3, r3
 800796e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007976:	b29a      	uxth	r2, r3
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	801a      	strh	r2, [r3, #0]
 800797c:	e017      	b.n	80079ae <USB_ActivateEndpoint+0x2fe>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	085b      	lsrs	r3, r3, #1
 8007984:	66bb      	str	r3, [r7, #104]	; 0x68
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <USB_ActivateEndpoint+0x2e8>
 8007992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007994:	3301      	adds	r3, #1
 8007996:	66bb      	str	r3, [r7, #104]	; 0x68
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b29a      	uxth	r2, r3
 800799e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	029b      	lsls	r3, r3, #10
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	4313      	orrs	r3, r2
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80079bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80079be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01b      	beq.n	80079fe <USB_ActivateEndpoint+0x34e>
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079dc:	843b      	strh	r3, [r7, #32]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	8c3b      	ldrh	r3, [r7, #32]
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d124      	bne.n	8007a50 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1c:	83bb      	strh	r3, [r7, #28]
 8007a1e:	8bbb      	ldrh	r3, [r7, #28]
 8007a20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a24:	83bb      	strh	r3, [r7, #28]
 8007a26:	8bbb      	ldrh	r3, [r7, #28]
 8007a28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a2c:	83bb      	strh	r3, [r7, #28]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	441a      	add	r2, r3
 8007a38:	8bbb      	ldrh	r3, [r7, #28]
 8007a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	8013      	strh	r3, [r2, #0]
 8007a4e:	e1ea      	b.n	8007e26 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a66:	83fb      	strh	r3, [r7, #30]
 8007a68:	8bfb      	ldrh	r3, [r7, #30]
 8007a6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a6e:	83fb      	strh	r3, [r7, #30]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	441a      	add	r2, r3
 8007a7a:	8bfb      	ldrh	r3, [r7, #30]
 8007a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	8013      	strh	r3, [r2, #0]
 8007a90:	e1c9      	b.n	8007e26 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	78db      	ldrb	r3, [r3, #3]
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d11e      	bne.n	8007ad8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	441a      	add	r2, r3
 8007abe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	8013      	strh	r3, [r2, #0]
 8007ad6:	e01d      	b.n	8007b14 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	441a      	add	r2, r3
 8007afc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	461a      	mov	r2, r3
 8007b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b24:	4413      	add	r3, r2
 8007b26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	011a      	lsls	r2, r3, #4
 8007b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b36:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	891b      	ldrh	r3, [r3, #8]
 8007b3c:	085b      	lsrs	r3, r3, #1
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b46:	801a      	strh	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	657b      	str	r3, [r7, #84]	; 0x54
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	461a      	mov	r2, r3
 8007b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b58:	4413      	add	r3, r2
 8007b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	011a      	lsls	r2, r3, #4
 8007b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	895b      	ldrh	r3, [r3, #10]
 8007b70:	085b      	lsrs	r3, r3, #1
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b7a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f040 8093 	bne.w	8007cac <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	881b      	ldrh	r3, [r3, #0]
 8007b92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d01b      	beq.n	8007bda <USB_ActivateEndpoint+0x52a>
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	441a      	add	r2, r3
 8007bc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007be8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d01b      	beq.n	8007c2a <USB_ActivateEndpoint+0x57a>
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c08:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	441a      	add	r2, r3
 8007c14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c40:	873b      	strh	r3, [r7, #56]	; 0x38
 8007c42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c48:	873b      	strh	r3, [r7, #56]	; 0x38
 8007c4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c50:	873b      	strh	r3, [r7, #56]	; 0x38
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	441a      	add	r2, r3
 8007c5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c88:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	441a      	add	r2, r3
 8007c94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	8013      	strh	r3, [r2, #0]
 8007caa:	e0bc      	b.n	8007e26 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007cbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01d      	beq.n	8007d04 <USB_ActivateEndpoint+0x654>
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cde:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	441a      	add	r2, r3
 8007cec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007d14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01d      	beq.n	8007d5c <USB_ActivateEndpoint+0x6ac>
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	441a      	add	r2, r3
 8007d44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	78db      	ldrb	r3, [r3, #3]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d024      	beq.n	8007dae <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007d7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d82:	f083 0320 	eor.w	r3, r3, #32
 8007d86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	441a      	add	r2, r3
 8007d94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	8013      	strh	r3, [r2, #0]
 8007dac:	e01d      	b.n	8007dea <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	441a      	add	r2, r3
 8007dd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	441a      	add	r2, r3
 8007e0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007e26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3774      	adds	r7, #116	; 0x74
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop

08007e38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b08d      	sub	sp, #52	; 0x34
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	7b1b      	ldrb	r3, [r3, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f040 808e 	bne.w	8007f68 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d044      	beq.n	8007ede <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	81bb      	strh	r3, [r7, #12]
 8007e62:	89bb      	ldrh	r3, [r7, #12]
 8007e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01b      	beq.n	8007ea4 <USB_DeactivateEndpoint+0x6c>
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e82:	817b      	strh	r3, [r7, #10]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	441a      	add	r2, r3
 8007e8e:	897b      	ldrh	r3, [r7, #10]
 8007e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eba:	813b      	strh	r3, [r7, #8]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	441a      	add	r2, r3
 8007ec6:	893b      	ldrh	r3, [r7, #8]
 8007ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	8013      	strh	r3, [r2, #0]
 8007edc:	e192      	b.n	8008204 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	827b      	strh	r3, [r7, #18]
 8007eec:	8a7b      	ldrh	r3, [r7, #18]
 8007eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d01b      	beq.n	8007f2e <USB_DeactivateEndpoint+0xf6>
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0c:	823b      	strh	r3, [r7, #16]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	441a      	add	r2, r3
 8007f18:	8a3b      	ldrh	r3, [r7, #16]
 8007f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f44:	81fb      	strh	r3, [r7, #14]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	441a      	add	r2, r3
 8007f50:	89fb      	ldrh	r3, [r7, #14]
 8007f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	8013      	strh	r3, [r2, #0]
 8007f66:	e14d      	b.n	8008204 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f040 80a5 	bne.w	80080bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	843b      	strh	r3, [r7, #32]
 8007f80:	8c3b      	ldrh	r3, [r7, #32]
 8007f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d01b      	beq.n	8007fc2 <USB_DeactivateEndpoint+0x18a>
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa0:	83fb      	strh	r3, [r7, #30]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	441a      	add	r2, r3
 8007fac:	8bfb      	ldrh	r3, [r7, #30]
 8007fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	83bb      	strh	r3, [r7, #28]
 8007fd0:	8bbb      	ldrh	r3, [r7, #28]
 8007fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d01b      	beq.n	8008012 <USB_DeactivateEndpoint+0x1da>
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff0:	837b      	strh	r3, [r7, #26]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	441a      	add	r2, r3
 8007ffc:	8b7b      	ldrh	r3, [r7, #26]
 8007ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800800a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800800e:	b29b      	uxth	r3, r3
 8008010:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008028:	833b      	strh	r3, [r7, #24]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	441a      	add	r2, r3
 8008034:	8b3b      	ldrh	r3, [r7, #24]
 8008036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800803a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800803e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008042:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008046:	b29b      	uxth	r3, r3
 8008048:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29b      	uxth	r3, r3
 8008058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800805c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008060:	82fb      	strh	r3, [r7, #22]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	441a      	add	r2, r3
 800806c:	8afb      	ldrh	r3, [r7, #22]
 800806e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800807a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807e:	b29b      	uxth	r3, r3
 8008080:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	b29b      	uxth	r3, r3
 8008090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008098:	82bb      	strh	r3, [r7, #20]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	441a      	add	r2, r3
 80080a4:	8abb      	ldrh	r3, [r7, #20]
 80080a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	8013      	strh	r3, [r2, #0]
 80080ba:	e0a3      	b.n	8008204 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80080ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01b      	beq.n	800810c <USB_DeactivateEndpoint+0x2d4>
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	441a      	add	r2, r3
 80080f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80080f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008108:	b29b      	uxth	r3, r3
 800810a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	857b      	strh	r3, [r7, #42]	; 0x2a
 800811a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800811c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008120:	2b00      	cmp	r3, #0
 8008122:	d01b      	beq.n	800815c <USB_DeactivateEndpoint+0x324>
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	b29b      	uxth	r3, r3
 8008132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813a:	853b      	strh	r3, [r7, #40]	; 0x28
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	441a      	add	r2, r3
 8008146:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800814c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008154:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008158:	b29b      	uxth	r3, r3
 800815a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	b29b      	uxth	r3, r3
 800816a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800816e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008172:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	441a      	add	r2, r3
 800817e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800818c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008190:	b29b      	uxth	r3, r3
 8008192:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	441a      	add	r2, r3
 80081b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	441a      	add	r2, r3
 80081ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008200:	b29b      	uxth	r3, r3
 8008202:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3734      	adds	r7, #52	; 0x34
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b0c2      	sub	sp, #264	; 0x108
 8008216:	af00      	add	r7, sp, #0
 8008218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008220:	6018      	str	r0, [r3, #0]
 8008222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800822c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	785b      	ldrb	r3, [r3, #1]
 8008238:	2b01      	cmp	r3, #1
 800823a:	f040 86b7 	bne.w	8008fac <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800823e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	699a      	ldr	r2, [r3, #24]
 800824a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	429a      	cmp	r2, r3
 8008258:	d908      	bls.n	800826c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800825a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800826a:	e007      	b.n	800827c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800826c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800827c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	7b1b      	ldrb	r3, [r3, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d13a      	bne.n	8008302 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800828c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	6959      	ldr	r1, [r3, #20]
 8008298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	88da      	ldrh	r2, [r3, #6]
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80082ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80082b2:	6800      	ldr	r0, [r0, #0]
 80082b4:	f001 fc8c 	bl	8009bd0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80082b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	613b      	str	r3, [r7, #16]
 80082c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	4413      	add	r3, r2
 80082da:	613b      	str	r3, [r7, #16]
 80082dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	011a      	lsls	r2, r3, #4
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	4413      	add	r3, r2
 80082ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	801a      	strh	r2, [r3, #0]
 80082fe:	f000 be1f 	b.w	8008f40 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	78db      	ldrb	r3, [r3, #3]
 800830e:	2b02      	cmp	r3, #2
 8008310:	f040 8462 	bne.w	8008bd8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6a1a      	ldr	r2, [r3, #32]
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	429a      	cmp	r2, r3
 800832e:	f240 83df 	bls.w	8008af0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008358:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800835c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	441a      	add	r2, r3
 8008376:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800837a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800837e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008382:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838a:	b29b      	uxth	r3, r3
 800838c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800838e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6a1a      	ldr	r2, [r3, #32]
 800839a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80083ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 81c7 	beq.w	8008762 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80083d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	633b      	str	r3, [r7, #48]	; 0x30
 80083e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	785b      	ldrb	r3, [r3, #1]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d177      	bne.n	80084e0 <USB_EPStartXfer+0x2ce>
 80083f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80083fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800840a:	b29b      	uxth	r3, r3
 800840c:	461a      	mov	r2, r3
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	4413      	add	r3, r2
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
 8008414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	011a      	lsls	r2, r3, #4
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	4413      	add	r3, r2
 8008426:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800842a:	627b      	str	r3, [r7, #36]	; 0x24
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b29b      	uxth	r3, r3
 8008432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008436:	b29a      	uxth	r2, r3
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	801a      	strh	r2, [r3, #0]
 800843c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008440:	2b3e      	cmp	r3, #62	; 0x3e
 8008442:	d921      	bls.n	8008488 <USB_EPStartXfer+0x276>
 8008444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008448:	095b      	lsrs	r3, r3, #5
 800844a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800844e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008452:	f003 031f 	and.w	r3, r3, #31
 8008456:	2b00      	cmp	r3, #0
 8008458:	d104      	bne.n	8008464 <USB_EPStartXfer+0x252>
 800845a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800845e:	3b01      	subs	r3, #1
 8008460:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	b29a      	uxth	r2, r3
 800846a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800846e:	b29b      	uxth	r3, r3
 8008470:	029b      	lsls	r3, r3, #10
 8008472:	b29b      	uxth	r3, r3
 8008474:	4313      	orrs	r3, r2
 8008476:	b29b      	uxth	r3, r3
 8008478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008480:	b29a      	uxth	r2, r3
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	801a      	strh	r2, [r3, #0]
 8008486:	e050      	b.n	800852a <USB_EPStartXfer+0x318>
 8008488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <USB_EPStartXfer+0x294>
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	b29b      	uxth	r3, r3
 8008496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800849a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800849e:	b29a      	uxth	r2, r3
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	e041      	b.n	800852a <USB_EPStartXfer+0x318>
 80084a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084aa:	085b      	lsrs	r3, r3, #1
 80084ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d004      	beq.n	80084c6 <USB_EPStartXfer+0x2b4>
 80084bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084c0:	3301      	adds	r3, #1
 80084c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	029b      	lsls	r3, r3, #10
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	4313      	orrs	r3, r2
 80084d8:	b29a      	uxth	r2, r3
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	e024      	b.n	800852a <USB_EPStartXfer+0x318>
 80084e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d11c      	bne.n	800852a <USB_EPStartXfer+0x318>
 80084f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084fe:	b29b      	uxth	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	4413      	add	r3, r2
 8008506:	633b      	str	r3, [r7, #48]	; 0x30
 8008508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	011a      	lsls	r2, r3, #4
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	4413      	add	r3, r2
 800851a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008524:	b29a      	uxth	r2, r3
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800852a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	895b      	ldrh	r3, [r3, #10]
 8008536:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800853a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800853e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6959      	ldr	r1, [r3, #20]
 8008546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854a:	b29b      	uxth	r3, r3
 800854c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008550:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008554:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008558:	6800      	ldr	r0, [r0, #0]
 800855a:	f001 fb39 	bl	8009bd0 <USB_WritePMA>
            ep->xfer_buff += len;
 800855e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695a      	ldr	r2, [r3, #20]
 800856a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800856e:	441a      	add	r2, r3
 8008570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800857c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6a1a      	ldr	r2, [r3, #32]
 8008588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800858c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	429a      	cmp	r2, r3
 8008596:	d90f      	bls.n	80085b8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6a1a      	ldr	r2, [r3, #32]
 80085a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a8:	1ad2      	subs	r2, r2, r3
 80085aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	621a      	str	r2, [r3, #32]
 80085b6:	e00e      	b.n	80085d6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80085b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80085c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2200      	movs	r2, #0
 80085d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	785b      	ldrb	r3, [r3, #1]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d177      	bne.n	80086d6 <USB_EPStartXfer+0x4c4>
 80085e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	61bb      	str	r3, [r7, #24]
 80085f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008600:	b29b      	uxth	r3, r3
 8008602:	461a      	mov	r2, r3
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	4413      	add	r3, r2
 8008608:	61bb      	str	r3, [r7, #24]
 800860a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800860e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	011a      	lsls	r2, r3, #4
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	4413      	add	r3, r2
 800861c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800862c:	b29a      	uxth	r2, r3
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	801a      	strh	r2, [r3, #0]
 8008632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008636:	2b3e      	cmp	r3, #62	; 0x3e
 8008638:	d921      	bls.n	800867e <USB_EPStartXfer+0x46c>
 800863a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800863e:	095b      	lsrs	r3, r3, #5
 8008640:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008648:	f003 031f 	and.w	r3, r3, #31
 800864c:	2b00      	cmp	r3, #0
 800864e:	d104      	bne.n	800865a <USB_EPStartXfer+0x448>
 8008650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008654:	3b01      	subs	r3, #1
 8008656:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29a      	uxth	r2, r3
 8008660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008664:	b29b      	uxth	r3, r3
 8008666:	029b      	lsls	r3, r3, #10
 8008668:	b29b      	uxth	r3, r3
 800866a:	4313      	orrs	r3, r2
 800866c:	b29b      	uxth	r3, r3
 800866e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008676:	b29a      	uxth	r2, r3
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	801a      	strh	r2, [r3, #0]
 800867c:	e056      	b.n	800872c <USB_EPStartXfer+0x51a>
 800867e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10a      	bne.n	800869c <USB_EPStartXfer+0x48a>
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	b29b      	uxth	r3, r3
 800868c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008694:	b29a      	uxth	r2, r3
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	801a      	strh	r2, [r3, #0]
 800869a:	e047      	b.n	800872c <USB_EPStartXfer+0x51a>
 800869c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a0:	085b      	lsrs	r3, r3, #1
 80086a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d004      	beq.n	80086bc <USB_EPStartXfer+0x4aa>
 80086b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086b6:	3301      	adds	r3, #1
 80086b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	029b      	lsls	r3, r3, #10
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	4313      	orrs	r3, r2
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	e02a      	b.n	800872c <USB_EPStartXfer+0x51a>
 80086d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	785b      	ldrb	r3, [r3, #1]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d122      	bne.n	800872c <USB_EPStartXfer+0x51a>
 80086e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	623b      	str	r3, [r7, #32]
 80086f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008700:	b29b      	uxth	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	4413      	add	r3, r2
 8008708:	623b      	str	r3, [r7, #32]
 800870a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	011a      	lsls	r2, r3, #4
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	4413      	add	r3, r2
 800871c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008720:	61fb      	str	r3, [r7, #28]
 8008722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008726:	b29a      	uxth	r2, r3
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800872c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	891b      	ldrh	r3, [r3, #8]
 8008738:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800873c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6959      	ldr	r1, [r3, #20]
 8008748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800874c:	b29b      	uxth	r3, r3
 800874e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008752:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008756:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800875a:	6800      	ldr	r0, [r0, #0]
 800875c:	f001 fa38 	bl	8009bd0 <USB_WritePMA>
 8008760:	e3ee      	b.n	8008f40 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	785b      	ldrb	r3, [r3, #1]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d177      	bne.n	8008862 <USB_EPStartXfer+0x650>
 8008772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	64bb      	str	r3, [r7, #72]	; 0x48
 800877e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800878c:	b29b      	uxth	r3, r3
 800878e:	461a      	mov	r2, r3
 8008790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008792:	4413      	add	r3, r2
 8008794:	64bb      	str	r3, [r7, #72]	; 0x48
 8008796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	011a      	lsls	r2, r3, #4
 80087a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087a6:	4413      	add	r3, r2
 80087a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087ac:	647b      	str	r3, [r7, #68]	; 0x44
 80087ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087bc:	801a      	strh	r2, [r3, #0]
 80087be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c2:	2b3e      	cmp	r3, #62	; 0x3e
 80087c4:	d921      	bls.n	800880a <USB_EPStartXfer+0x5f8>
 80087c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ca:	095b      	lsrs	r3, r3, #5
 80087cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <USB_EPStartXfer+0x5d4>
 80087dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087e0:	3b01      	subs	r3, #1
 80087e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	029b      	lsls	r3, r3, #10
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	4313      	orrs	r3, r2
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008802:	b29a      	uxth	r2, r3
 8008804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008806:	801a      	strh	r2, [r3, #0]
 8008808:	e056      	b.n	80088b8 <USB_EPStartXfer+0x6a6>
 800880a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10a      	bne.n	8008828 <USB_EPStartXfer+0x616>
 8008812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	b29b      	uxth	r3, r3
 8008818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800881c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008820:	b29a      	uxth	r2, r3
 8008822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008824:	801a      	strh	r2, [r3, #0]
 8008826:	e047      	b.n	80088b8 <USB_EPStartXfer+0x6a6>
 8008828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800882c:	085b      	lsrs	r3, r3, #1
 800882e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d004      	beq.n	8008848 <USB_EPStartXfer+0x636>
 800883e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008842:	3301      	adds	r3, #1
 8008844:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	b29a      	uxth	r2, r3
 800884e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008852:	b29b      	uxth	r3, r3
 8008854:	029b      	lsls	r3, r3, #10
 8008856:	b29b      	uxth	r3, r3
 8008858:	4313      	orrs	r3, r2
 800885a:	b29a      	uxth	r2, r3
 800885c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800885e:	801a      	strh	r2, [r3, #0]
 8008860:	e02a      	b.n	80088b8 <USB_EPStartXfer+0x6a6>
 8008862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	785b      	ldrb	r3, [r3, #1]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d122      	bne.n	80088b8 <USB_EPStartXfer+0x6a6>
 8008872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	653b      	str	r3, [r7, #80]	; 0x50
 800887e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800888c:	b29b      	uxth	r3, r3
 800888e:	461a      	mov	r2, r3
 8008890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008892:	4413      	add	r3, r2
 8008894:	653b      	str	r3, [r7, #80]	; 0x50
 8008896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	011a      	lsls	r2, r3, #4
 80088a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a6:	4413      	add	r3, r2
 80088a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80088b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	891b      	ldrh	r3, [r3, #8]
 80088c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6959      	ldr	r1, [r3, #20]
 80088d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088d8:	b29b      	uxth	r3, r3
 80088da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80088de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80088e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80088e6:	6800      	ldr	r0, [r0, #0]
 80088e8:	f001 f972 	bl	8009bd0 <USB_WritePMA>
            ep->xfer_buff += len;
 80088ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	695a      	ldr	r2, [r3, #20]
 80088f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088fc:	441a      	add	r2, r3
 80088fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800890a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6a1a      	ldr	r2, [r3, #32]
 8008916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800891a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	429a      	cmp	r2, r3
 8008924:	d90f      	bls.n	8008946 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800892a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6a1a      	ldr	r2, [r3, #32]
 8008932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008936:	1ad2      	subs	r2, r2, r3
 8008938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800893c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	621a      	str	r2, [r3, #32]
 8008944:	e00e      	b.n	8008964 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2200      	movs	r2, #0
 8008962:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008968:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	643b      	str	r3, [r7, #64]	; 0x40
 8008970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d177      	bne.n	8008a70 <USB_EPStartXfer+0x85e>
 8008980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	63bb      	str	r3, [r7, #56]	; 0x38
 800898c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800899a:	b29b      	uxth	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a0:	4413      	add	r3, r2
 80089a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80089a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	011a      	lsls	r2, r3, #4
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	4413      	add	r3, r2
 80089b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089ba:	637b      	str	r3, [r7, #52]	; 0x34
 80089bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ca:	801a      	strh	r2, [r3, #0]
 80089cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d0:	2b3e      	cmp	r3, #62	; 0x3e
 80089d2:	d921      	bls.n	8008a18 <USB_EPStartXfer+0x806>
 80089d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d8:	095b      	lsrs	r3, r3, #5
 80089da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e2:	f003 031f 	and.w	r3, r3, #31
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d104      	bne.n	80089f4 <USB_EPStartXfer+0x7e2>
 80089ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ee:	3b01      	subs	r3, #1
 80089f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	029b      	lsls	r3, r3, #10
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	4313      	orrs	r3, r2
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a14:	801a      	strh	r2, [r3, #0]
 8008a16:	e050      	b.n	8008aba <USB_EPStartXfer+0x8a8>
 8008a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10a      	bne.n	8008a36 <USB_EPStartXfer+0x824>
 8008a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a32:	801a      	strh	r2, [r3, #0]
 8008a34:	e041      	b.n	8008aba <USB_EPStartXfer+0x8a8>
 8008a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3a:	085b      	lsrs	r3, r3, #1
 8008a3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d004      	beq.n	8008a56 <USB_EPStartXfer+0x844>
 8008a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a50:	3301      	adds	r3, #1
 8008a52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	029b      	lsls	r3, r3, #10
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	4313      	orrs	r3, r2
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6c:	801a      	strh	r2, [r3, #0]
 8008a6e:	e024      	b.n	8008aba <USB_EPStartXfer+0x8a8>
 8008a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	785b      	ldrb	r3, [r3, #1]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d11c      	bne.n	8008aba <USB_EPStartXfer+0x8a8>
 8008a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a94:	4413      	add	r3, r2
 8008a96:	643b      	str	r3, [r7, #64]	; 0x40
 8008a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	011a      	lsls	r2, r3, #4
 8008aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	895b      	ldrh	r3, [r3, #10]
 8008ac6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6959      	ldr	r1, [r3, #20]
 8008ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ae0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008ae4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ae8:	6800      	ldr	r0, [r0, #0]
 8008aea:	f001 f871 	bl	8009bd0 <USB_WritePMA>
 8008aee:	e227      	b.n	8008f40 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b26:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	441a      	add	r2, r3
 8008b44:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b7c:	4413      	add	r3, r2
 8008b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	011a      	lsls	r2, r3, #4
 8008b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b90:	4413      	add	r3, r2
 8008b92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b96:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ba0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	891b      	ldrh	r3, [r3, #8]
 8008bae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6959      	ldr	r1, [r3, #20]
 8008bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008bc8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008bcc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008bd0:	6800      	ldr	r0, [r0, #0]
 8008bd2:	f000 fffd 	bl	8009bd0 <USB_WritePMA>
 8008bd6:	e1b3      	b.n	8008f40 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6a1a      	ldr	r2, [r3, #32]
 8008be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be8:	1ad2      	subs	r2, r2, r3
 8008bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 80c6 	beq.w	8008daa <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	673b      	str	r3, [r7, #112]	; 0x70
 8008c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	785b      	ldrb	r3, [r3, #1]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d177      	bne.n	8008d2a <USB_EPStartXfer+0xb18>
 8008c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	461a      	mov	r2, r3
 8008c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c5a:	4413      	add	r3, r2
 8008c5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	011a      	lsls	r2, r3, #4
 8008c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c6e:	4413      	add	r3, r2
 8008c70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c74:	667b      	str	r3, [r7, #100]	; 0x64
 8008c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c84:	801a      	strh	r2, [r3, #0]
 8008c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c8c:	d921      	bls.n	8008cd2 <USB_EPStartXfer+0xac0>
 8008c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c92:	095b      	lsrs	r3, r3, #5
 8008c94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c9c:	f003 031f 	and.w	r3, r3, #31
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d104      	bne.n	8008cae <USB_EPStartXfer+0xa9c>
 8008ca4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	029b      	lsls	r3, r3, #10
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cce:	801a      	strh	r2, [r3, #0]
 8008cd0:	e050      	b.n	8008d74 <USB_EPStartXfer+0xb62>
 8008cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10a      	bne.n	8008cf0 <USB_EPStartXfer+0xade>
 8008cda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cec:	801a      	strh	r2, [r3, #0]
 8008cee:	e041      	b.n	8008d74 <USB_EPStartXfer+0xb62>
 8008cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cf4:	085b      	lsrs	r3, r3, #1
 8008cf6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d004      	beq.n	8008d10 <USB_EPStartXfer+0xafe>
 8008d06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	029b      	lsls	r3, r3, #10
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	4313      	orrs	r3, r2
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d26:	801a      	strh	r2, [r3, #0]
 8008d28:	e024      	b.n	8008d74 <USB_EPStartXfer+0xb62>
 8008d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	785b      	ldrb	r3, [r3, #1]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d11c      	bne.n	8008d74 <USB_EPStartXfer+0xb62>
 8008d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d4e:	4413      	add	r3, r2
 8008d50:	673b      	str	r3, [r7, #112]	; 0x70
 8008d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	011a      	lsls	r2, r3, #4
 8008d60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d62:	4413      	add	r3, r2
 8008d64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	895b      	ldrh	r3, [r3, #10]
 8008d80:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6959      	ldr	r1, [r3, #20]
 8008d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d9a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008d9e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008da2:	6800      	ldr	r0, [r0, #0]
 8008da4:	f000 ff14 	bl	8009bd0 <USB_WritePMA>
 8008da8:	e0ca      	b.n	8008f40 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d177      	bne.n	8008eaa <USB_EPStartXfer+0xc98>
 8008dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008dda:	4413      	add	r3, r2
 8008ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	011a      	lsls	r2, r3, #4
 8008dec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008dee:	4413      	add	r3, r2
 8008df0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008df4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e04:	801a      	strh	r2, [r3, #0]
 8008e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8008e0c:	d921      	bls.n	8008e52 <USB_EPStartXfer+0xc40>
 8008e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e12:	095b      	lsrs	r3, r3, #5
 8008e14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e1c:	f003 031f 	and.w	r3, r3, #31
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d104      	bne.n	8008e2e <USB_EPStartXfer+0xc1c>
 8008e24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	029b      	lsls	r3, r3, #10
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e4e:	801a      	strh	r2, [r3, #0]
 8008e50:	e05c      	b.n	8008f0c <USB_EPStartXfer+0xcfa>
 8008e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10a      	bne.n	8008e70 <USB_EPStartXfer+0xc5e>
 8008e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e6c:	801a      	strh	r2, [r3, #0]
 8008e6e:	e04d      	b.n	8008f0c <USB_EPStartXfer+0xcfa>
 8008e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e74:	085b      	lsrs	r3, r3, #1
 8008e76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d004      	beq.n	8008e90 <USB_EPStartXfer+0xc7e>
 8008e86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	029b      	lsls	r3, r3, #10
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ea6:	801a      	strh	r2, [r3, #0]
 8008ea8:	e030      	b.n	8008f0c <USB_EPStartXfer+0xcfa>
 8008eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d128      	bne.n	8008f0c <USB_EPStartXfer+0xcfa>
 8008eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ecc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	461a      	mov	r2, r3
 8008eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ede:	4413      	add	r3, r2
 8008ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	011a      	lsls	r2, r3, #4
 8008ef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	891b      	ldrh	r3, [r3, #8]
 8008f18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	6959      	ldr	r1, [r3, #20]
 8008f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f32:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f36:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f3a:	6800      	ldr	r0, [r0, #0]
 8008f3c:	f000 fe48 	bl	8009bd0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f66:	817b      	strh	r3, [r7, #10]
 8008f68:	897b      	ldrh	r3, [r7, #10]
 8008f6a:	f083 0310 	eor.w	r3, r3, #16
 8008f6e:	817b      	strh	r3, [r7, #10]
 8008f70:	897b      	ldrh	r3, [r7, #10]
 8008f72:	f083 0320 	eor.w	r3, r3, #32
 8008f76:	817b      	strh	r3, [r7, #10]
 8008f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	441a      	add	r2, r3
 8008f92:	897b      	ldrh	r3, [r7, #10]
 8008f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	8013      	strh	r3, [r2, #0]
 8008fa8:	f000 bcde 	b.w	8009968 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	7b1b      	ldrb	r3, [r3, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f040 80bb 	bne.w	8009134 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	699a      	ldr	r2, [r3, #24]
 8008fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d917      	bls.n	800900a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	699a      	ldr	r2, [r3, #24]
 8008ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ffa:	1ad2      	subs	r2, r2, r3
 8008ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	619a      	str	r2, [r3, #24]
 8009008:	e00e      	b.n	8009028 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800900a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800900e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800901a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800901e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2200      	movs	r2, #0
 8009026:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800903a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009044:	b29b      	uxth	r3, r3
 8009046:	461a      	mov	r2, r3
 8009048:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800904c:	4413      	add	r3, r2
 800904e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	011a      	lsls	r2, r3, #4
 8009060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009064:	4413      	add	r3, r2
 8009066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800906a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800906e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	b29b      	uxth	r3, r3
 8009076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800907a:	b29a      	uxth	r2, r3
 800907c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009080:	801a      	strh	r2, [r3, #0]
 8009082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009086:	2b3e      	cmp	r3, #62	; 0x3e
 8009088:	d924      	bls.n	80090d4 <USB_EPStartXfer+0xec2>
 800908a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908e:	095b      	lsrs	r3, r3, #5
 8009090:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009098:	f003 031f 	and.w	r3, r3, #31
 800909c:	2b00      	cmp	r3, #0
 800909e:	d104      	bne.n	80090aa <USB_EPStartXfer+0xe98>
 80090a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090a4:	3b01      	subs	r3, #1
 80090a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090ae:	881b      	ldrh	r3, [r3, #0]
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	029b      	lsls	r3, r3, #10
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	4313      	orrs	r3, r2
 80090be:	b29b      	uxth	r3, r3
 80090c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090ce:	801a      	strh	r2, [r3, #0]
 80090d0:	f000 bc10 	b.w	80098f4 <USB_EPStartXfer+0x16e2>
 80090d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10c      	bne.n	80090f6 <USB_EPStartXfer+0xee4>
 80090dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090f2:	801a      	strh	r2, [r3, #0]
 80090f4:	e3fe      	b.n	80098f4 <USB_EPStartXfer+0x16e2>
 80090f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090fa:	085b      	lsrs	r3, r3, #1
 80090fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b00      	cmp	r3, #0
 800910a:	d004      	beq.n	8009116 <USB_EPStartXfer+0xf04>
 800910c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009110:	3301      	adds	r3, #1
 8009112:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	b29a      	uxth	r2, r3
 800911e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009122:	b29b      	uxth	r3, r3
 8009124:	029b      	lsls	r3, r3, #10
 8009126:	b29b      	uxth	r3, r3
 8009128:	4313      	orrs	r3, r2
 800912a:	b29a      	uxth	r2, r3
 800912c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009130:	801a      	strh	r2, [r3, #0]
 8009132:	e3df      	b.n	80098f4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	78db      	ldrb	r3, [r3, #3]
 8009140:	2b02      	cmp	r3, #2
 8009142:	f040 8218 	bne.w	8009576 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	785b      	ldrb	r3, [r3, #1]
 8009152:	2b00      	cmp	r3, #0
 8009154:	f040 809d 	bne.w	8009292 <USB_EPStartXfer+0x1080>
 8009158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800916a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009174:	b29b      	uxth	r3, r3
 8009176:	461a      	mov	r2, r3
 8009178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800917c:	4413      	add	r3, r2
 800917e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	011a      	lsls	r2, r3, #4
 8009190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009194:	4413      	add	r3, r2
 8009196:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800919a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800919e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091b0:	801a      	strh	r2, [r3, #0]
 80091b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	2b3e      	cmp	r3, #62	; 0x3e
 80091c0:	d92b      	bls.n	800921a <USB_EPStartXfer+0x1008>
 80091c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	095b      	lsrs	r3, r3, #5
 80091d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	f003 031f 	and.w	r3, r3, #31
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d104      	bne.n	80091f2 <USB_EPStartXfer+0xfe0>
 80091e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ec:	3b01      	subs	r3, #1
 80091ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091fe:	b29b      	uxth	r3, r3
 8009200:	029b      	lsls	r3, r3, #10
 8009202:	b29b      	uxth	r3, r3
 8009204:	4313      	orrs	r3, r2
 8009206:	b29b      	uxth	r3, r3
 8009208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800920c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009210:	b29a      	uxth	r2, r3
 8009212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009216:	801a      	strh	r2, [r3, #0]
 8009218:	e070      	b.n	80092fc <USB_EPStartXfer+0x10ea>
 800921a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10c      	bne.n	8009244 <USB_EPStartXfer+0x1032>
 800922a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	b29b      	uxth	r3, r3
 8009232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800923a:	b29a      	uxth	r2, r3
 800923c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009240:	801a      	strh	r2, [r3, #0]
 8009242:	e05b      	b.n	80092fc <USB_EPStartXfer+0x10ea>
 8009244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	085b      	lsrs	r3, r3, #1
 8009252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d004      	beq.n	8009274 <USB_EPStartXfer+0x1062>
 800926a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800926e:	3301      	adds	r3, #1
 8009270:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	b29a      	uxth	r2, r3
 800927c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009280:	b29b      	uxth	r3, r3
 8009282:	029b      	lsls	r3, r3, #10
 8009284:	b29b      	uxth	r3, r3
 8009286:	4313      	orrs	r3, r2
 8009288:	b29a      	uxth	r2, r3
 800928a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800928e:	801a      	strh	r2, [r3, #0]
 8009290:	e034      	b.n	80092fc <USB_EPStartXfer+0x10ea>
 8009292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	785b      	ldrb	r3, [r3, #1]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d12c      	bne.n	80092fc <USB_EPStartXfer+0x10ea>
 80092a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092be:	b29b      	uxth	r3, r3
 80092c0:	461a      	mov	r2, r3
 80092c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092c6:	4413      	add	r3, r2
 80092c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	011a      	lsls	r2, r3, #4
 80092da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092de:	4413      	add	r3, r2
 80092e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80092fa:	801a      	strh	r2, [r3, #0]
 80092fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800930a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800930e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	785b      	ldrb	r3, [r3, #1]
 8009316:	2b00      	cmp	r3, #0
 8009318:	f040 809d 	bne.w	8009456 <USB_EPStartXfer+0x1244>
 800931c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800932a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800932e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009338:	b29b      	uxth	r3, r3
 800933a:	461a      	mov	r2, r3
 800933c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009340:	4413      	add	r3, r2
 8009342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	011a      	lsls	r2, r3, #4
 8009354:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009358:	4413      	add	r3, r2
 800935a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800935e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009362:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	b29b      	uxth	r3, r3
 800936a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800936e:	b29a      	uxth	r2, r3
 8009370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009374:	801a      	strh	r2, [r3, #0]
 8009376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800937a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	2b3e      	cmp	r3, #62	; 0x3e
 8009384:	d92b      	bls.n	80093de <USB_EPStartXfer+0x11cc>
 8009386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	095b      	lsrs	r3, r3, #5
 8009394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800939c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	f003 031f 	and.w	r3, r3, #31
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d104      	bne.n	80093b6 <USB_EPStartXfer+0x11a4>
 80093ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b0:	3b01      	subs	r3, #1
 80093b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	b29a      	uxth	r2, r3
 80093be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	029b      	lsls	r3, r3, #10
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	4313      	orrs	r3, r2
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093da:	801a      	strh	r2, [r3, #0]
 80093dc:	e069      	b.n	80094b2 <USB_EPStartXfer+0x12a0>
 80093de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10c      	bne.n	8009408 <USB_EPStartXfer+0x11f6>
 80093ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fe:	b29a      	uxth	r2, r3
 8009400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009404:	801a      	strh	r2, [r3, #0]
 8009406:	e054      	b.n	80094b2 <USB_EPStartXfer+0x12a0>
 8009408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	085b      	lsrs	r3, r3, #1
 8009416:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800941a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800941e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d004      	beq.n	8009438 <USB_EPStartXfer+0x1226>
 800942e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009432:	3301      	adds	r3, #1
 8009434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	b29a      	uxth	r2, r3
 8009440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009444:	b29b      	uxth	r3, r3
 8009446:	029b      	lsls	r3, r3, #10
 8009448:	b29b      	uxth	r3, r3
 800944a:	4313      	orrs	r3, r2
 800944c:	b29a      	uxth	r2, r3
 800944e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009452:	801a      	strh	r2, [r3, #0]
 8009454:	e02d      	b.n	80094b2 <USB_EPStartXfer+0x12a0>
 8009456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	785b      	ldrb	r3, [r3, #1]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d125      	bne.n	80094b2 <USB_EPStartXfer+0x12a0>
 8009466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009474:	b29b      	uxth	r3, r3
 8009476:	461a      	mov	r2, r3
 8009478:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800947c:	4413      	add	r3, r2
 800947e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	011a      	lsls	r2, r3, #4
 8009490:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009494:	4413      	add	r3, r2
 8009496:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800949a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800949e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094b0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80094b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f000 8218 	beq.w	80098f4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80094c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80094e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80094e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <USB_EPStartXfer+0x12ea>
 80094f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80094f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10d      	bne.n	8009518 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80094fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009504:	2b00      	cmp	r3, #0
 8009506:	f040 81f5 	bne.w	80098f4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800950a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800950e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009512:	2b00      	cmp	r3, #0
 8009514:	f040 81ee 	bne.w	80098f4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800951c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	b29b      	uxth	r3, r3
 8009536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800953a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800953e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	441a      	add	r2, r3
 800955c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800956c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009570:	b29b      	uxth	r3, r3
 8009572:	8013      	strh	r3, [r2, #0]
 8009574:	e1be      	b.n	80098f4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	78db      	ldrb	r3, [r3, #3]
 8009582:	2b01      	cmp	r3, #1
 8009584:	f040 81b4 	bne.w	80098f0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800958c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	699a      	ldr	r2, [r3, #24]
 8009594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d917      	bls.n	80095d4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80095a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80095b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	699a      	ldr	r2, [r3, #24]
 80095c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095c4:	1ad2      	subs	r2, r2, r3
 80095c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	619a      	str	r2, [r3, #24]
 80095d2:	e00e      	b.n	80095f2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80095d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80095e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2200      	movs	r2, #0
 80095f0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80095f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	785b      	ldrb	r3, [r3, #1]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f040 8085 	bne.w	800970e <USB_EPStartXfer+0x14fc>
 8009604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009616:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009620:	b29b      	uxth	r3, r3
 8009622:	461a      	mov	r2, r3
 8009624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009628:	4413      	add	r3, r2
 800962a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800962e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	011a      	lsls	r2, r3, #4
 800963c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009640:	4413      	add	r3, r2
 8009642:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009646:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800964a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800964e:	881b      	ldrh	r3, [r3, #0]
 8009650:	b29b      	uxth	r3, r3
 8009652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009656:	b29a      	uxth	r2, r3
 8009658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800965c:	801a      	strh	r2, [r3, #0]
 800965e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009662:	2b3e      	cmp	r3, #62	; 0x3e
 8009664:	d923      	bls.n	80096ae <USB_EPStartXfer+0x149c>
 8009666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966a:	095b      	lsrs	r3, r3, #5
 800966c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009674:	f003 031f 	and.w	r3, r3, #31
 8009678:	2b00      	cmp	r3, #0
 800967a:	d104      	bne.n	8009686 <USB_EPStartXfer+0x1474>
 800967c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009680:	3b01      	subs	r3, #1
 8009682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	b29a      	uxth	r2, r3
 800968e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009692:	b29b      	uxth	r3, r3
 8009694:	029b      	lsls	r3, r3, #10
 8009696:	b29b      	uxth	r3, r3
 8009698:	4313      	orrs	r3, r2
 800969a:	b29b      	uxth	r3, r3
 800969c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096aa:	801a      	strh	r2, [r3, #0]
 80096ac:	e060      	b.n	8009770 <USB_EPStartXfer+0x155e>
 80096ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10c      	bne.n	80096d0 <USB_EPStartXfer+0x14be>
 80096b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	b29b      	uxth	r3, r3
 80096be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096cc:	801a      	strh	r2, [r3, #0]
 80096ce:	e04f      	b.n	8009770 <USB_EPStartXfer+0x155e>
 80096d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096d4:	085b      	lsrs	r3, r3, #1
 80096d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d004      	beq.n	80096f0 <USB_EPStartXfer+0x14de>
 80096e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096ea:	3301      	adds	r3, #1
 80096ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	029b      	lsls	r3, r3, #10
 8009700:	b29b      	uxth	r3, r3
 8009702:	4313      	orrs	r3, r2
 8009704:	b29a      	uxth	r2, r3
 8009706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800970a:	801a      	strh	r2, [r3, #0]
 800970c:	e030      	b.n	8009770 <USB_EPStartXfer+0x155e>
 800970e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	785b      	ldrb	r3, [r3, #1]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d128      	bne.n	8009770 <USB_EPStartXfer+0x155e>
 800971e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800972c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800973a:	b29b      	uxth	r3, r3
 800973c:	461a      	mov	r2, r3
 800973e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009742:	4413      	add	r3, r2
 8009744:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	011a      	lsls	r2, r3, #4
 8009756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800975a:	4413      	add	r3, r2
 800975c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009768:	b29a      	uxth	r2, r3
 800976a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800976e:	801a      	strh	r2, [r3, #0]
 8009770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800977e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	785b      	ldrb	r3, [r3, #1]
 800978a:	2b00      	cmp	r3, #0
 800978c:	f040 8085 	bne.w	800989a <USB_EPStartXfer+0x1688>
 8009790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800979e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	461a      	mov	r2, r3
 80097b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80097b4:	4413      	add	r3, r2
 80097b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80097ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	011a      	lsls	r2, r3, #4
 80097c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80097cc:	4413      	add	r3, r2
 80097ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097e8:	801a      	strh	r2, [r3, #0]
 80097ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ee:	2b3e      	cmp	r3, #62	; 0x3e
 80097f0:	d923      	bls.n	800983a <USB_EPStartXfer+0x1628>
 80097f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097f6:	095b      	lsrs	r3, r3, #5
 80097f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009800:	f003 031f 	and.w	r3, r3, #31
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <USB_EPStartXfer+0x1600>
 8009808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800980c:	3b01      	subs	r3, #1
 800980e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	b29a      	uxth	r2, r3
 800981a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800981e:	b29b      	uxth	r3, r3
 8009820:	029b      	lsls	r3, r3, #10
 8009822:	b29b      	uxth	r3, r3
 8009824:	4313      	orrs	r3, r2
 8009826:	b29b      	uxth	r3, r3
 8009828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800982c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009830:	b29a      	uxth	r2, r3
 8009832:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009836:	801a      	strh	r2, [r3, #0]
 8009838:	e05c      	b.n	80098f4 <USB_EPStartXfer+0x16e2>
 800983a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10c      	bne.n	800985c <USB_EPStartXfer+0x164a>
 8009842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	b29b      	uxth	r3, r3
 800984a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800984e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009852:	b29a      	uxth	r2, r3
 8009854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009858:	801a      	strh	r2, [r3, #0]
 800985a:	e04b      	b.n	80098f4 <USB_EPStartXfer+0x16e2>
 800985c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009860:	085b      	lsrs	r3, r3, #1
 8009862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	d004      	beq.n	800987c <USB_EPStartXfer+0x166a>
 8009872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009876:	3301      	adds	r3, #1
 8009878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800987c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	b29a      	uxth	r2, r3
 8009884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009888:	b29b      	uxth	r3, r3
 800988a:	029b      	lsls	r3, r3, #10
 800988c:	b29b      	uxth	r3, r3
 800988e:	4313      	orrs	r3, r2
 8009890:	b29a      	uxth	r2, r3
 8009892:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009896:	801a      	strh	r2, [r3, #0]
 8009898:	e02c      	b.n	80098f4 <USB_EPStartXfer+0x16e2>
 800989a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	785b      	ldrb	r3, [r3, #1]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d124      	bne.n	80098f4 <USB_EPStartXfer+0x16e2>
 80098aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	461a      	mov	r2, r3
 80098bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098c0:	4413      	add	r3, r2
 80098c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	011a      	lsls	r2, r3, #4
 80098d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098d8:	4413      	add	r3, r2
 80098da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80098ec:	801a      	strh	r2, [r3, #0]
 80098ee:	e001      	b.n	80098f4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e03a      	b.n	800996a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80098f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	b29b      	uxth	r3, r3
 8009912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800991e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009922:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009926:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800992a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800992e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009932:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800993a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	441a      	add	r2, r3
 8009950:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800995c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009964:	b29b      	uxth	r3, r3
 8009966:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	785b      	ldrb	r3, [r3, #1]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d020      	beq.n	80099c8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800999c:	81bb      	strh	r3, [r7, #12]
 800999e:	89bb      	ldrh	r3, [r7, #12]
 80099a0:	f083 0310 	eor.w	r3, r3, #16
 80099a4:	81bb      	strh	r3, [r7, #12]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	441a      	add	r2, r3
 80099b0:	89bb      	ldrh	r3, [r7, #12]
 80099b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	8013      	strh	r3, [r2, #0]
 80099c6:	e01f      	b.n	8009a08 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099de:	81fb      	strh	r3, [r7, #14]
 80099e0:	89fb      	ldrh	r3, [r7, #14]
 80099e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099e6:	81fb      	strh	r3, [r7, #14]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	441a      	add	r2, r3
 80099f2:	89fb      	ldrh	r3, [r7, #14]
 80099f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b087      	sub	sp, #28
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	7b1b      	ldrb	r3, [r3, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f040 809d 	bne.w	8009b64 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	785b      	ldrb	r3, [r3, #1]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d04c      	beq.n	8009acc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	823b      	strh	r3, [r7, #16]
 8009a40:	8a3b      	ldrh	r3, [r7, #16]
 8009a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d01b      	beq.n	8009a82 <USB_EPClearStall+0x6c>
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a60:	81fb      	strh	r3, [r7, #14]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	441a      	add	r2, r3
 8009a6c:	89fb      	ldrh	r3, [r7, #14]
 8009a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	78db      	ldrb	r3, [r3, #3]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d06c      	beq.n	8009b64 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aa0:	81bb      	strh	r3, [r7, #12]
 8009aa2:	89bb      	ldrh	r3, [r7, #12]
 8009aa4:	f083 0320 	eor.w	r3, r3, #32
 8009aa8:	81bb      	strh	r3, [r7, #12]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	441a      	add	r2, r3
 8009ab4:	89bb      	ldrh	r3, [r7, #12]
 8009ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	8013      	strh	r3, [r2, #0]
 8009aca:	e04b      	b.n	8009b64 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	82fb      	strh	r3, [r7, #22]
 8009ada:	8afb      	ldrh	r3, [r7, #22]
 8009adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01b      	beq.n	8009b1c <USB_EPClearStall+0x106>
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009afa:	82bb      	strh	r3, [r7, #20]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	441a      	add	r2, r3
 8009b06:	8abb      	ldrh	r3, [r7, #20]
 8009b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	881b      	ldrh	r3, [r3, #0]
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b32:	827b      	strh	r3, [r7, #18]
 8009b34:	8a7b      	ldrh	r3, [r7, #18]
 8009b36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b3a:	827b      	strh	r3, [r7, #18]
 8009b3c:	8a7b      	ldrh	r3, [r7, #18]
 8009b3e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b42:	827b      	strh	r3, [r7, #18]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	441a      	add	r2, r3
 8009b4e:	8a7b      	ldrh	r3, [r7, #18]
 8009b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	371c      	adds	r7, #28
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009b7e:	78fb      	ldrb	r3, [r7, #3]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d103      	bne.n	8009b8c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2280      	movs	r2, #128	; 0x80
 8009b88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b08b      	sub	sp, #44	; 0x2c
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	4611      	mov	r1, r2
 8009bdc:	461a      	mov	r2, r3
 8009bde:	460b      	mov	r3, r1
 8009be0:	80fb      	strh	r3, [r7, #6]
 8009be2:	4613      	mov	r3, r2
 8009be4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009be6:	88bb      	ldrh	r3, [r7, #4]
 8009be8:	3301      	adds	r3, #1
 8009bea:	085b      	lsrs	r3, r3, #1
 8009bec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009bf6:	88fb      	ldrh	r3, [r7, #6]
 8009bf8:	005a      	lsls	r2, r3, #1
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c02:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	627b      	str	r3, [r7, #36]	; 0x24
 8009c08:	e01e      	b.n	8009c48 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	3301      	adds	r3, #1
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	b21a      	sxth	r2, r3
 8009c1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	b21b      	sxth	r3, r3
 8009c22:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	8a7a      	ldrh	r2, [r7, #18]
 8009c28:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	3302      	adds	r3, #2
 8009c2e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	3302      	adds	r3, #2
 8009c34:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	3b01      	subs	r3, #1
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1dd      	bne.n	8009c0a <USB_WritePMA+0x3a>
  }
}
 8009c4e:	bf00      	nop
 8009c50:	bf00      	nop
 8009c52:	372c      	adds	r7, #44	; 0x2c
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b08b      	sub	sp, #44	; 0x2c
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	4611      	mov	r1, r2
 8009c68:	461a      	mov	r2, r3
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	80fb      	strh	r3, [r7, #6]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009c72:	88bb      	ldrh	r3, [r7, #4]
 8009c74:	085b      	lsrs	r3, r3, #1
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c82:	88fb      	ldrh	r3, [r7, #6]
 8009c84:	005a      	lsls	r2, r3, #1
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c8e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	627b      	str	r3, [r7, #36]	; 0x24
 8009c94:	e01b      	b.n	8009cce <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	3302      	adds	r3, #2
 8009ca2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	0a1b      	lsrs	r3, r3, #8
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009cc2:	6a3b      	ldr	r3, [r7, #32]
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1e0      	bne.n	8009c96 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009cd4:	88bb      	ldrh	r3, [r7, #4]
 8009cd6:	f003 0301 	and.w	r3, r3, #1
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d007      	beq.n	8009cf0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	881b      	ldrh	r3, [r3, #0]
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	701a      	strb	r2, [r3, #0]
  }
}
 8009cf0:	bf00      	nop
 8009cf2:	372c      	adds	r7, #44	; 0x2c
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	460b      	mov	r3, r1
 8009d06:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	7c1b      	ldrb	r3, [r3, #16]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d115      	bne.n	8009d40 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d18:	2202      	movs	r2, #2
 8009d1a:	2181      	movs	r1, #129	; 0x81
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f001 ff7a 	bl	800bc16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	2101      	movs	r1, #1
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f001 ff70 	bl	800bc16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009d3e:	e012      	b.n	8009d66 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d40:	2340      	movs	r3, #64	; 0x40
 8009d42:	2202      	movs	r2, #2
 8009d44:	2181      	movs	r1, #129	; 0x81
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f001 ff65 	bl	800bc16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d52:	2340      	movs	r3, #64	; 0x40
 8009d54:	2202      	movs	r2, #2
 8009d56:	2101      	movs	r1, #1
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f001 ff5c 	bl	800bc16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d66:	2308      	movs	r3, #8
 8009d68:	2203      	movs	r2, #3
 8009d6a:	2182      	movs	r1, #130	; 0x82
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 ff52 	bl	800bc16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009d7c:	f002 f874 	bl	800be68 <USBD_static_malloc>
 8009d80:	4602      	mov	r2, r0
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d102      	bne.n	8009d98 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009d92:	2301      	movs	r3, #1
 8009d94:	73fb      	strb	r3, [r7, #15]
 8009d96:	e026      	b.n	8009de6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d9e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	7c1b      	ldrb	r3, [r3, #16]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d109      	bne.n	8009dd6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dcc:	2101      	movs	r1, #1
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f002 f813 	bl	800bdfa <USBD_LL_PrepareReceive>
 8009dd4:	e007      	b.n	8009de6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ddc:	2340      	movs	r3, #64	; 0x40
 8009dde:	2101      	movs	r1, #1
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f002 f80a 	bl	800bdfa <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009e00:	2181      	movs	r1, #129	; 0x81
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f001 ff2d 	bl	800bc62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009e0e:	2101      	movs	r1, #1
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 ff26 	bl	800bc62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e1e:	2182      	movs	r1, #130	; 0x82
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f001 ff1e 	bl	800bc62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00e      	beq.n	8009e54 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e46:	4618      	mov	r0, r3
 8009e48:	f002 f81c 	bl	800be84 <USBD_static_free>
    pdev->pClassData = NULL;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b086      	sub	sp, #24
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e6e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009e70:	2300      	movs	r3, #0
 8009e72:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009e74:	2300      	movs	r3, #0
 8009e76:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d039      	beq.n	8009efc <USBD_CDC_Setup+0x9e>
 8009e88:	2b20      	cmp	r3, #32
 8009e8a:	d17f      	bne.n	8009f8c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	88db      	ldrh	r3, [r3, #6]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d029      	beq.n	8009ee8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	b25b      	sxtb	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	da11      	bge.n	8009ec2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009eaa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	88d2      	ldrh	r2, [r2, #6]
 8009eb0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009eb2:	6939      	ldr	r1, [r7, #16]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	88db      	ldrh	r3, [r3, #6]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f001 fa13 	bl	800b2e6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009ec0:	e06b      	b.n	8009f9a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	785a      	ldrb	r2, [r3, #1]
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	88db      	ldrh	r3, [r3, #6]
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009ed8:	6939      	ldr	r1, [r7, #16]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	88db      	ldrh	r3, [r3, #6]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f001 fa2e 	bl	800b342 <USBD_CtlPrepareRx>
      break;
 8009ee6:	e058      	b.n	8009f9a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	7850      	ldrb	r0, [r2, #1]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	4798      	blx	r3
      break;
 8009efa:	e04e      	b.n	8009f9a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	785b      	ldrb	r3, [r3, #1]
 8009f00:	2b0b      	cmp	r3, #11
 8009f02:	d02e      	beq.n	8009f62 <USBD_CDC_Setup+0x104>
 8009f04:	2b0b      	cmp	r3, #11
 8009f06:	dc38      	bgt.n	8009f7a <USBD_CDC_Setup+0x11c>
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <USBD_CDC_Setup+0xb4>
 8009f0c:	2b0a      	cmp	r3, #10
 8009f0e:	d014      	beq.n	8009f3a <USBD_CDC_Setup+0xdc>
 8009f10:	e033      	b.n	8009f7a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d107      	bne.n	8009f2c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009f1c:	f107 030c 	add.w	r3, r7, #12
 8009f20:	2202      	movs	r2, #2
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f001 f9de 	bl	800b2e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f2a:	e02e      	b.n	8009f8a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f001 f96e 	bl	800b210 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f34:	2302      	movs	r3, #2
 8009f36:	75fb      	strb	r3, [r7, #23]
          break;
 8009f38:	e027      	b.n	8009f8a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d107      	bne.n	8009f54 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f44:	f107 030f 	add.w	r3, r7, #15
 8009f48:	2201      	movs	r2, #1
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f001 f9ca 	bl	800b2e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f52:	e01a      	b.n	8009f8a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f001 f95a 	bl	800b210 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	75fb      	strb	r3, [r7, #23]
          break;
 8009f60:	e013      	b.n	8009f8a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f68:	2b03      	cmp	r3, #3
 8009f6a:	d00d      	beq.n	8009f88 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f001 f94e 	bl	800b210 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f74:	2302      	movs	r3, #2
 8009f76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f78:	e006      	b.n	8009f88 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 f947 	bl	800b210 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f82:	2302      	movs	r3, #2
 8009f84:	75fb      	strb	r3, [r7, #23]
          break;
 8009f86:	e000      	b.n	8009f8a <USBD_CDC_Setup+0x12c>
          break;
 8009f88:	bf00      	nop
      }
      break;
 8009f8a:	e006      	b.n	8009f9a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f001 f93e 	bl	800b210 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f94:	2302      	movs	r3, #2
 8009f96:	75fb      	strb	r3, [r7, #23]
      break;
 8009f98:	bf00      	nop
  }

  return ret;
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	460b      	mov	r3, r1
 8009fae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fbe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d03a      	beq.n	800a040 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009fca:	78fa      	ldrb	r2, [r7, #3]
 8009fcc:	6879      	ldr	r1, [r7, #4]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	440b      	add	r3, r1
 8009fd8:	331c      	adds	r3, #28
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d029      	beq.n	800a034 <USBD_CDC_DataIn+0x90>
 8009fe0:	78fa      	ldrb	r2, [r7, #3]
 8009fe2:	6879      	ldr	r1, [r7, #4]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	440b      	add	r3, r1
 8009fee:	331c      	adds	r3, #28
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	78f9      	ldrb	r1, [r7, #3]
 8009ff4:	68b8      	ldr	r0, [r7, #8]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	440b      	add	r3, r1
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	4403      	add	r3, r0
 800a000:	3338      	adds	r3, #56	; 0x38
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	fbb2 f1f3 	udiv	r1, r2, r3
 800a008:	fb01 f303 	mul.w	r3, r1, r3
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d110      	bne.n	800a034 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a012:	78fa      	ldrb	r2, [r7, #3]
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	4613      	mov	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	440b      	add	r3, r1
 800a020:	331c      	adds	r3, #28
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a026:	78f9      	ldrb	r1, [r7, #3]
 800a028:	2300      	movs	r3, #0
 800a02a:	2200      	movs	r2, #0
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f001 fec1 	bl	800bdb4 <USBD_LL_Transmit>
 800a032:	e003      	b.n	800a03c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a03c:	2300      	movs	r3, #0
 800a03e:	e000      	b.n	800a042 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a040:	2302      	movs	r3, #2
  }
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	460b      	mov	r3, r1
 800a054:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a05c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f001 feec 	bl	800be40 <USBD_LL_GetRxDataSize>
 800a068:	4602      	mov	r2, r0
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00d      	beq.n	800a096 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a08e:	4611      	mov	r1, r2
 800a090:	4798      	blx	r3

    return USBD_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	e000      	b.n	800a098 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a096:	2302      	movs	r3, #2
  }
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d015      	beq.n	800a0e6 <USBD_CDC_EP0_RxReady+0x46>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0c0:	2bff      	cmp	r3, #255	; 0xff
 800a0c2:	d010      	beq.n	800a0e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a0d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0da:	b292      	uxth	r2, r2
 800a0dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	22ff      	movs	r2, #255	; 0xff
 800a0e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2243      	movs	r2, #67	; 0x43
 800a0fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a0fe:	4b03      	ldr	r3, [pc, #12]	; (800a10c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	200000ec 	.word	0x200000ec

0800a110 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2243      	movs	r2, #67	; 0x43
 800a11c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a11e:	4b03      	ldr	r3, [pc, #12]	; (800a12c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a120:	4618      	mov	r0, r3
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	200000a8 	.word	0x200000a8

0800a130 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2243      	movs	r2, #67	; 0x43
 800a13c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a13e:	4b03      	ldr	r3, [pc, #12]	; (800a14c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a140:	4618      	mov	r0, r3
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	20000130 	.word	0x20000130

0800a150 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	220a      	movs	r2, #10
 800a15c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a15e:	4b03      	ldr	r3, [pc, #12]	; (800a16c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a160:	4618      	mov	r0, r3
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	20000064 	.word	0x20000064

0800a170 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a17a:	2302      	movs	r3, #2
 800a17c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d005      	beq.n	800a190 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a190:	7bfb      	ldrb	r3, [r7, #15]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b087      	sub	sp, #28
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	60b9      	str	r1, [r7, #8]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a1bc:	88fa      	ldrh	r2, [r7, #6]
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	371c      	adds	r7, #28
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b084      	sub	sp, #16
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a208:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a210:	2b00      	cmp	r3, #0
 800a212:	d01c      	beq.n	800a24e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d115      	bne.n	800a24a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2201      	movs	r2, #1
 800a222:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	2181      	movs	r1, #129	; 0x81
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f001 fdb7 	bl	800bdb4 <USBD_LL_Transmit>

      return USBD_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	e002      	b.n	800a250 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e000      	b.n	800a250 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a24e:	2302      	movs	r3, #2
  }
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a266:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d017      	beq.n	800a2a2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	7c1b      	ldrb	r3, [r3, #16]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d109      	bne.n	800a28e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a280:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a284:	2101      	movs	r1, #1
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f001 fdb7 	bl	800bdfa <USBD_LL_PrepareReceive>
 800a28c:	e007      	b.n	800a29e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a294:	2340      	movs	r3, #64	; 0x40
 800a296:	2101      	movs	r1, #1
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f001 fdae 	bl	800bdfa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e000      	b.n	800a2a4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a2a2:	2302      	movs	r3, #2
  }
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	e01a      	b.n	800a2fa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d003      	beq.n	800a2e4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	79fa      	ldrb	r2, [r7, #7]
 800a2f0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f001 fc1a 	bl	800bb2c <USBD_LL_Init>

  return USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a302:	b480      	push	{r7}
 800a304:	b085      	sub	sp, #20
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d006      	beq.n	800a324 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]
 800a322:	e001      	b.n	800a328 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a324:	2302      	movs	r3, #2
 800a326:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a328:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b082      	sub	sp, #8
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f001 fc4e 	bl	800bbe0 <USBD_LL_Start>

  return USBD_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	460b      	mov	r3, r1
 800a36e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a370:	2302      	movs	r3, #2
 800a372:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00c      	beq.n	800a398 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	78fa      	ldrb	r2, [r7, #3]
 800a388:	4611      	mov	r1, r2
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	4798      	blx	r3
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d101      	bne.n	800a398 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a398:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b082      	sub	sp, #8
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	78fa      	ldrb	r2, [r7, #3]
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	4798      	blx	r3

  return USBD_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 fedb 	bl	800b196 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a3fc:	f003 031f 	and.w	r3, r3, #31
 800a400:	2b02      	cmp	r3, #2
 800a402:	d016      	beq.n	800a432 <USBD_LL_SetupStage+0x6a>
 800a404:	2b02      	cmp	r3, #2
 800a406:	d81c      	bhi.n	800a442 <USBD_LL_SetupStage+0x7a>
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <USBD_LL_SetupStage+0x4a>
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d008      	beq.n	800a422 <USBD_LL_SetupStage+0x5a>
 800a410:	e017      	b.n	800a442 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a418:	4619      	mov	r1, r3
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f9ce 	bl	800a7bc <USBD_StdDevReq>
      break;
 800a420:	e01a      	b.n	800a458 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fa30 	bl	800a890 <USBD_StdItfReq>
      break;
 800a430:	e012      	b.n	800a458 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fa70 	bl	800a920 <USBD_StdEPReq>
      break;
 800a440:	e00a      	b.n	800a458 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a448:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f001 fc25 	bl	800bca0 <USBD_LL_StallEP>
      break;
 800a456:	bf00      	nop
  }

  return USBD_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b086      	sub	sp, #24
 800a466:	af00      	add	r7, sp, #0
 800a468:	60f8      	str	r0, [r7, #12]
 800a46a:	460b      	mov	r3, r1
 800a46c:	607a      	str	r2, [r7, #4]
 800a46e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a470:	7afb      	ldrb	r3, [r7, #11]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d14b      	bne.n	800a50e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a47c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a484:	2b03      	cmp	r3, #3
 800a486:	d134      	bne.n	800a4f2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	68da      	ldr	r2, [r3, #12]
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	429a      	cmp	r2, r3
 800a492:	d919      	bls.n	800a4c8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	68da      	ldr	r2, [r3, #12]
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	1ad2      	subs	r2, r2, r3
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	68da      	ldr	r2, [r3, #12]
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d203      	bcs.n	800a4b6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	e002      	b.n	800a4bc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 ff5c 	bl	800b37e <USBD_CtlContinueRx>
 800a4c6:	e038      	b.n	800a53a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00a      	beq.n	800a4ea <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	d105      	bne.n	800a4ea <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 ff59 	bl	800b3a2 <USBD_CtlSendStatus>
 800a4f0:	e023      	b.n	800a53a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4f8:	2b05      	cmp	r3, #5
 800a4fa:	d11e      	bne.n	800a53a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a504:	2100      	movs	r1, #0
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f001 fbca 	bl	800bca0 <USBD_LL_StallEP>
 800a50c:	e015      	b.n	800a53a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00d      	beq.n	800a536 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a520:	2b03      	cmp	r3, #3
 800a522:	d108      	bne.n	800a536 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	7afa      	ldrb	r2, [r7, #11]
 800a52e:	4611      	mov	r1, r2
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	4798      	blx	r3
 800a534:	e001      	b.n	800a53a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a536:	2302      	movs	r3, #2
 800a538:	e000      	b.n	800a53c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	460b      	mov	r3, r1
 800a54e:	607a      	str	r2, [r7, #4]
 800a550:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a552:	7afb      	ldrb	r3, [r7, #11]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d17f      	bne.n	800a658 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3314      	adds	r3, #20
 800a55c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a564:	2b02      	cmp	r3, #2
 800a566:	d15c      	bne.n	800a622 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	68da      	ldr	r2, [r3, #12]
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	429a      	cmp	r2, r3
 800a572:	d915      	bls.n	800a5a0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	68da      	ldr	r2, [r3, #12]
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	1ad2      	subs	r2, r2, r3
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	b29b      	uxth	r3, r3
 800a588:	461a      	mov	r2, r3
 800a58a:	6879      	ldr	r1, [r7, #4]
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 fec6 	bl	800b31e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a592:	2300      	movs	r3, #0
 800a594:	2200      	movs	r2, #0
 800a596:	2100      	movs	r1, #0
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f001 fc2e 	bl	800bdfa <USBD_LL_PrepareReceive>
 800a59e:	e04e      	b.n	800a63e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	697a      	ldr	r2, [r7, #20]
 800a5a6:	6912      	ldr	r2, [r2, #16]
 800a5a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5ac:	fb01 f202 	mul.w	r2, r1, r2
 800a5b0:	1a9b      	subs	r3, r3, r2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d11c      	bne.n	800a5f0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	689a      	ldr	r2, [r3, #8]
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d316      	bcc.n	800a5f0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	689a      	ldr	r2, [r3, #8]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d20f      	bcs.n	800a5f0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 fea2 	bl	800b31e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f001 fc06 	bl	800bdfa <USBD_LL_PrepareReceive>
 800a5ee:	e026      	b.n	800a63e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00a      	beq.n	800a612 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a602:	2b03      	cmp	r3, #3
 800a604:	d105      	bne.n	800a612 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a612:	2180      	movs	r1, #128	; 0x80
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f001 fb43 	bl	800bca0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 fed4 	bl	800b3c8 <USBD_CtlReceiveStatus>
 800a620:	e00d      	b.n	800a63e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a628:	2b04      	cmp	r3, #4
 800a62a:	d004      	beq.n	800a636 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a632:	2b00      	cmp	r3, #0
 800a634:	d103      	bne.n	800a63e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a636:	2180      	movs	r1, #128	; 0x80
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f001 fb31 	bl	800bca0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a644:	2b01      	cmp	r3, #1
 800a646:	d11d      	bne.n	800a684 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f7ff fe80 	bl	800a34e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a656:	e015      	b.n	800a684 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00d      	beq.n	800a680 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a66a:	2b03      	cmp	r3, #3
 800a66c:	d108      	bne.n	800a680 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	7afa      	ldrb	r2, [r7, #11]
 800a678:	4611      	mov	r1, r2
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	4798      	blx	r3
 800a67e:	e001      	b.n	800a684 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a680:	2302      	movs	r3, #2
 800a682:	e000      	b.n	800a686 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3718      	adds	r7, #24
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b082      	sub	sp, #8
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a696:	2340      	movs	r3, #64	; 0x40
 800a698:	2200      	movs	r2, #0
 800a69a:	2100      	movs	r1, #0
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f001 faba 	bl	800bc16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2240      	movs	r2, #64	; 0x40
 800a6ae:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6b2:	2340      	movs	r3, #64	; 0x40
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	2180      	movs	r1, #128	; 0x80
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f001 faac 	bl	800bc16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2240      	movs	r2, #64	; 0x40
 800a6c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d009      	beq.n	800a706 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	6852      	ldr	r2, [r2, #4]
 800a6fe:	b2d2      	uxtb	r2, r2
 800a700:	4611      	mov	r1, r2
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	4798      	blx	r3
  }

  return USBD_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	78fa      	ldrb	r2, [r7, #3]
 800a720:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2204      	movs	r2, #4
 800a748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a768:	2b04      	cmp	r3, #4
 800a76a:	d105      	bne.n	800a778 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr

0800a786 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a794:	2b03      	cmp	r3, #3
 800a796:	d10b      	bne.n	800a7b0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a79e:	69db      	ldr	r3, [r3, #28]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d005      	beq.n	800a7b0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7aa:	69db      	ldr	r3, [r3, #28]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7d2:	2b40      	cmp	r3, #64	; 0x40
 800a7d4:	d005      	beq.n	800a7e2 <USBD_StdDevReq+0x26>
 800a7d6:	2b40      	cmp	r3, #64	; 0x40
 800a7d8:	d84f      	bhi.n	800a87a <USBD_StdDevReq+0xbe>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d009      	beq.n	800a7f2 <USBD_StdDevReq+0x36>
 800a7de:	2b20      	cmp	r3, #32
 800a7e0:	d14b      	bne.n	800a87a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	4798      	blx	r3
      break;
 800a7f0:	e048      	b.n	800a884 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	785b      	ldrb	r3, [r3, #1]
 800a7f6:	2b09      	cmp	r3, #9
 800a7f8:	d839      	bhi.n	800a86e <USBD_StdDevReq+0xb2>
 800a7fa:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <USBD_StdDevReq+0x44>)
 800a7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a800:	0800a851 	.word	0x0800a851
 800a804:	0800a865 	.word	0x0800a865
 800a808:	0800a86f 	.word	0x0800a86f
 800a80c:	0800a85b 	.word	0x0800a85b
 800a810:	0800a86f 	.word	0x0800a86f
 800a814:	0800a833 	.word	0x0800a833
 800a818:	0800a829 	.word	0x0800a829
 800a81c:	0800a86f 	.word	0x0800a86f
 800a820:	0800a847 	.word	0x0800a847
 800a824:	0800a83d 	.word	0x0800a83d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f9dc 	bl	800abe8 <USBD_GetDescriptor>
          break;
 800a830:	e022      	b.n	800a878 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fb3f 	bl	800aeb8 <USBD_SetAddress>
          break;
 800a83a:	e01d      	b.n	800a878 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fb7e 	bl	800af40 <USBD_SetConfig>
          break;
 800a844:	e018      	b.n	800a878 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fc07 	bl	800b05c <USBD_GetConfig>
          break;
 800a84e:	e013      	b.n	800a878 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fc37 	bl	800b0c6 <USBD_GetStatus>
          break;
 800a858:	e00e      	b.n	800a878 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fc65 	bl	800b12c <USBD_SetFeature>
          break;
 800a862:	e009      	b.n	800a878 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fc74 	bl	800b154 <USBD_ClrFeature>
          break;
 800a86c:	e004      	b.n	800a878 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fccd 	bl	800b210 <USBD_CtlError>
          break;
 800a876:	bf00      	nop
      }
      break;
 800a878:	e004      	b.n	800a884 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a87a:	6839      	ldr	r1, [r7, #0]
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fcc7 	bl	800b210 <USBD_CtlError>
      break;
 800a882:	bf00      	nop
  }

  return ret;
 800a884:	7bfb      	ldrb	r3, [r7, #15]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop

0800a890 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8a6:	2b40      	cmp	r3, #64	; 0x40
 800a8a8:	d005      	beq.n	800a8b6 <USBD_StdItfReq+0x26>
 800a8aa:	2b40      	cmp	r3, #64	; 0x40
 800a8ac:	d82e      	bhi.n	800a90c <USBD_StdItfReq+0x7c>
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <USBD_StdItfReq+0x26>
 800a8b2:	2b20      	cmp	r3, #32
 800a8b4:	d12a      	bne.n	800a90c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d81d      	bhi.n	800a8fe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	889b      	ldrh	r3, [r3, #4]
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d813      	bhi.n	800a8f4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	6839      	ldr	r1, [r7, #0]
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	4798      	blx	r3
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	88db      	ldrh	r3, [r3, #6]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d110      	bne.n	800a908 <USBD_StdItfReq+0x78>
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10d      	bne.n	800a908 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fd58 	bl	800b3a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8f2:	e009      	b.n	800a908 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fc8a 	bl	800b210 <USBD_CtlError>
          break;
 800a8fc:	e004      	b.n	800a908 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fc85 	bl	800b210 <USBD_CtlError>
          break;
 800a906:	e000      	b.n	800a90a <USBD_StdItfReq+0x7a>
          break;
 800a908:	bf00      	nop
      }
      break;
 800a90a:	e004      	b.n	800a916 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fc7e 	bl	800b210 <USBD_CtlError>
      break;
 800a914:	bf00      	nop
  }

  return USBD_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	889b      	ldrh	r3, [r3, #4]
 800a932:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a93c:	2b40      	cmp	r3, #64	; 0x40
 800a93e:	d007      	beq.n	800a950 <USBD_StdEPReq+0x30>
 800a940:	2b40      	cmp	r3, #64	; 0x40
 800a942:	f200 8146 	bhi.w	800abd2 <USBD_StdEPReq+0x2b2>
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00a      	beq.n	800a960 <USBD_StdEPReq+0x40>
 800a94a:	2b20      	cmp	r3, #32
 800a94c:	f040 8141 	bne.w	800abd2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	4798      	blx	r3
      break;
 800a95e:	e13d      	b.n	800abdc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a968:	2b20      	cmp	r3, #32
 800a96a:	d10a      	bne.n	800a982 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	4798      	blx	r3
 800a97a:	4603      	mov	r3, r0
 800a97c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
 800a980:	e12d      	b.n	800abde <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	785b      	ldrb	r3, [r3, #1]
 800a986:	2b03      	cmp	r3, #3
 800a988:	d007      	beq.n	800a99a <USBD_StdEPReq+0x7a>
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	f300 811b 	bgt.w	800abc6 <USBD_StdEPReq+0x2a6>
 800a990:	2b00      	cmp	r3, #0
 800a992:	d072      	beq.n	800aa7a <USBD_StdEPReq+0x15a>
 800a994:	2b01      	cmp	r3, #1
 800a996:	d03a      	beq.n	800aa0e <USBD_StdEPReq+0xee>
 800a998:	e115      	b.n	800abc6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d002      	beq.n	800a9aa <USBD_StdEPReq+0x8a>
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	d015      	beq.n	800a9d4 <USBD_StdEPReq+0xb4>
 800a9a8:	e02b      	b.n	800aa02 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00c      	beq.n	800a9ca <USBD_StdEPReq+0xaa>
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	2b80      	cmp	r3, #128	; 0x80
 800a9b4:	d009      	beq.n	800a9ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f001 f970 	bl	800bca0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a9c0:	2180      	movs	r1, #128	; 0x80
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f001 f96c 	bl	800bca0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9c8:	e020      	b.n	800aa0c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fc1f 	bl	800b210 <USBD_CtlError>
              break;
 800a9d2:	e01b      	b.n	800aa0c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	885b      	ldrh	r3, [r3, #2]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10e      	bne.n	800a9fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00b      	beq.n	800a9fa <USBD_StdEPReq+0xda>
 800a9e2:	7bbb      	ldrb	r3, [r7, #14]
 800a9e4:	2b80      	cmp	r3, #128	; 0x80
 800a9e6:	d008      	beq.n	800a9fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	88db      	ldrh	r3, [r3, #6]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d104      	bne.n	800a9fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a9f0:	7bbb      	ldrb	r3, [r7, #14]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f001 f953 	bl	800bca0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fcd1 	bl	800b3a2 <USBD_CtlSendStatus>

              break;
 800aa00:	e004      	b.n	800aa0c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fc03 	bl	800b210 <USBD_CtlError>
              break;
 800aa0a:	bf00      	nop
          }
          break;
 800aa0c:	e0e0      	b.n	800abd0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d002      	beq.n	800aa1e <USBD_StdEPReq+0xfe>
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d015      	beq.n	800aa48 <USBD_StdEPReq+0x128>
 800aa1c:	e026      	b.n	800aa6c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa1e:	7bbb      	ldrb	r3, [r7, #14]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00c      	beq.n	800aa3e <USBD_StdEPReq+0x11e>
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
 800aa26:	2b80      	cmp	r3, #128	; 0x80
 800aa28:	d009      	beq.n	800aa3e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aa2a:	7bbb      	ldrb	r3, [r7, #14]
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 f936 	bl	800bca0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aa34:	2180      	movs	r1, #128	; 0x80
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f001 f932 	bl	800bca0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa3c:	e01c      	b.n	800aa78 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fbe5 	bl	800b210 <USBD_CtlError>
              break;
 800aa46:	e017      	b.n	800aa78 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	885b      	ldrh	r3, [r3, #2]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d112      	bne.n	800aa76 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d004      	beq.n	800aa64 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa5a:	7bbb      	ldrb	r3, [r7, #14]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 f93d 	bl	800bcde <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fc9c 	bl	800b3a2 <USBD_CtlSendStatus>
              }
              break;
 800aa6a:	e004      	b.n	800aa76 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fbce 	bl	800b210 <USBD_CtlError>
              break;
 800aa74:	e000      	b.n	800aa78 <USBD_StdEPReq+0x158>
              break;
 800aa76:	bf00      	nop
          }
          break;
 800aa78:	e0aa      	b.n	800abd0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d002      	beq.n	800aa8a <USBD_StdEPReq+0x16a>
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d032      	beq.n	800aaee <USBD_StdEPReq+0x1ce>
 800aa88:	e097      	b.n	800abba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d007      	beq.n	800aaa0 <USBD_StdEPReq+0x180>
 800aa90:	7bbb      	ldrb	r3, [r7, #14]
 800aa92:	2b80      	cmp	r3, #128	; 0x80
 800aa94:	d004      	beq.n	800aaa0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fbb9 	bl	800b210 <USBD_CtlError>
                break;
 800aa9e:	e091      	b.n	800abc4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	da0b      	bge.n	800aac0 <USBD_StdEPReq+0x1a0>
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaae:	4613      	mov	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	3310      	adds	r3, #16
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	4413      	add	r3, r2
 800aabc:	3304      	adds	r3, #4
 800aabe:	e00b      	b.n	800aad8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aac6:	4613      	mov	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	4413      	add	r3, r2
 800aad6:	3304      	adds	r3, #4
 800aad8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2200      	movs	r2, #0
 800aade:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	2202      	movs	r2, #2
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fbfd 	bl	800b2e6 <USBD_CtlSendData>
              break;
 800aaec:	e06a      	b.n	800abc4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aaee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	da11      	bge.n	800ab1a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
 800aaf8:	f003 020f 	and.w	r2, r3, #15
 800aafc:	6879      	ldr	r1, [r7, #4]
 800aafe:	4613      	mov	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	440b      	add	r3, r1
 800ab08:	3318      	adds	r3, #24
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d117      	bne.n	800ab40 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fb7c 	bl	800b210 <USBD_CtlError>
                  break;
 800ab18:	e054      	b.n	800abc4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
 800ab1c:	f003 020f 	and.w	r2, r3, #15
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	440b      	add	r3, r1
 800ab2c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d104      	bne.n	800ab40 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fb69 	bl	800b210 <USBD_CtlError>
                  break;
 800ab3e:	e041      	b.n	800abc4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	da0b      	bge.n	800ab60 <USBD_StdEPReq+0x240>
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab4e:	4613      	mov	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4413      	add	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	3310      	adds	r3, #16
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	e00b      	b.n	800ab78 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
 800ab62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab66:	4613      	mov	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	4413      	add	r3, r2
 800ab76:	3304      	adds	r3, #4
 800ab78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab7a:	7bbb      	ldrb	r3, [r7, #14]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <USBD_StdEPReq+0x266>
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
 800ab82:	2b80      	cmp	r3, #128	; 0x80
 800ab84:	d103      	bne.n	800ab8e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]
 800ab8c:	e00e      	b.n	800abac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f001 f8c2 	bl	800bd1c <USBD_LL_IsStallEP>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2201      	movs	r2, #1
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	e002      	b.n	800abac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	2200      	movs	r2, #0
 800abaa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	2202      	movs	r2, #2
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fb97 	bl	800b2e6 <USBD_CtlSendData>
              break;
 800abb8:	e004      	b.n	800abc4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800abba:	6839      	ldr	r1, [r7, #0]
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 fb27 	bl	800b210 <USBD_CtlError>
              break;
 800abc2:	bf00      	nop
          }
          break;
 800abc4:	e004      	b.n	800abd0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fb21 	bl	800b210 <USBD_CtlError>
          break;
 800abce:	bf00      	nop
      }
      break;
 800abd0:	e004      	b.n	800abdc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fb1b 	bl	800b210 <USBD_CtlError>
      break;
 800abda:	bf00      	nop
  }

  return ret;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
	...

0800abe8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abf2:	2300      	movs	r3, #0
 800abf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abfa:	2300      	movs	r3, #0
 800abfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	885b      	ldrh	r3, [r3, #2]
 800ac02:	0a1b      	lsrs	r3, r3, #8
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	3b01      	subs	r3, #1
 800ac08:	2b06      	cmp	r3, #6
 800ac0a:	f200 8128 	bhi.w	800ae5e <USBD_GetDescriptor+0x276>
 800ac0e:	a201      	add	r2, pc, #4	; (adr r2, 800ac14 <USBD_GetDescriptor+0x2c>)
 800ac10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac14:	0800ac31 	.word	0x0800ac31
 800ac18:	0800ac49 	.word	0x0800ac49
 800ac1c:	0800ac89 	.word	0x0800ac89
 800ac20:	0800ae5f 	.word	0x0800ae5f
 800ac24:	0800ae5f 	.word	0x0800ae5f
 800ac28:	0800adff 	.word	0x0800adff
 800ac2c:	0800ae2b 	.word	0x0800ae2b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	7c12      	ldrb	r2, [r2, #16]
 800ac3c:	f107 0108 	add.w	r1, r7, #8
 800ac40:	4610      	mov	r0, r2
 800ac42:	4798      	blx	r3
 800ac44:	60f8      	str	r0, [r7, #12]
      break;
 800ac46:	e112      	b.n	800ae6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	7c1b      	ldrb	r3, [r3, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10d      	bne.n	800ac6c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac58:	f107 0208 	add.w	r2, r7, #8
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	4798      	blx	r3
 800ac60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	3301      	adds	r3, #1
 800ac66:	2202      	movs	r2, #2
 800ac68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac6a:	e100      	b.n	800ae6e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac74:	f107 0208 	add.w	r2, r7, #8
 800ac78:	4610      	mov	r0, r2
 800ac7a:	4798      	blx	r3
 800ac7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3301      	adds	r3, #1
 800ac82:	2202      	movs	r2, #2
 800ac84:	701a      	strb	r2, [r3, #0]
      break;
 800ac86:	e0f2      	b.n	800ae6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	885b      	ldrh	r3, [r3, #2]
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b05      	cmp	r3, #5
 800ac90:	f200 80ac 	bhi.w	800adec <USBD_GetDescriptor+0x204>
 800ac94:	a201      	add	r2, pc, #4	; (adr r2, 800ac9c <USBD_GetDescriptor+0xb4>)
 800ac96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9a:	bf00      	nop
 800ac9c:	0800acb5 	.word	0x0800acb5
 800aca0:	0800ace9 	.word	0x0800ace9
 800aca4:	0800ad1d 	.word	0x0800ad1d
 800aca8:	0800ad51 	.word	0x0800ad51
 800acac:	0800ad85 	.word	0x0800ad85
 800acb0:	0800adb9 	.word	0x0800adb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	7c12      	ldrb	r2, [r2, #16]
 800accc:	f107 0108 	add.w	r1, r7, #8
 800acd0:	4610      	mov	r0, r2
 800acd2:	4798      	blx	r3
 800acd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acd6:	e091      	b.n	800adfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fa98 	bl	800b210 <USBD_CtlError>
            err++;
 800ace0:	7afb      	ldrb	r3, [r7, #11]
 800ace2:	3301      	adds	r3, #1
 800ace4:	72fb      	strb	r3, [r7, #11]
          break;
 800ace6:	e089      	b.n	800adfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00b      	beq.n	800ad0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	7c12      	ldrb	r2, [r2, #16]
 800ad00:	f107 0108 	add.w	r1, r7, #8
 800ad04:	4610      	mov	r0, r2
 800ad06:	4798      	blx	r3
 800ad08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad0a:	e077      	b.n	800adfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fa7e 	bl	800b210 <USBD_CtlError>
            err++;
 800ad14:	7afb      	ldrb	r3, [r7, #11]
 800ad16:	3301      	adds	r3, #1
 800ad18:	72fb      	strb	r3, [r7, #11]
          break;
 800ad1a:	e06f      	b.n	800adfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	7c12      	ldrb	r2, [r2, #16]
 800ad34:	f107 0108 	add.w	r1, r7, #8
 800ad38:	4610      	mov	r0, r2
 800ad3a:	4798      	blx	r3
 800ad3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad3e:	e05d      	b.n	800adfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fa64 	bl	800b210 <USBD_CtlError>
            err++;
 800ad48:	7afb      	ldrb	r3, [r7, #11]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad4e:	e055      	b.n	800adfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00b      	beq.n	800ad74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	7c12      	ldrb	r2, [r2, #16]
 800ad68:	f107 0108 	add.w	r1, r7, #8
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3
 800ad70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad72:	e043      	b.n	800adfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fa4a 	bl	800b210 <USBD_CtlError>
            err++;
 800ad7c:	7afb      	ldrb	r3, [r7, #11]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	72fb      	strb	r3, [r7, #11]
          break;
 800ad82:	e03b      	b.n	800adfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00b      	beq.n	800ada8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad96:	695b      	ldr	r3, [r3, #20]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	7c12      	ldrb	r2, [r2, #16]
 800ad9c:	f107 0108 	add.w	r1, r7, #8
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ada6:	e029      	b.n	800adfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fa30 	bl	800b210 <USBD_CtlError>
            err++;
 800adb0:	7afb      	ldrb	r3, [r7, #11]
 800adb2:	3301      	adds	r3, #1
 800adb4:	72fb      	strb	r3, [r7, #11]
          break;
 800adb6:	e021      	b.n	800adfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adbe:	699b      	ldr	r3, [r3, #24]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00b      	beq.n	800addc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	7c12      	ldrb	r2, [r2, #16]
 800add0:	f107 0108 	add.w	r1, r7, #8
 800add4:	4610      	mov	r0, r2
 800add6:	4798      	blx	r3
 800add8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adda:	e00f      	b.n	800adfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fa16 	bl	800b210 <USBD_CtlError>
            err++;
 800ade4:	7afb      	ldrb	r3, [r7, #11]
 800ade6:	3301      	adds	r3, #1
 800ade8:	72fb      	strb	r3, [r7, #11]
          break;
 800adea:	e007      	b.n	800adfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fa0e 	bl	800b210 <USBD_CtlError>
          err++;
 800adf4:	7afb      	ldrb	r3, [r7, #11]
 800adf6:	3301      	adds	r3, #1
 800adf8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800adfa:	e038      	b.n	800ae6e <USBD_GetDescriptor+0x286>
 800adfc:	e037      	b.n	800ae6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	7c1b      	ldrb	r3, [r3, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d109      	bne.n	800ae1a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0e:	f107 0208 	add.w	r2, r7, #8
 800ae12:	4610      	mov	r0, r2
 800ae14:	4798      	blx	r3
 800ae16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae18:	e029      	b.n	800ae6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 f9f7 	bl	800b210 <USBD_CtlError>
        err++;
 800ae22:	7afb      	ldrb	r3, [r7, #11]
 800ae24:	3301      	adds	r3, #1
 800ae26:	72fb      	strb	r3, [r7, #11]
      break;
 800ae28:	e021      	b.n	800ae6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	7c1b      	ldrb	r3, [r3, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10d      	bne.n	800ae4e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3a:	f107 0208 	add.w	r2, r7, #8
 800ae3e:	4610      	mov	r0, r2
 800ae40:	4798      	blx	r3
 800ae42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3301      	adds	r3, #1
 800ae48:	2207      	movs	r2, #7
 800ae4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae4c:	e00f      	b.n	800ae6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 f9dd 	bl	800b210 <USBD_CtlError>
        err++;
 800ae56:	7afb      	ldrb	r3, [r7, #11]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae5c:	e007      	b.n	800ae6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f9d5 	bl	800b210 <USBD_CtlError>
      err++;
 800ae66:	7afb      	ldrb	r3, [r7, #11]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae6c:	bf00      	nop
  }

  if (err != 0U)
 800ae6e:	7afb      	ldrb	r3, [r7, #11]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d11c      	bne.n	800aeae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ae74:	893b      	ldrh	r3, [r7, #8]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d011      	beq.n	800ae9e <USBD_GetDescriptor+0x2b6>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	88db      	ldrh	r3, [r3, #6]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00d      	beq.n	800ae9e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	88da      	ldrh	r2, [r3, #6]
 800ae86:	893b      	ldrh	r3, [r7, #8]
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	bf28      	it	cs
 800ae8c:	4613      	movcs	r3, r2
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae92:	893b      	ldrh	r3, [r7, #8]
 800ae94:	461a      	mov	r2, r3
 800ae96:	68f9      	ldr	r1, [r7, #12]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fa24 	bl	800b2e6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	88db      	ldrh	r3, [r3, #6]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d104      	bne.n	800aeb0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fa7b 	bl	800b3a2 <USBD_CtlSendStatus>
 800aeac:	e000      	b.n	800aeb0 <USBD_GetDescriptor+0x2c8>
    return;
 800aeae:	bf00      	nop
    }
  }
}
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop

0800aeb8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	889b      	ldrh	r3, [r3, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d130      	bne.n	800af2c <USBD_SetAddress+0x74>
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	88db      	ldrh	r3, [r3, #6]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d12c      	bne.n	800af2c <USBD_SetAddress+0x74>
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	885b      	ldrh	r3, [r3, #2]
 800aed6:	2b7f      	cmp	r3, #127	; 0x7f
 800aed8:	d828      	bhi.n	800af2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	885b      	ldrh	r3, [r3, #2]
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aee4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d104      	bne.n	800aefa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f98c 	bl	800b210 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aef8:	e01d      	b.n	800af36 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	7bfa      	ldrb	r2, [r7, #15]
 800aefe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af02:	7bfb      	ldrb	r3, [r7, #15]
 800af04:	4619      	mov	r1, r3
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 ff35 	bl	800bd76 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fa48 	bl	800b3a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af12:	7bfb      	ldrb	r3, [r7, #15]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d004      	beq.n	800af22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2202      	movs	r2, #2
 800af1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af20:	e009      	b.n	800af36 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2a:	e004      	b.n	800af36 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f96e 	bl	800b210 <USBD_CtlError>
  }
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
	...

0800af40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	885b      	ldrh	r3, [r3, #2]
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	4b41      	ldr	r3, [pc, #260]	; (800b058 <USBD_SetConfig+0x118>)
 800af52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af54:	4b40      	ldr	r3, [pc, #256]	; (800b058 <USBD_SetConfig+0x118>)
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d904      	bls.n	800af66 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f956 	bl	800b210 <USBD_CtlError>
 800af64:	e075      	b.n	800b052 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d002      	beq.n	800af76 <USBD_SetConfig+0x36>
 800af70:	2b03      	cmp	r3, #3
 800af72:	d023      	beq.n	800afbc <USBD_SetConfig+0x7c>
 800af74:	e062      	b.n	800b03c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800af76:	4b38      	ldr	r3, [pc, #224]	; (800b058 <USBD_SetConfig+0x118>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d01a      	beq.n	800afb4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800af7e:	4b36      	ldr	r3, [pc, #216]	; (800b058 <USBD_SetConfig+0x118>)
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	461a      	mov	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2203      	movs	r2, #3
 800af8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af90:	4b31      	ldr	r3, [pc, #196]	; (800b058 <USBD_SetConfig+0x118>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff f9e4 	bl	800a364 <USBD_SetClassConfig>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d104      	bne.n	800afac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 f933 	bl	800b210 <USBD_CtlError>
            return;
 800afaa:	e052      	b.n	800b052 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f9f8 	bl	800b3a2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800afb2:	e04e      	b.n	800b052 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f9f4 	bl	800b3a2 <USBD_CtlSendStatus>
        break;
 800afba:	e04a      	b.n	800b052 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800afbc:	4b26      	ldr	r3, [pc, #152]	; (800b058 <USBD_SetConfig+0x118>)
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d112      	bne.n	800afea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800afcc:	4b22      	ldr	r3, [pc, #136]	; (800b058 <USBD_SetConfig+0x118>)
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	461a      	mov	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800afd6:	4b20      	ldr	r3, [pc, #128]	; (800b058 <USBD_SetConfig+0x118>)
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7ff f9e0 	bl	800a3a2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 f9dd 	bl	800b3a2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800afe8:	e033      	b.n	800b052 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800afea:	4b1b      	ldr	r3, [pc, #108]	; (800b058 <USBD_SetConfig+0x118>)
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d01d      	beq.n	800b034 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	b2db      	uxtb	r3, r3
 800affe:	4619      	mov	r1, r3
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff f9ce 	bl	800a3a2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b006:	4b14      	ldr	r3, [pc, #80]	; (800b058 <USBD_SetConfig+0x118>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b010:	4b11      	ldr	r3, [pc, #68]	; (800b058 <USBD_SetConfig+0x118>)
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7ff f9a4 	bl	800a364 <USBD_SetClassConfig>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b02      	cmp	r3, #2
 800b020:	d104      	bne.n	800b02c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f8f3 	bl	800b210 <USBD_CtlError>
            return;
 800b02a:	e012      	b.n	800b052 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f9b8 	bl	800b3a2 <USBD_CtlSendStatus>
        break;
 800b032:	e00e      	b.n	800b052 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f9b4 	bl	800b3a2 <USBD_CtlSendStatus>
        break;
 800b03a:	e00a      	b.n	800b052 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f8e6 	bl	800b210 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b044:	4b04      	ldr	r3, [pc, #16]	; (800b058 <USBD_SetConfig+0x118>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	4619      	mov	r1, r3
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff f9a9 	bl	800a3a2 <USBD_ClrClassConfig>
        break;
 800b050:	bf00      	nop
    }
  }
}
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	20000424 	.word	0x20000424

0800b05c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	88db      	ldrh	r3, [r3, #6]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d004      	beq.n	800b078 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f8cd 	bl	800b210 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b076:	e022      	b.n	800b0be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b07e:	2b02      	cmp	r3, #2
 800b080:	dc02      	bgt.n	800b088 <USBD_GetConfig+0x2c>
 800b082:	2b00      	cmp	r3, #0
 800b084:	dc03      	bgt.n	800b08e <USBD_GetConfig+0x32>
 800b086:	e015      	b.n	800b0b4 <USBD_GetConfig+0x58>
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d00b      	beq.n	800b0a4 <USBD_GetConfig+0x48>
 800b08c:	e012      	b.n	800b0b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3308      	adds	r3, #8
 800b098:	2201      	movs	r2, #1
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f922 	bl	800b2e6 <USBD_CtlSendData>
        break;
 800b0a2:	e00c      	b.n	800b0be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	3304      	adds	r3, #4
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f91a 	bl	800b2e6 <USBD_CtlSendData>
        break;
 800b0b2:	e004      	b.n	800b0be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b0b4:	6839      	ldr	r1, [r7, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f8aa 	bl	800b210 <USBD_CtlError>
        break;
 800b0bc:	bf00      	nop
}
 800b0be:	bf00      	nop
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d81e      	bhi.n	800b11a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	88db      	ldrh	r3, [r3, #6]
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	d004      	beq.n	800b0ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f892 	bl	800b210 <USBD_CtlError>
        break;
 800b0ec:	e01a      	b.n	800b124 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d005      	beq.n	800b10a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	f043 0202 	orr.w	r2, r3, #2
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	330c      	adds	r3, #12
 800b10e:	2202      	movs	r2, #2
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f8e7 	bl	800b2e6 <USBD_CtlSendData>
      break;
 800b118:	e004      	b.n	800b124 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f877 	bl	800b210 <USBD_CtlError>
      break;
 800b122:	bf00      	nop
  }
}
 800b124:	bf00      	nop
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	885b      	ldrh	r3, [r3, #2]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d106      	bne.n	800b14c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f92b 	bl	800b3a2 <USBD_CtlSendStatus>
  }
}
 800b14c:	bf00      	nop
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b164:	3b01      	subs	r3, #1
 800b166:	2b02      	cmp	r3, #2
 800b168:	d80b      	bhi.n	800b182 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	885b      	ldrh	r3, [r3, #2]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d10c      	bne.n	800b18c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f911 	bl	800b3a2 <USBD_CtlSendStatus>
      }
      break;
 800b180:	e004      	b.n	800b18c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f843 	bl	800b210 <USBD_CtlError>
      break;
 800b18a:	e000      	b.n	800b18e <USBD_ClrFeature+0x3a>
      break;
 800b18c:	bf00      	nop
  }
}
 800b18e:	bf00      	nop
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b196:	b480      	push	{r7}
 800b198:	b083      	sub	sp, #12
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	781a      	ldrb	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	785a      	ldrb	r2, [r3, #1]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	3302      	adds	r3, #2
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	3303      	adds	r3, #3
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	021b      	lsls	r3, r3, #8
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	4413      	add	r3, r2
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	3305      	adds	r3, #5
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	021b      	lsls	r3, r3, #8
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4413      	add	r3, r2
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	3306      	adds	r3, #6
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	3307      	adds	r3, #7
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	021b      	lsls	r3, r3, #8
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	4413      	add	r3, r2
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	80da      	strh	r2, [r3, #6]

}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b21a:	2180      	movs	r1, #128	; 0x80
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 fd3f 	bl	800bca0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b222:	2100      	movs	r1, #0
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 fd3b 	bl	800bca0 <USBD_LL_StallEP>
}
 800b22a:	bf00      	nop
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b086      	sub	sp, #24
 800b236:	af00      	add	r7, sp, #0
 800b238:	60f8      	str	r0, [r7, #12]
 800b23a:	60b9      	str	r1, [r7, #8]
 800b23c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b23e:	2300      	movs	r3, #0
 800b240:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d032      	beq.n	800b2ae <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f000 f834 	bl	800b2b6 <USBD_GetLen>
 800b24e:	4603      	mov	r3, r0
 800b250:	3301      	adds	r3, #1
 800b252:	b29b      	uxth	r3, r3
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	b29a      	uxth	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b25c:	7dfb      	ldrb	r3, [r7, #23]
 800b25e:	1c5a      	adds	r2, r3, #1
 800b260:	75fa      	strb	r2, [r7, #23]
 800b262:	461a      	mov	r2, r3
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	4413      	add	r3, r2
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	7812      	ldrb	r2, [r2, #0]
 800b26c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	75fa      	strb	r2, [r7, #23]
 800b274:	461a      	mov	r2, r3
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	4413      	add	r3, r2
 800b27a:	2203      	movs	r2, #3
 800b27c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b27e:	e012      	b.n	800b2a6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	60fa      	str	r2, [r7, #12]
 800b286:	7dfa      	ldrb	r2, [r7, #23]
 800b288:	1c51      	adds	r1, r2, #1
 800b28a:	75f9      	strb	r1, [r7, #23]
 800b28c:	4611      	mov	r1, r2
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	440a      	add	r2, r1
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b296:	7dfb      	ldrb	r3, [r7, #23]
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	75fa      	strb	r2, [r7, #23]
 800b29c:	461a      	mov	r2, r3
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1e8      	bne.n	800b280 <USBD_GetString+0x4e>
    }
  }
}
 800b2ae:	bf00      	nop
 800b2b0:	3718      	adds	r7, #24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2b6:	b480      	push	{r7}
 800b2b8:	b085      	sub	sp, #20
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b2c2:	e005      	b.n	800b2d0 <USBD_GetLen+0x1a>
  {
    len++;
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1f5      	bne.n	800b2c4 <USBD_GetLen+0xe>
  }

  return len;
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr

0800b2e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	60f8      	str	r0, [r7, #12]
 800b2ee:	60b9      	str	r1, [r7, #8]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b2fc:	88fa      	ldrh	r2, [r7, #6]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b302:	88fa      	ldrh	r2, [r7, #6]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b308:	88fb      	ldrh	r3, [r7, #6]
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	2100      	movs	r1, #0
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f000 fd50 	bl	800bdb4 <USBD_LL_Transmit>

  return USBD_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b084      	sub	sp, #16
 800b322:	af00      	add	r7, sp, #0
 800b324:	60f8      	str	r0, [r7, #12]
 800b326:	60b9      	str	r1, [r7, #8]
 800b328:	4613      	mov	r3, r2
 800b32a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b32c:	88fb      	ldrh	r3, [r7, #6]
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	2100      	movs	r1, #0
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f000 fd3e 	bl	800bdb4 <USBD_LL_Transmit>

  return USBD_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b084      	sub	sp, #16
 800b346:	af00      	add	r7, sp, #0
 800b348:	60f8      	str	r0, [r7, #12]
 800b34a:	60b9      	str	r1, [r7, #8]
 800b34c:	4613      	mov	r3, r2
 800b34e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2203      	movs	r2, #3
 800b354:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b358:	88fa      	ldrh	r2, [r7, #6]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b360:	88fa      	ldrh	r2, [r7, #6]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b368:	88fb      	ldrh	r3, [r7, #6]
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	2100      	movs	r1, #0
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f000 fd43 	bl	800bdfa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b084      	sub	sp, #16
 800b382:	af00      	add	r7, sp, #0
 800b384:	60f8      	str	r0, [r7, #12]
 800b386:	60b9      	str	r1, [r7, #8]
 800b388:	4613      	mov	r3, r2
 800b38a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b38c:	88fb      	ldrh	r3, [r7, #6]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	2100      	movs	r1, #0
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f000 fd31 	bl	800bdfa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b082      	sub	sp, #8
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2204      	movs	r2, #4
 800b3ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fcfb 	bl	800bdb4 <USBD_LL_Transmit>

  return USBD_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2205      	movs	r2, #5
 800b3d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3d8:	2300      	movs	r3, #0
 800b3da:	2200      	movs	r2, #0
 800b3dc:	2100      	movs	r1, #0
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fd0b 	bl	800bdfa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
	...

0800b3f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	4912      	ldr	r1, [pc, #72]	; (800b440 <MX_USB_DEVICE_Init+0x50>)
 800b3f8:	4812      	ldr	r0, [pc, #72]	; (800b444 <MX_USB_DEVICE_Init+0x54>)
 800b3fa:	f7fe ff57 	bl	800a2ac <USBD_Init>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d001      	beq.n	800b408 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b404:	f7f6 f826 	bl	8001454 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b408:	490f      	ldr	r1, [pc, #60]	; (800b448 <MX_USB_DEVICE_Init+0x58>)
 800b40a:	480e      	ldr	r0, [pc, #56]	; (800b444 <MX_USB_DEVICE_Init+0x54>)
 800b40c:	f7fe ff79 	bl	800a302 <USBD_RegisterClass>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d001      	beq.n	800b41a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b416:	f7f6 f81d 	bl	8001454 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b41a:	490c      	ldr	r1, [pc, #48]	; (800b44c <MX_USB_DEVICE_Init+0x5c>)
 800b41c:	4809      	ldr	r0, [pc, #36]	; (800b444 <MX_USB_DEVICE_Init+0x54>)
 800b41e:	f7fe fea7 	bl	800a170 <USBD_CDC_RegisterInterface>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b428:	f7f6 f814 	bl	8001454 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b42c:	4805      	ldr	r0, [pc, #20]	; (800b444 <MX_USB_DEVICE_Init+0x54>)
 800b42e:	f7fe ff82 	bl	800a336 <USBD_Start>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b438:	f7f6 f80c 	bl	8001454 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b43c:	bf00      	nop
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	2000018c 	.word	0x2000018c
 800b444:	20000428 	.word	0x20000428
 800b448:	20000070 	.word	0x20000070
 800b44c:	2000017c 	.word	0x2000017c

0800b450 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b454:	2200      	movs	r2, #0
 800b456:	4905      	ldr	r1, [pc, #20]	; (800b46c <CDC_Init_FS+0x1c>)
 800b458:	4805      	ldr	r0, [pc, #20]	; (800b470 <CDC_Init_FS+0x20>)
 800b45a:	f7fe fea0 	bl	800a19e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b45e:	4905      	ldr	r1, [pc, #20]	; (800b474 <CDC_Init_FS+0x24>)
 800b460:	4803      	ldr	r0, [pc, #12]	; (800b470 <CDC_Init_FS+0x20>)
 800b462:	f7fe feb6 	bl	800a1d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b466:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b468:	4618      	mov	r0, r3
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	20000b30 	.word	0x20000b30
 800b470:	20000428 	.word	0x20000428
 800b474:	20000730 	.word	0x20000730

0800b478 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b478:	b480      	push	{r7}
 800b47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b47c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b47e:	4618      	mov	r0, r3
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	4603      	mov	r3, r0
 800b490:	6039      	str	r1, [r7, #0]
 800b492:	71fb      	strb	r3, [r7, #7]
 800b494:	4613      	mov	r3, r2
 800b496:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b498:	79fb      	ldrb	r3, [r7, #7]
 800b49a:	2b23      	cmp	r3, #35	; 0x23
 800b49c:	f200 80a2 	bhi.w	800b5e4 <CDC_Control_FS+0x15c>
 800b4a0:	a201      	add	r2, pc, #4	; (adr r2, 800b4a8 <CDC_Control_FS+0x20>)
 800b4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a6:	bf00      	nop
 800b4a8:	0800b5e5 	.word	0x0800b5e5
 800b4ac:	0800b5e5 	.word	0x0800b5e5
 800b4b0:	0800b5e5 	.word	0x0800b5e5
 800b4b4:	0800b5e5 	.word	0x0800b5e5
 800b4b8:	0800b5e5 	.word	0x0800b5e5
 800b4bc:	0800b5e5 	.word	0x0800b5e5
 800b4c0:	0800b5e5 	.word	0x0800b5e5
 800b4c4:	0800b5e5 	.word	0x0800b5e5
 800b4c8:	0800b5e5 	.word	0x0800b5e5
 800b4cc:	0800b5e5 	.word	0x0800b5e5
 800b4d0:	0800b5e5 	.word	0x0800b5e5
 800b4d4:	0800b5e5 	.word	0x0800b5e5
 800b4d8:	0800b5e5 	.word	0x0800b5e5
 800b4dc:	0800b5e5 	.word	0x0800b5e5
 800b4e0:	0800b5e5 	.word	0x0800b5e5
 800b4e4:	0800b5e5 	.word	0x0800b5e5
 800b4e8:	0800b5e5 	.word	0x0800b5e5
 800b4ec:	0800b5e5 	.word	0x0800b5e5
 800b4f0:	0800b5e5 	.word	0x0800b5e5
 800b4f4:	0800b5e5 	.word	0x0800b5e5
 800b4f8:	0800b5e5 	.word	0x0800b5e5
 800b4fc:	0800b5e5 	.word	0x0800b5e5
 800b500:	0800b5e5 	.word	0x0800b5e5
 800b504:	0800b5e5 	.word	0x0800b5e5
 800b508:	0800b5e5 	.word	0x0800b5e5
 800b50c:	0800b5e5 	.word	0x0800b5e5
 800b510:	0800b5e5 	.word	0x0800b5e5
 800b514:	0800b5e5 	.word	0x0800b5e5
 800b518:	0800b5e5 	.word	0x0800b5e5
 800b51c:	0800b5e5 	.word	0x0800b5e5
 800b520:	0800b5e5 	.word	0x0800b5e5
 800b524:	0800b5e5 	.word	0x0800b5e5
 800b528:	0800b539 	.word	0x0800b539
 800b52c:	0800b587 	.word	0x0800b587
 800b530:	0800b5e5 	.word	0x0800b5e5
 800b534:	0800b5e5 	.word	0x0800b5e5
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    {

    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 800b538:	2201      	movs	r2, #1
 800b53a:	2120      	movs	r1, #32
 800b53c:	482c      	ldr	r0, [pc, #176]	; (800b5f0 <CDC_Control_FS+0x168>)
 800b53e:	f7f7 ff0f 	bl	8003360 <HAL_GPIO_WritePin>
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	461a      	mov	r2, r3
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	3301      	adds	r3, #1
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	021b      	lsls	r3, r3, #8
 800b550:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	3302      	adds	r3, #2
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800b55a:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	3303      	adds	r3, #3
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	061b      	lsls	r3, r3, #24
 800b564:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800b566:	461a      	mov	r2, r3
 800b568:	4b22      	ldr	r3, [pc, #136]	; (800b5f4 <CDC_Control_FS+0x16c>)
 800b56a:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	791a      	ldrb	r2, [r3, #4]
 800b570:	4b20      	ldr	r3, [pc, #128]	; (800b5f4 <CDC_Control_FS+0x16c>)
 800b572:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	795a      	ldrb	r2, [r3, #5]
 800b578:	4b1e      	ldr	r3, [pc, #120]	; (800b5f4 <CDC_Control_FS+0x16c>)
 800b57a:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	799a      	ldrb	r2, [r3, #6]
 800b580:	4b1c      	ldr	r3, [pc, #112]	; (800b5f4 <CDC_Control_FS+0x16c>)
 800b582:	719a      	strb	r2, [r3, #6]
    }
    break;
 800b584:	e02f      	b.n	800b5e6 <CDC_Control_FS+0x15e>

    case CDC_GET_LINE_CODING:
    {


    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 800b586:	2201      	movs	r2, #1
 800b588:	2120      	movs	r1, #32
 800b58a:	4819      	ldr	r0, [pc, #100]	; (800b5f0 <CDC_Control_FS+0x168>)
 800b58c:	f7f7 fee8 	bl	8003360 <HAL_GPIO_WritePin>
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800b590:	4b18      	ldr	r3, [pc, #96]	; (800b5f4 <CDC_Control_FS+0x16c>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	b2da      	uxtb	r2, r3
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800b59a:	4b16      	ldr	r3, [pc, #88]	; (800b5f4 <CDC_Control_FS+0x16c>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	0a1a      	lsrs	r2, r3, #8
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	b2d2      	uxtb	r2, r2
 800b5a6:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800b5a8:	4b12      	ldr	r3, [pc, #72]	; (800b5f4 <CDC_Control_FS+0x16c>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	0c1a      	lsrs	r2, r3, #16
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	3302      	adds	r3, #2
 800b5b2:	b2d2      	uxtb	r2, r2
 800b5b4:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800b5b6:	4b0f      	ldr	r3, [pc, #60]	; (800b5f4 <CDC_Control_FS+0x16c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	0e1a      	lsrs	r2, r3, #24
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	3303      	adds	r3, #3
 800b5c0:	b2d2      	uxtb	r2, r2
 800b5c2:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	4a0a      	ldr	r2, [pc, #40]	; (800b5f4 <CDC_Control_FS+0x16c>)
 800b5ca:	7912      	ldrb	r2, [r2, #4]
 800b5cc:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	3305      	adds	r3, #5
 800b5d2:	4a08      	ldr	r2, [pc, #32]	; (800b5f4 <CDC_Control_FS+0x16c>)
 800b5d4:	7952      	ldrb	r2, [r2, #5]
 800b5d6:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	3306      	adds	r3, #6
 800b5dc:	4a05      	ldr	r2, [pc, #20]	; (800b5f4 <CDC_Control_FS+0x16c>)
 800b5de:	7992      	ldrb	r2, [r2, #6]
 800b5e0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b5e2:	e000      	b.n	800b5e6 <CDC_Control_FS+0x15e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b5e4:	bf00      	nop
  }

  return (USBD_OK);
 800b5e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3708      	adds	r7, #8
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	48000400 	.word	0x48000400
 800b5f4:	20000174 	.word	0x20000174

0800b5f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b602:	6879      	ldr	r1, [r7, #4]
 800b604:	4831      	ldr	r0, [pc, #196]	; (800b6cc <CDC_Receive_FS+0xd4>)
 800b606:	f7fe fde4 	bl	800a1d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b60a:	4830      	ldr	r0, [pc, #192]	; (800b6cc <CDC_Receive_FS+0xd4>)
 800b60c:	f7fe fe24 	bl	800a258 <USBD_CDC_ReceivePacket>
  //COBS decode
  for(uint32_t i=0;i<*Len;i++)
 800b610:	2300      	movs	r3, #0
 800b612:	60fb      	str	r3, [r7, #12]
 800b614:	e050      	b.n	800b6b8 <CDC_Receive_FS+0xc0>
  {
	zero_count--;
 800b616:	4b2e      	ldr	r3, [pc, #184]	; (800b6d0 <CDC_Receive_FS+0xd8>)
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	b2da      	uxtb	r2, r3
 800b61e:	4b2c      	ldr	r3, [pc, #176]	; (800b6d0 <CDC_Receive_FS+0xd8>)
 800b620:	701a      	strb	r2, [r3, #0]
    if(Buf[i]=='\0'){
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4413      	add	r3, r2
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d114      	bne.n	800b658 <CDC_Receive_FS+0x60>
      is_first = 1;
 800b62e:	4b29      	ldr	r3, [pc, #164]	; (800b6d4 <CDC_Receive_FS+0xdc>)
 800b630:	2201      	movs	r2, #1
 800b632:	701a      	strb	r2, [r3, #0]
      if(zero_count==0){
 800b634:	4b26      	ldr	r3, [pc, #152]	; (800b6d0 <CDC_Receive_FS+0xd8>)
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d106      	bne.n	800b64a <CDC_Receive_FS+0x52>
    	//last byte
    	usb_process(DecodedData,data_index);
 800b63c:	4b26      	ldr	r3, [pc, #152]	; (800b6d8 <CDC_Receive_FS+0xe0>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	4619      	mov	r1, r3
 800b642:	4826      	ldr	r0, [pc, #152]	; (800b6dc <CDC_Receive_FS+0xe4>)
 800b644:	f7f5 fb7e 	bl	8000d44 <usb_process>
 800b648:	e002      	b.n	800b650 <CDC_Receive_FS+0x58>
      }else{
        //error
        //reset
        zero_count=0;
 800b64a:	4b21      	ldr	r3, [pc, #132]	; (800b6d0 <CDC_Receive_FS+0xd8>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	701a      	strb	r2, [r3, #0]
      }
      data_index=0;
 800b650:	4b21      	ldr	r3, [pc, #132]	; (800b6d8 <CDC_Receive_FS+0xe0>)
 800b652:	2200      	movs	r2, #0
 800b654:	701a      	strb	r2, [r3, #0]
 800b656:	e02c      	b.n	800b6b2 <CDC_Receive_FS+0xba>
    }else{
      if(is_first==1){
 800b658:	4b1e      	ldr	r3, [pc, #120]	; (800b6d4 <CDC_Receive_FS+0xdc>)
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d109      	bne.n	800b674 <CDC_Receive_FS+0x7c>
    	  zero_count = Buf[i];
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	4413      	add	r3, r2
 800b666:	781a      	ldrb	r2, [r3, #0]
 800b668:	4b19      	ldr	r3, [pc, #100]	; (800b6d0 <CDC_Receive_FS+0xd8>)
 800b66a:	701a      	strb	r2, [r3, #0]
    	  is_first = 0;
 800b66c:	4b19      	ldr	r3, [pc, #100]	; (800b6d4 <CDC_Receive_FS+0xdc>)
 800b66e:	2200      	movs	r2, #0
 800b670:	701a      	strb	r2, [r3, #0]
    	  continue;
 800b672:	e01e      	b.n	800b6b2 <CDC_Receive_FS+0xba>
      }
      if(zero_count==0){
 800b674:	4b16      	ldr	r3, [pc, #88]	; (800b6d0 <CDC_Receive_FS+0xd8>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10c      	bne.n	800b696 <CDC_Receive_FS+0x9e>
    	DecodedData[data_index]=0x00;
 800b67c:	4b16      	ldr	r3, [pc, #88]	; (800b6d8 <CDC_Receive_FS+0xe0>)
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	4b16      	ldr	r3, [pc, #88]	; (800b6dc <CDC_Receive_FS+0xe4>)
 800b684:	2100      	movs	r1, #0
 800b686:	5499      	strb	r1, [r3, r2]
        zero_count=Buf[i];
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	4413      	add	r3, r2
 800b68e:	781a      	ldrb	r2, [r3, #0]
 800b690:	4b0f      	ldr	r3, [pc, #60]	; (800b6d0 <CDC_Receive_FS+0xd8>)
 800b692:	701a      	strb	r2, [r3, #0]
 800b694:	e007      	b.n	800b6a6 <CDC_Receive_FS+0xae>
      }else{
    	DecodedData[data_index]=Buf[i];
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	4413      	add	r3, r2
 800b69c:	4a0e      	ldr	r2, [pc, #56]	; (800b6d8 <CDC_Receive_FS+0xe0>)
 800b69e:	7812      	ldrb	r2, [r2, #0]
 800b6a0:	7819      	ldrb	r1, [r3, #0]
 800b6a2:	4b0e      	ldr	r3, [pc, #56]	; (800b6dc <CDC_Receive_FS+0xe4>)
 800b6a4:	5499      	strb	r1, [r3, r2]
      }
      data_index++;
 800b6a6:	4b0c      	ldr	r3, [pc, #48]	; (800b6d8 <CDC_Receive_FS+0xe0>)
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	4b0a      	ldr	r3, [pc, #40]	; (800b6d8 <CDC_Receive_FS+0xe0>)
 800b6b0:	701a      	strb	r2, [r3, #0]
  for(uint32_t i=0;i<*Len;i++)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d3a9      	bcc.n	800b616 <CDC_Receive_FS+0x1e>
    }
  }

  return (USBD_OK);
 800b6c2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	20000428 	.word	0x20000428
 800b6d0:	20000173 	.word	0x20000173
 800b6d4:	2000072d 	.word	0x2000072d
 800b6d8:	2000072c 	.word	0x2000072c
 800b6dc:	200006ec 	.word	0x200006ec

0800b6e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b6f0:	4b0d      	ldr	r3, [pc, #52]	; (800b728 <CDC_Transmit_FS+0x48>)
 800b6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d001      	beq.n	800b706 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b702:	2301      	movs	r3, #1
 800b704:	e00b      	b.n	800b71e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b706:	887b      	ldrh	r3, [r7, #2]
 800b708:	461a      	mov	r2, r3
 800b70a:	6879      	ldr	r1, [r7, #4]
 800b70c:	4806      	ldr	r0, [pc, #24]	; (800b728 <CDC_Transmit_FS+0x48>)
 800b70e:	f7fe fd46 	bl	800a19e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b712:	4805      	ldr	r0, [pc, #20]	; (800b728 <CDC_Transmit_FS+0x48>)
 800b714:	f7fe fd71 	bl	800a1fa <USBD_CDC_TransmitPacket>
 800b718:	4603      	mov	r3, r0
 800b71a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20000428 	.word	0x20000428

0800b72c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	6039      	str	r1, [r7, #0]
 800b736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2212      	movs	r2, #18
 800b73c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b73e:	4b03      	ldr	r3, [pc, #12]	; (800b74c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b740:	4618      	mov	r0, r3
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr
 800b74c:	200001a8 	.word	0x200001a8

0800b750 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	6039      	str	r1, [r7, #0]
 800b75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2204      	movs	r2, #4
 800b760:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b762:	4b03      	ldr	r3, [pc, #12]	; (800b770 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b764:	4618      	mov	r0, r3
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr
 800b770:	200001bc 	.word	0x200001bc

0800b774 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	4603      	mov	r3, r0
 800b77c:	6039      	str	r1, [r7, #0]
 800b77e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d105      	bne.n	800b792 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	4907      	ldr	r1, [pc, #28]	; (800b7a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b78a:	4808      	ldr	r0, [pc, #32]	; (800b7ac <USBD_FS_ProductStrDescriptor+0x38>)
 800b78c:	f7ff fd51 	bl	800b232 <USBD_GetString>
 800b790:	e004      	b.n	800b79c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	4904      	ldr	r1, [pc, #16]	; (800b7a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b796:	4805      	ldr	r0, [pc, #20]	; (800b7ac <USBD_FS_ProductStrDescriptor+0x38>)
 800b798:	f7ff fd4b 	bl	800b232 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b79c:	4b02      	ldr	r3, [pc, #8]	; (800b7a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20000f30 	.word	0x20000f30
 800b7ac:	0800bfe8 	.word	0x0800bfe8

0800b7b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	6039      	str	r1, [r7, #0]
 800b7ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	4904      	ldr	r1, [pc, #16]	; (800b7d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b7c0:	4804      	ldr	r0, [pc, #16]	; (800b7d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b7c2:	f7ff fd36 	bl	800b232 <USBD_GetString>
  return USBD_StrDesc;
 800b7c6:	4b02      	ldr	r3, [pc, #8]	; (800b7d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	20000f30 	.word	0x20000f30
 800b7d4:	0800c000 	.word	0x0800c000

0800b7d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	4603      	mov	r3, r0
 800b7e0:	6039      	str	r1, [r7, #0]
 800b7e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	221a      	movs	r2, #26
 800b7e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b7ea:	f000 f843 	bl	800b874 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b7ee:	4b02      	ldr	r3, [pc, #8]	; (800b7f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	200001c0 	.word	0x200001c0

0800b7fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	4603      	mov	r3, r0
 800b804:	6039      	str	r1, [r7, #0]
 800b806:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b808:	79fb      	ldrb	r3, [r7, #7]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d105      	bne.n	800b81a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	4907      	ldr	r1, [pc, #28]	; (800b830 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b812:	4808      	ldr	r0, [pc, #32]	; (800b834 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b814:	f7ff fd0d 	bl	800b232 <USBD_GetString>
 800b818:	e004      	b.n	800b824 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	4904      	ldr	r1, [pc, #16]	; (800b830 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b81e:	4805      	ldr	r0, [pc, #20]	; (800b834 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b820:	f7ff fd07 	bl	800b232 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b824:	4b02      	ldr	r3, [pc, #8]	; (800b830 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b826:	4618      	mov	r0, r3
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	20000f30 	.word	0x20000f30
 800b834:	0800c004 	.word	0x0800c004

0800b838 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	4603      	mov	r3, r0
 800b840:	6039      	str	r1, [r7, #0]
 800b842:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b844:	79fb      	ldrb	r3, [r7, #7]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d105      	bne.n	800b856 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	4907      	ldr	r1, [pc, #28]	; (800b86c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b84e:	4808      	ldr	r0, [pc, #32]	; (800b870 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b850:	f7ff fcef 	bl	800b232 <USBD_GetString>
 800b854:	e004      	b.n	800b860 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	4904      	ldr	r1, [pc, #16]	; (800b86c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b85a:	4805      	ldr	r0, [pc, #20]	; (800b870 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b85c:	f7ff fce9 	bl	800b232 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b860:	4b02      	ldr	r3, [pc, #8]	; (800b86c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b862:	4618      	mov	r0, r3
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	20000f30 	.word	0x20000f30
 800b870:	0800c010 	.word	0x0800c010

0800b874 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b87a:	4b0f      	ldr	r3, [pc, #60]	; (800b8b8 <Get_SerialNum+0x44>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b880:	4b0e      	ldr	r3, [pc, #56]	; (800b8bc <Get_SerialNum+0x48>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b886:	4b0e      	ldr	r3, [pc, #56]	; (800b8c0 <Get_SerialNum+0x4c>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4413      	add	r3, r2
 800b892:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d009      	beq.n	800b8ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b89a:	2208      	movs	r2, #8
 800b89c:	4909      	ldr	r1, [pc, #36]	; (800b8c4 <Get_SerialNum+0x50>)
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f000 f814 	bl	800b8cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b8a4:	2204      	movs	r2, #4
 800b8a6:	4908      	ldr	r1, [pc, #32]	; (800b8c8 <Get_SerialNum+0x54>)
 800b8a8:	68b8      	ldr	r0, [r7, #8]
 800b8aa:	f000 f80f 	bl	800b8cc <IntToUnicode>
  }
}
 800b8ae:	bf00      	nop
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	1ffff7ac 	.word	0x1ffff7ac
 800b8bc:	1ffff7b0 	.word	0x1ffff7b0
 800b8c0:	1ffff7b4 	.word	0x1ffff7b4
 800b8c4:	200001c2 	.word	0x200001c2
 800b8c8:	200001d2 	.word	0x200001d2

0800b8cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b087      	sub	sp, #28
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b8de:	2300      	movs	r3, #0
 800b8e0:	75fb      	strb	r3, [r7, #23]
 800b8e2:	e027      	b.n	800b934 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	0f1b      	lsrs	r3, r3, #28
 800b8e8:	2b09      	cmp	r3, #9
 800b8ea:	d80b      	bhi.n	800b904 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	0f1b      	lsrs	r3, r3, #28
 800b8f0:	b2da      	uxtb	r2, r3
 800b8f2:	7dfb      	ldrb	r3, [r7, #23]
 800b8f4:	005b      	lsls	r3, r3, #1
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	440b      	add	r3, r1
 800b8fc:	3230      	adds	r2, #48	; 0x30
 800b8fe:	b2d2      	uxtb	r2, r2
 800b900:	701a      	strb	r2, [r3, #0]
 800b902:	e00a      	b.n	800b91a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	0f1b      	lsrs	r3, r3, #28
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	005b      	lsls	r3, r3, #1
 800b90e:	4619      	mov	r1, r3
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	440b      	add	r3, r1
 800b914:	3237      	adds	r2, #55	; 0x37
 800b916:	b2d2      	uxtb	r2, r2
 800b918:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	011b      	lsls	r3, r3, #4
 800b91e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	005b      	lsls	r3, r3, #1
 800b924:	3301      	adds	r3, #1
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	4413      	add	r3, r2
 800b92a:	2200      	movs	r2, #0
 800b92c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	3301      	adds	r3, #1
 800b932:	75fb      	strb	r3, [r7, #23]
 800b934:	7dfa      	ldrb	r2, [r7, #23]
 800b936:	79fb      	ldrb	r3, [r7, #7]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d3d3      	bcc.n	800b8e4 <IntToUnicode+0x18>
  }
}
 800b93c:	bf00      	nop
 800b93e:	bf00      	nop
 800b940:	371c      	adds	r7, #28
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
	...

0800b94c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08a      	sub	sp, #40	; 0x28
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b954:	f107 0314 	add.w	r3, r7, #20
 800b958:	2200      	movs	r2, #0
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	605a      	str	r2, [r3, #4]
 800b95e:	609a      	str	r2, [r3, #8]
 800b960:	60da      	str	r2, [r3, #12]
 800b962:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a1f      	ldr	r2, [pc, #124]	; (800b9e8 <HAL_PCD_MspInit+0x9c>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d137      	bne.n	800b9de <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b96e:	4b1f      	ldr	r3, [pc, #124]	; (800b9ec <HAL_PCD_MspInit+0xa0>)
 800b970:	695b      	ldr	r3, [r3, #20]
 800b972:	4a1e      	ldr	r2, [pc, #120]	; (800b9ec <HAL_PCD_MspInit+0xa0>)
 800b974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b978:	6153      	str	r3, [r2, #20]
 800b97a:	4b1c      	ldr	r3, [pc, #112]	; (800b9ec <HAL_PCD_MspInit+0xa0>)
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b982:	613b      	str	r3, [r7, #16]
 800b984:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b986:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b98a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b98c:	2302      	movs	r3, #2
 800b98e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b990:	2300      	movs	r3, #0
 800b992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b994:	2303      	movs	r3, #3
 800b996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b998:	230e      	movs	r3, #14
 800b99a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b99c:	f107 0314 	add.w	r3, r7, #20
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b9a6:	f7f7 fb49 	bl	800303c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b9aa:	4b10      	ldr	r3, [pc, #64]	; (800b9ec <HAL_PCD_MspInit+0xa0>)
 800b9ac:	69db      	ldr	r3, [r3, #28]
 800b9ae:	4a0f      	ldr	r2, [pc, #60]	; (800b9ec <HAL_PCD_MspInit+0xa0>)
 800b9b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9b4:	61d3      	str	r3, [r2, #28]
 800b9b6:	4b0d      	ldr	r3, [pc, #52]	; (800b9ec <HAL_PCD_MspInit+0xa0>)
 800b9b8:	69db      	ldr	r3, [r3, #28]
 800b9ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9be:	60fb      	str	r3, [r7, #12]
 800b9c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 800b9c2:	4b0b      	ldr	r3, [pc, #44]	; (800b9f0 <HAL_PCD_MspInit+0xa4>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a0a      	ldr	r2, [pc, #40]	; (800b9f0 <HAL_PCD_MspInit+0xa4>)
 800b9c8:	f043 0320 	orr.w	r3, r3, #32
 800b9cc:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	204b      	movs	r0, #75	; 0x4b
 800b9d4:	f7f7 fafb 	bl	8002fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b9d8:	204b      	movs	r0, #75	; 0x4b
 800b9da:	f7f7 fb14 	bl	8003006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b9de:	bf00      	nop
 800b9e0:	3728      	adds	r7, #40	; 0x28
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	40005c00 	.word	0x40005c00
 800b9ec:	40021000 	.word	0x40021000
 800b9f0:	40010000 	.word	0x40010000

0800b9f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ba08:	4619      	mov	r1, r3
 800ba0a:	4610      	mov	r0, r2
 800ba0c:	f7fe fcdc 	bl	800a3c8 <USBD_LL_SetupStage>
}
 800ba10:	bf00      	nop
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	460b      	mov	r3, r1
 800ba22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ba2a:	78fa      	ldrb	r2, [r7, #3]
 800ba2c:	6879      	ldr	r1, [r7, #4]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	00db      	lsls	r3, r3, #3
 800ba36:	440b      	add	r3, r1
 800ba38:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	78fb      	ldrb	r3, [r7, #3]
 800ba40:	4619      	mov	r1, r3
 800ba42:	f7fe fd0e 	bl	800a462 <USBD_LL_DataOutStage>
}
 800ba46:	bf00      	nop
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b082      	sub	sp, #8
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	460b      	mov	r3, r1
 800ba58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ba60:	78fa      	ldrb	r2, [r7, #3]
 800ba62:	6879      	ldr	r1, [r7, #4]
 800ba64:	4613      	mov	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	00db      	lsls	r3, r3, #3
 800ba6c:	440b      	add	r3, r1
 800ba6e:	333c      	adds	r3, #60	; 0x3c
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	78fb      	ldrb	r3, [r7, #3]
 800ba74:	4619      	mov	r1, r3
 800ba76:	f7fe fd65 	bl	800a544 <USBD_LL_DataInStage>
}
 800ba7a:	bf00      	nop
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b082      	sub	sp, #8
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7fe fe78 	bl	800a786 <USBD_LL_SOF>
}
 800ba96:	bf00      	nop
 800ba98:	3708      	adds	r7, #8
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800baa6:	2301      	movs	r3, #1
 800baa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d001      	beq.n	800bab6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bab2:	f7f5 fccf 	bl	8001454 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800babc:	7bfa      	ldrb	r2, [r7, #15]
 800babe:	4611      	mov	r1, r2
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe fe25 	bl	800a710 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fe fdde 	bl	800a68e <USBD_LL_Reset>
}
 800bad2:	bf00      	nop
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
	...

0800badc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800baea:	4618      	mov	r0, r3
 800baec:	f7fe fe20 	bl	800a730 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d005      	beq.n	800bb04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800baf8:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <HAL_PCD_SuspendCallback+0x30>)
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	4a03      	ldr	r2, [pc, #12]	; (800bb0c <HAL_PCD_SuspendCallback+0x30>)
 800bafe:	f043 0306 	orr.w	r3, r3, #6
 800bb02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	e000ed00 	.word	0xe000ed00

0800bb10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fe fe1b 	bl	800a75a <USBD_LL_Resume>
}
 800bb24:	bf00      	nop
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bb34:	4a28      	ldr	r2, [pc, #160]	; (800bbd8 <USBD_LL_Init+0xac>)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a26      	ldr	r2, [pc, #152]	; (800bbd8 <USBD_LL_Init+0xac>)
 800bb40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bb44:	4b24      	ldr	r3, [pc, #144]	; (800bbd8 <USBD_LL_Init+0xac>)
 800bb46:	4a25      	ldr	r2, [pc, #148]	; (800bbdc <USBD_LL_Init+0xb0>)
 800bb48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bb4a:	4b23      	ldr	r3, [pc, #140]	; (800bbd8 <USBD_LL_Init+0xac>)
 800bb4c:	2208      	movs	r2, #8
 800bb4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bb50:	4b21      	ldr	r3, [pc, #132]	; (800bbd8 <USBD_LL_Init+0xac>)
 800bb52:	2202      	movs	r2, #2
 800bb54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb56:	4b20      	ldr	r3, [pc, #128]	; (800bbd8 <USBD_LL_Init+0xac>)
 800bb58:	2202      	movs	r2, #2
 800bb5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bb5c:	4b1e      	ldr	r3, [pc, #120]	; (800bbd8 <USBD_LL_Init+0xac>)
 800bb5e:	2200      	movs	r2, #0
 800bb60:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bb62:	4b1d      	ldr	r3, [pc, #116]	; (800bbd8 <USBD_LL_Init+0xac>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bb68:	481b      	ldr	r0, [pc, #108]	; (800bbd8 <USBD_LL_Init+0xac>)
 800bb6a:	f7f7 fc29 	bl	80033c0 <HAL_PCD_Init>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bb74:	f7f5 fc6e 	bl	8001454 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb7e:	2318      	movs	r3, #24
 800bb80:	2200      	movs	r2, #0
 800bb82:	2100      	movs	r1, #0
 800bb84:	f7f9 f8b2 	bl	8004cec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb8e:	2358      	movs	r3, #88	; 0x58
 800bb90:	2200      	movs	r2, #0
 800bb92:	2180      	movs	r1, #128	; 0x80
 800bb94:	f7f9 f8aa 	bl	8004cec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb9e:	23c0      	movs	r3, #192	; 0xc0
 800bba0:	2200      	movs	r2, #0
 800bba2:	2181      	movs	r1, #129	; 0x81
 800bba4:	f7f9 f8a2 	bl	8004cec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bbae:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	f7f9 f899 	bl	8004cec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bbc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2182      	movs	r1, #130	; 0x82
 800bbc8:	f7f9 f890 	bl	8004cec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20001130 	.word	0x20001130
 800bbdc:	40005c00 	.word	0x40005c00

0800bbe0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7f7 fcb4 	bl	8003564 <HAL_PCD_Start>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
 800bc02:	4618      	mov	r0, r3
 800bc04:	f000 f964 	bl	800bed0 <USBD_Get_USB_Status>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b084      	sub	sp, #16
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	4608      	mov	r0, r1
 800bc20:	4611      	mov	r1, r2
 800bc22:	461a      	mov	r2, r3
 800bc24:	4603      	mov	r3, r0
 800bc26:	70fb      	strb	r3, [r7, #3]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	70bb      	strb	r3, [r7, #2]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc3e:	78bb      	ldrb	r3, [r7, #2]
 800bc40:	883a      	ldrh	r2, [r7, #0]
 800bc42:	78f9      	ldrb	r1, [r7, #3]
 800bc44:	f7f7 fdad 	bl	80037a2 <HAL_PCD_EP_Open>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc4c:	7bfb      	ldrb	r3, [r7, #15]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f000 f93e 	bl	800bed0 <USBD_Get_USB_Status>
 800bc54:	4603      	mov	r3, r0
 800bc56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b084      	sub	sp, #16
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc72:	2300      	movs	r3, #0
 800bc74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc7c:	78fa      	ldrb	r2, [r7, #3]
 800bc7e:	4611      	mov	r1, r2
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7f7 fdeb 	bl	800385c <HAL_PCD_EP_Close>
 800bc86:	4603      	mov	r3, r0
 800bc88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f000 f91f 	bl	800bed0 <USBD_Get_USB_Status>
 800bc92:	4603      	mov	r3, r0
 800bc94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc96:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcac:	2300      	movs	r3, #0
 800bcae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcba:	78fa      	ldrb	r2, [r7, #3]
 800bcbc:	4611      	mov	r1, r2
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7f7 fe94 	bl	80039ec <HAL_PCD_EP_SetStall>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcc8:	7bfb      	ldrb	r3, [r7, #15]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 f900 	bl	800bed0 <USBD_Get_USB_Status>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	460b      	mov	r3, r1
 800bce8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcf8:	78fa      	ldrb	r2, [r7, #3]
 800bcfa:	4611      	mov	r1, r2
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7f7 fec7 	bl	8003a90 <HAL_PCD_EP_ClrStall>
 800bd02:	4603      	mov	r3, r0
 800bd04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd06:	7bfb      	ldrb	r3, [r7, #15]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f000 f8e1 	bl	800bed0 <USBD_Get_USB_Status>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd12:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	da0c      	bge.n	800bd52 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd38:	78fb      	ldrb	r3, [r7, #3]
 800bd3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd3e:	68f9      	ldr	r1, [r7, #12]
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	4613      	mov	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	00db      	lsls	r3, r3, #3
 800bd4a:	440b      	add	r3, r1
 800bd4c:	3302      	adds	r3, #2
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	e00b      	b.n	800bd6a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd52:	78fb      	ldrb	r3, [r7, #3]
 800bd54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd58:	68f9      	ldr	r1, [r7, #12]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	00db      	lsls	r3, r3, #3
 800bd62:	440b      	add	r3, r1
 800bd64:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bd68:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3714      	adds	r7, #20
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b084      	sub	sp, #16
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	460b      	mov	r3, r1
 800bd80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd86:	2300      	movs	r3, #0
 800bd88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd90:	78fa      	ldrb	r2, [r7, #3]
 800bd92:	4611      	mov	r1, r2
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7f7 fcdf 	bl	8003758 <HAL_PCD_SetAddress>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	4618      	mov	r0, r3
 800bda2:	f000 f895 	bl	800bed0 <USBD_Get_USB_Status>
 800bda6:	4603      	mov	r3, r0
 800bda8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	607a      	str	r2, [r7, #4]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	72fb      	strb	r3, [r7, #11]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bdd6:	893b      	ldrh	r3, [r7, #8]
 800bdd8:	7af9      	ldrb	r1, [r7, #11]
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	f7f7 fdcf 	bl	800397e <HAL_PCD_EP_Transmit>
 800bde0:	4603      	mov	r3, r0
 800bde2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bde4:	7dfb      	ldrb	r3, [r7, #23]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f000 f872 	bl	800bed0 <USBD_Get_USB_Status>
 800bdec:	4603      	mov	r3, r0
 800bdee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdf0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3718      	adds	r7, #24
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b086      	sub	sp, #24
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	60f8      	str	r0, [r7, #12]
 800be02:	607a      	str	r2, [r7, #4]
 800be04:	461a      	mov	r2, r3
 800be06:	460b      	mov	r3, r1
 800be08:	72fb      	strb	r3, [r7, #11]
 800be0a:	4613      	mov	r3, r2
 800be0c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be0e:	2300      	movs	r3, #0
 800be10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be12:	2300      	movs	r3, #0
 800be14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be1c:	893b      	ldrh	r3, [r7, #8]
 800be1e:	7af9      	ldrb	r1, [r7, #11]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	f7f7 fd63 	bl	80038ec <HAL_PCD_EP_Receive>
 800be26:	4603      	mov	r3, r0
 800be28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 f84f 	bl	800bed0 <USBD_Get_USB_Status>
 800be32:	4603      	mov	r3, r0
 800be34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be36:	7dbb      	ldrb	r3, [r7, #22]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	460b      	mov	r3, r1
 800be4a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be52:	78fa      	ldrb	r2, [r7, #3]
 800be54:	4611      	mov	r1, r2
 800be56:	4618      	mov	r0, r3
 800be58:	f7f7 fd79 	bl	800394e <HAL_PCD_EP_GetRxCount>
 800be5c:	4603      	mov	r3, r0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
	...

0800be68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be70:	4b03      	ldr	r3, [pc, #12]	; (800be80 <USBD_static_malloc+0x18>)
}
 800be72:	4618      	mov	r0, r3
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	2000141c 	.word	0x2000141c

0800be84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]

}
 800be8c:	bf00      	nop
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800bea4:	78fb      	ldrb	r3, [r7, #3]
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d107      	bne.n	800beba <HAL_PCDEx_SetConnectionState+0x22>
  {
    /* Configure Low connection state. */
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_SET);
 800beaa:	2201      	movs	r2, #1
 800beac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800beb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800beb4:	f7f7 fa54 	bl	8003360 <HAL_GPIO_WritePin>
    /* Configure High connection state. */
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_RESET);

  }
  /* USER CODE END 6 */
}
 800beb8:	e006      	b.n	800bec8 <HAL_PCDEx_SetConnectionState+0x30>
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_RESET);
 800beba:	2200      	movs	r2, #0
 800bebc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bec4:	f7f7 fa4c 	bl	8003360 <HAL_GPIO_WritePin>
}
 800bec8:	bf00      	nop
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b085      	sub	sp, #20
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	4603      	mov	r3, r0
 800bed8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bede:	79fb      	ldrb	r3, [r7, #7]
 800bee0:	2b03      	cmp	r3, #3
 800bee2:	d817      	bhi.n	800bf14 <USBD_Get_USB_Status+0x44>
 800bee4:	a201      	add	r2, pc, #4	; (adr r2, 800beec <USBD_Get_USB_Status+0x1c>)
 800bee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beea:	bf00      	nop
 800beec:	0800befd 	.word	0x0800befd
 800bef0:	0800bf03 	.word	0x0800bf03
 800bef4:	0800bf09 	.word	0x0800bf09
 800bef8:	0800bf0f 	.word	0x0800bf0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73fb      	strb	r3, [r7, #15]
    break;
 800bf00:	e00b      	b.n	800bf1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf02:	2302      	movs	r3, #2
 800bf04:	73fb      	strb	r3, [r7, #15]
    break;
 800bf06:	e008      	b.n	800bf1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf0c:	e005      	b.n	800bf1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf0e:	2302      	movs	r3, #2
 800bf10:	73fb      	strb	r3, [r7, #15]
    break;
 800bf12:	e002      	b.n	800bf1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bf14:	2302      	movs	r3, #2
 800bf16:	73fb      	strb	r3, [r7, #15]
    break;
 800bf18:	bf00      	nop
  }
  return usb_status;
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3714      	adds	r7, #20
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <memset>:
 800bf28:	4402      	add	r2, r0
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d100      	bne.n	800bf32 <memset+0xa>
 800bf30:	4770      	bx	lr
 800bf32:	f803 1b01 	strb.w	r1, [r3], #1
 800bf36:	e7f9      	b.n	800bf2c <memset+0x4>

0800bf38 <__libc_init_array>:
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	4d0d      	ldr	r5, [pc, #52]	; (800bf70 <__libc_init_array+0x38>)
 800bf3c:	4c0d      	ldr	r4, [pc, #52]	; (800bf74 <__libc_init_array+0x3c>)
 800bf3e:	1b64      	subs	r4, r4, r5
 800bf40:	10a4      	asrs	r4, r4, #2
 800bf42:	2600      	movs	r6, #0
 800bf44:	42a6      	cmp	r6, r4
 800bf46:	d109      	bne.n	800bf5c <__libc_init_array+0x24>
 800bf48:	4d0b      	ldr	r5, [pc, #44]	; (800bf78 <__libc_init_array+0x40>)
 800bf4a:	4c0c      	ldr	r4, [pc, #48]	; (800bf7c <__libc_init_array+0x44>)
 800bf4c:	f000 f818 	bl	800bf80 <_init>
 800bf50:	1b64      	subs	r4, r4, r5
 800bf52:	10a4      	asrs	r4, r4, #2
 800bf54:	2600      	movs	r6, #0
 800bf56:	42a6      	cmp	r6, r4
 800bf58:	d105      	bne.n	800bf66 <__libc_init_array+0x2e>
 800bf5a:	bd70      	pop	{r4, r5, r6, pc}
 800bf5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf60:	4798      	blx	r3
 800bf62:	3601      	adds	r6, #1
 800bf64:	e7ee      	b.n	800bf44 <__libc_init_array+0xc>
 800bf66:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf6a:	4798      	blx	r3
 800bf6c:	3601      	adds	r6, #1
 800bf6e:	e7f2      	b.n	800bf56 <__libc_init_array+0x1e>
 800bf70:	0800c050 	.word	0x0800c050
 800bf74:	0800c050 	.word	0x0800c050
 800bf78:	0800c050 	.word	0x0800c050
 800bf7c:	0800c058 	.word	0x0800c058

0800bf80 <_init>:
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf82:	bf00      	nop
 800bf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf86:	bc08      	pop	{r3}
 800bf88:	469e      	mov	lr, r3
 800bf8a:	4770      	bx	lr

0800bf8c <_fini>:
 800bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8e:	bf00      	nop
 800bf90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf92:	bc08      	pop	{r3}
 800bf94:	469e      	mov	lr, r3
 800bf96:	4770      	bx	lr
